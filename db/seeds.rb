# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)
# entry1 = Termlist.create(course_id: '1', term_id: '8')
# entry2 = Termlist.create(course_id: '1', term_id: '9')
# entry3 = Termlist.create(course_id: '2', term_id: '8')
#
# course1 = Course.create(coursename: 'CMIS 1004', coursetitle: 'Object-Oriented Programming Concepts')
# course2 = Course.create(coursename: 'CMIS 2001', coursetitle: 'Internet Computing')
# course3 = Course.create(coursename: 'ENGL 1001 6WK', coursetitle: 'English Composition')
# course4 = Course.create(coursename: 'HMNT 1001', coursetitle: 'Living and Learning in a Technological World')
# course5 = Course.create(coursename: 'MATH 1030', coursetitle: 'College Math')
# course6 = Course.create(coursename: 'READ 6707', coursetitle: 'Reading and Literacy Growth, Grades 4-6')
# course7 = Course.create(coursename: 'MMPA 6115', coursetitle: 'Foundations for Graduate Study')
# course8 = Course.create(coursename: 'PUBH 6033', coursetitle: 'Interpretation and Application of Public Health Data')
# course9 = Course.create(coursename: 'EDUC 8002', coursetitle: 'Leading the Future of Education')
# course10 = Course.create(coursename: 'EDUC 8341', coursetitle: 'Trends and Issues in Educational Technology')
# course11 = Course.create(coursename: 'EDUC 8342', coursetitle: 'Emerging and Future Technologies')
# course12 = Course.create(coursename: 'EDUC 8343', coursetitle: 'Creating Digital Media')
# term1 = Term.create(termname:'graphical user interface', definition: '<p>A graphical user interface (GUI) allows a user to interact with an electronic system using graphical controls and indicators. User actions taken in the GUI initiate events. The GUI provides an intuitive interface in which the user can easily accomplish desired tasks.</p><p>Search Terms: GUI, graphical user interface, windows form, human-computer interaction, WIMP (windows, icons, menus, pointers)</p>')
# term2 = Term.create(termname:'GUI', definition: '<p>A graphical user interface (GUI) allows a user to interact with an electronic system using graphical controls and indicators. User actions taken in the GUI initiate events. The GUI provides an intuitive interface in which the user can easily accomplish desired tasks.</p><p>Search Terms: GUI, graphical user interface, windows form, human-computer interaction, WIMP (windows, icons, menus, pointers)</p>')
# term3 = Term.create(termname:'object-oriented', definition: '<p>An object-oriented approach treats a system as a set of interacting objects. Objects are created from classes that list the properties needed to describe the objects and include methods that are tasks any object of that class can perform. This approach supports modularization and extensibility.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets11p1.html" title="Free Term: Visual Basic dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets11p1.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/dd460654.aspx" title="Object-Oriented Programming reference" target="_blank">http://msdn.microsoft.com/en-us/library/dd460654.aspx</a></p><p>Search Terms: object-oriented, system design, class, object, modularization, abstraction, encapsulation, inheritance, polymorphism</p>')
# term4 = Term.create(termname:'programming', definition: '<p>Programming is the process of creating an executable program telling a computer how to perform specific tasks. Here, we are utilizing object-oriented programming which supports class based system design. This is in contrast to procedural or structural programming which focuses on system state and step-by-step processes to move from one state to another.</p><p>Search Terms: object-oriented programming, structural programming, procedural programming, programming languages, software development</p>')
# term5 = Term.create(termname:'OOP', definition: '<p>OOP is object-oriented programming. This approach to programming is built upon creating objects with specified properties from general classes. The focus is on elements within the system. The OOP approach breaks down the system into components which include (encapsulate) variables (properties) and processes (methods). This approach makes it easier for multiple programmers to work simultaneously on a project, facilitates integration of projects, supports integration of code libraries through the class inheritance structure, and aligns to system design and analysis principles.</p><p>Links:&nbsp;<a href="http://www.homeandlearn.co.uk/NET/nets11p1.html" title="Free Term: Visual Basic dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets11p1.html</a>&nbsp;;&nbsp;<a href="http://msdn.microsoft.com/en-us/library/dd460654.aspx" title="Object-Oriented Programming reference" target="_blank">http://msdn.microsoft.com/en-us/library/dd460654.aspx</a></p><p>Search Terms: object-oriented, system design, class, object, modularization, abstraction, encapsulation, inheritance, polymorphism</p>')
# term6 = Term.create(termname:'integrated development environment', definition: '<p>An integrated development environment (IDE) is a system for developing and publishing programs. The IDE facilitates GUI design, integration of code libraries, code writing, compiling, and debugging and testing code. The IDE supports all aspects of program development. Visual Studio is an example of an IDE.</p><p>Search Terms: integrated development environment, IDE, software development, source code editor, compiler, interpreter</p>')
# term7 = Term.create(termname:'IDE', definition: '<p>An integrated development environment (IDE) is a system for developing and publishing programs. The IDE facilitates GUI design, integration of code libraries, code writing, compiling, and debugging and testing code. The IDE supports all aspects of program development. Visual Studio is an example of an IDE.</p><p>Search Terms: integrated development environment, IDE, software development, source code editor, compiler, interpreter</p>')
# term8 = Term.create(termname:'input', definition: '<p>Any information that goes into a program is called an input. Inputs may be data based storing variables or may be event based. In the inputs-process-outputs model for programming, the first section identifies all such inputs. As an example, a program might be designed that adds together two numbers. The inputs would be the two numbers being added together.</p><p>Search Terms: input-process-outputs model, programming variable, program inputs</p>')
# term9 = Term.create(termname:'output', definition: '<p>The results that come out of a program are called the outputs. In the inputs-process-outputs model for programming, the final section presents the outputs to the user. As an example, a program might be designed that adds two numbers together. The output would be displaying the answer.</p><p>Search Terms: input-process-outputs model, programming outputs</p>')
# term10 = Term.create(termname:'process', definition: '<p>The purpose of a program is to interpret the inputs in order to produce the desired outputs. In the inputs-process-outputs model, the process is this algorithm for this interpretation. As an example, a program might be designed that adds two numbers together. The process would be the actual act of addition where the sum is calculated.</p><p>Search Terms: inputs-process-outputs model, computer algorithm</p>')
# term11 = Term.create(termname:'program', definition: '<p>An executable program is the computer instructions to perform a specific task. Programs are based on step-by-step instructions called algorithms that perform the task the same way every time the program is run. Programs are modeled as inputs-process-outputs. Inputs are the information needed from the user, outputs are the results given back to the user, and process is the algorithms to interpret the inputs and produce the outputs.</p><p>Search Terms: computer program, programming languages, inputs-process-outputs model</p>')
# term12 = Term.create(termname:'debug', definition: '<p>Debugging is the process of removing bugs or errors from a program to ensure that the program operates correctly. Debugging includes assessing and correcting both syntax errors and logical or functional errors. As systems become more complex, so does the debugging process. The IDE includes many tools to support debug.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/sc65sadd.aspx" title="Debugging in Visual Studio" target="_blank">http://msdn.microsoft.com/en-us/library/sc65sadd.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets5p1.html" title="Error Handling and Debugging in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets5p1.html</a></p><p>Search Terms: debugging, error checking, software testing</p>')
# term13 = Term.create(termname:'error', definition: '<p>An error is anything that causes a program not to perform as intended. Syntax or design-time errors are coding errors resulting incorrect code and are identified by the error checker. Functional errors are when a program cannot or does not do what is expected. If it cannot perform a function, that is called a runtime error and often causes a program to crash. If it does not perform the function correctly, that is a logical error. Testing is required to identify functional errors. Debugging is the process of identifying and correcting errors.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets5p1.html" title="Error Handling and Debugging in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets5p1.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/shz02d41%28v=vs.120%29.aspx" title="Error Types in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/shz02d41%28v=vs.120%29.aspx</a></p><p>Search Terms: programming errors, error checking, error handling, debugging, software testing, programming syntax error, runtime error, programming logic error</p>')
# term14 = Term.create(termname:'information system', definition: '<p>Information systems integrate hardware and software to collect, process, and distribute data for an organization. The information system is key to business operations and management. The core items in an information system are the data itself and the programs that manipulate the data. Understanding the programs is crucial for understanding the information system.</p><p>Search Terms: computer information systems ; enterprise systems</p>')
# term15 = Term.create(termname:'control', definition: '<p>Items that display information or visually guide user actions in a GUI are called controls. Controls are sometimes called widgets and provide a direct way for the user and system to interact. Common controls include buttons, sliders, menus, toolbars, icons, trees, text boxes, and scroll bars&nbsp;</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p3.html" title="Adding Controls Using the Toolbox" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p3.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/ettb6e2a.aspx" title="Windows Forms Controls" target="_blank">http://msdn.microsoft.com/en-us/library/ettb6e2a.aspx</a></p><p>Search Terms: GUI control, widget</p>')
# term16 = Term.create(termname:'event', definition: '<p>User actions in a GUI are called events. These are generally associated with a specific control. Events trigger specific actions by the program. Common events include mouse movement and clicks, key board entries, focus changes, and timers. For touch interfaces, taps or swipes are also common events.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets10p1.html" title="The Click Event" target="_blank">http://www.homeandlearn.co.uk/NET/nets10p1.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/1h12f09z.aspx" title="Event Overview in Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/1h12f09z.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/ms172877.aspx" title="Events in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/ms172877.aspx</a></p><p>Search Terms: GUI event, event listener, key stroke, mouse event&nbsp;</p>')
# term17 = Term.create(termname:'Visual Basic', definition: '<p>Visual Basic is a .NET programming language with straight forward syntax designed for beginning programmers. Although designed for basic tasks, it is a robust language and can be utilized for complex development as well. Visual Basic integrates both object-oriented and procedural development capabilities in an event-driven environment. Visual Basic is most commonly utilized for developing simple windows based applications.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/vstudio/hh388573" title="Visual Basic resources" target="_blank">http://msdn.microsoft.com/en-us/vstudio/hh388573</a> ;&nbsp;</p><p>Search Terms: Visual Basic, event-driven programming, Visual Studio&nbsp;</p>')
# term18 = Term.create(termname:'breakpoint', definition: '<p>A breakpoint is a place where you stop program execution when debugging. A breakpoint allows you to analyze the system with everything paused. You can check variable contents as well as work step-by-step through the program. After analysis, you can continue program execution from the exact point that it stopped.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets5p6.html" title="Breakpoints and Debugging Tools" target="_blank">http://www.homeandlearn.co.uk/NET/nets5p6.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/5557y8b4%28v=vs.100%29.aspx" title="Using Breakpoints and Tracepoints" target="_blank">http://msdn.microsoft.com/en-us/library/5557y8b4%28v=vs.100%29.aspx</a></p><p>Search Terms: breakpoint, debugging</p>')
# term19 = Term.create(termname:'variable', definition: '<p>A variable is a designation for an area in computer memory storing a specific type of item. Variables facilitate accessing and manipulating that stored item within a program. A variable may designate a simple data type line an integer or string, may link a more complex item like an object or array, or may even refer to other sections of code. Variables are effectively a way of saving and referencing items in a program. When a variable is created, you must name the variable and tell what data type the variable will be. As an example, &ldquo;Dim count as Integer&rdquo; creates a variable called count that is able to store integers.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p10.html" title="How to Create Variables in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p10.html</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets1p15.html" title="More About Variables in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p15.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/cd6hcy37.aspx" title="Variables in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/cd6hcy37.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/7ee5a7s1.aspx" title="Dim Statement in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/7ee5a7s1.aspx</a></p><p>Search Terms: programming variables, data types</p>')
# term20 = Term.create(termname:'software development', definition: '<p>Software development is the process of designing, developing, and deploying a software product. Programming or writing code is a core aspect of software development, but it includes other facets as well like design, testing, marketing, and maintenance. Software development encompasses all business activities associated with creating and deploying software products.</p><p>Search Terms: software development, software development methodologies, software lifecycle, systems development lifecycle</p>')
# term21 = Term.create(termname:'dim', definition: '<p>A Dim statement is utilized to create a variable. It names the variable and specifies the data type. For example, &ldquo;Dim names(10) As String&rdquo; creates an array called names that is able to store 10 different strings for each of the different names. Dim can also be replaced with Public, Private, Protected, or Static to control variable access characteristics. In each case, the action is to declare or create a variable.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/7ee5a7s1.aspx" title="Dim Statement in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/7ee5a7s1.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets1p10.html" title="How to Create Variables in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p10.html</a></p><p>Search Terms: variable declarations, dim statement</p>')
# term22 = Term.create(termname:'data type', definition: '<p>Data type describes how information is formatted and stored. Every variable created must be associated with a specific data type. There are numerous simple data types like booleans, integers, decimals, strings, or dates that are common to all data systems. More complex data types such as arrays, lists, trees, graphs, hashes, or objects can also be specified.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/47zceaw7.aspx" title="Data Type Summary in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/47zceaw7.aspx</a></p><p>Search Terms: data types</p>')
# term23 = Term.create(termname:'boolean', definition: '<p>A boolean is a data type that stores a single bit representing either a 1 or a 0. This can be thought of as True and False or Yes and No. Booleans are utilized in decision-based logic as each condition is either True or False. Booleans are also commonly used to store information regarding whether or not a characteristic is present. Demographics like Male/Female or whether or not someone is a given ethnicity are common.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/wts33hb3.aspx" title="Boolean Data Type in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/wts33hb3.aspx</a></p><p>Search Terms: Boolean, Boolean logic, conditional statement</p>')
# term24 = Term.create(termname:'integer', definition: '<p>An integer is a data type that stores a whole number. In programs, integers commonly serve as counters to track incremental progress. Integers are also used as variables not only for numeric data but also for ordinal and nominal data. For example, the department a person works for might be stored as an integer from 1 to 6 for each different department as this is more efficient that storing a string with the department name. In programs, mathematical operators act as mathematically expected on integers; so, 1+1 will give 2.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/06bkb8w2.aspx" title="Integer Data Type in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/06bkb8w2.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/b6ex274z.aspx" title="Arithmetic Operators in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/b6ex274z.aspx</a></p><p><a href="http://msdn.microsoft.com/en-us/library/b6ex274z.aspx" title="Arithmetic Operators in Visual Basic" target="_blank"></a></p><p>Search Terms: integer, long data type, short data type</p>')
# term25 = Term.create(termname:'string', definition: '<p>A string is a data type that stores a series of characters. These can include letters, numbers, and special characters. Effectively, any information desired can be stored as a string. Strings are actually objects created from the simpler char data type. The String class includes methods for manipulating and editing strings</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/thwcx436.aspx" title="String Data Type in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/thwcx436.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets7p1.html" title="String Manipulation in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets7p1.html</a></p><p>Search Terms: string, character encoding, string class</p>')
# term26 = Term.create(termname:'decimal', definition: '<p>Decimal is a data type able to store numbers with up to 28 digits to the right of the decimal point. Other data types like double or single also hold decimal data. In programs, mathematical operators act as mathematically expected on decimals; so, 0.5/1.5 will give 0.3333333333333333333333333333. Since the result is limited to 28 digits, floating point considerations must be handled by the program as well.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/xay7978z.aspx" title="Single Data Type in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/xay7978z.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/b6ex274z.aspx" title="Arithmetic Operators in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/b6ex274z.aspx</a></p><p>Search Terms: decimal, double data type, single data typ, floating point&nbsp;</p>')
# term27 = Term.create(termname:'array', definition: '<p>An array is a complex data type that stores a collection of items. Those items can even be other arrays. Each item in an array is identified by dimension based keys that match to its location in the array. Two-dimensional arrays are common as they are utilized to store and manipulate mathematical matrices. Arrays are also utilized in both pixel-based and vector-based graphics. Multi-dimensional arrays help to capture complex relationships and are common in statistical analysis. In many cases where an array is utilized in programming, the simpler list is actually more appropriate.&nbsp;</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets6p1.html" title="What is an Array?" target="_blank">http://www.homeandlearn.co.uk/NET/nets6p1.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/wak0wfyt.aspx" title="Arrays in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/wak0wfyt.aspx</a></p><p>Search Terms: array, matrix</p>')
# term28 = Term.create(termname:'object', definition: '<p>Objects are specific instances of a class. Each object is stored in a unique location and has specifically defined properties that differentiate it from other objects. An object can utilize methods not only from the class that created it but also from any inheritance classes. In object-oriented design, objects correspond to real-world items mapping the computer system to the real system. As an example, a dog class might be the template for an object Lassie.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets11p1.html" title="VB dotNet Classes and Objects" target="_blank">http://www.homeandlearn.co.uk/NET/nets11p1.html</a></p><p>Search Terms: object-oriented object, object-oriented programming, object-oriented design&nbsp;</p>')
# term29 = Term.create(termname:'class', definition: '<p>A class is template utilized in object-oriented programming and design. The class specifies properties which are variables to describe an object. The class also includes methods that can manipulate an object or control the objects interactions. Objects are created from classes to model real world systems. As an example, a dog class might be the template for an object Lassie.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets11p1.html" title="VB dotNet Classes and Objects" target="_blank">http://www.homeandlearn.co.uk/NET/nets11p1.html</a> ; <a href="http://msdn.microsoft.com/en-us/library/ms973814.aspx" title="Creating Classes in Visual Basic dotNet" target="_blank">http://msdn.microsoft.com/en-us/library/ms973814.aspx</a></p><p>Search Terms: object-oriented class, object-oriented programming, object-oriented design</p>')
# term30 = Term.create(termname:'child-class', definition: '<p>A child-class, often called a sub-class, is a class that inherits properties and methods directly from another class. The class it inherits from is called the parent-class. Each child-class can have only one parent-class; however, that parent-class can be the child-class of another class creating a tree class hierarchy. This structure supports modularized design and programming. As an example, a dog class might be the child of an animal class. That would give any dog object created all the characteristics of an animal as well without needing to reprogram those characteristics.</p><p>Search Terms: object-oriented child-class, object-oriented parent-class, object-oriented sub-class, object-oriented inheritance&nbsp;</p>')
# term31 = Term.create(termname:'parent-class', definition: '<p>A parent-class is a class that contributes properties and methods to another class or classes. Although child-classes can have only one parent-class, parent-classes can have many children. The parent-class provides a superset for properties and methods common to all of the child-classes so that these need to be programmed only once rather than over and over for each child-class. This hierarchy of classes supports efficient, modularized programming and design. As an example, a animal class might be the parent for dog, cat, and bear classes. That would give any dog, cat or bear object created all the characteristics of an animal as well as those specific to the dog, cat, or bear class.</p><p>Search Terms: object-oriented child-class, object-oriented parent-class, object-oriented sub-class, object-oriented inheritance</p>')
# term32 = Term.create(termname:'sub-class', definition: '<p>A child-class, often called a sub-class, is a class that inherits properties and methods directly from another class. The class it inherits from is called the parent-class. Each child-class can have only one parent-class; however, that parent-class can be the child-class of another class creating a tree class hierarchy. This structure supports modularized design and programming. As an example, a dog class might be the child of an animal class. That would give any dog object created all the characteristics of an animal as well without needing to reprogram those characteristics.</p><p>Search Terms: object-oriented child-class, object-oriented parent-class, object-oriented sub-class, object-oriented inheritance</p>')
# term33 = Term.create(termname:'relation', definition: '<p>Relation is a generic term20 identifying any way in which two classes are logically connected to one another. Relations can be generally classified as either inheritance or links. Inheritance is hierarchical involving child-classes and parent-classes. Links describe non-hierarchical relationships. Relations are shown in a UML class diagram to support object-oriented design.</p><p>Search Terms: object-oriented design, class diagram, object-oriented relationships</p>')
# term34 = Term.create(termname:'inheritance', definition: '<p>Inheritance describes a class relationship where a child-class inherits all properties and methods from a parent-class. This is a hierarchical relation where each child can have only one parent but a parent may have many children. Inheritance is shown on a class diagram as an arrow pointing from the child-class to the parent class. The inheritance relationship may be thought of as &ldquo;is a type of&rdquo; where the child-class is a more specific sub-set of the parent-class.</p><p>Search Terms: class inheritance, class diagram, object-oriented design</p>')
# term35 = Term.create(termname:'link', definition: '<p>Links describe relationships that tie two nominally independent classes together. Rather than sharing attributes and methods, they link up to one another often sharing information or calling one another as related attributes. You should be familiar with two types of links. Associations are relationships between two independent entities like a course has students and students take courses. Compositions are dependent relationships where one things is made of others like a car has an engine or has a brake. Links are shown in a class diagram as a line connecting the two classes together. The link may be further characterized using diamonds to indicate the type of link, labels for multiplicity, and labels to describe the relationship. Links may even have their own properties to further describe the relationship.</p><p>Search Terms: class relationships, class association, class composition, &nbsp;object-oriented design</p>')
# term36 = Term.create(termname:'association', definition: '<p>An association is a type of link relationship between two classes. Associations reflect being able to use or reference the other class. As an example, course and student might be associated classes. Students register for courses, and courses are populated by students. The student class would need to call an add student method in the course class to register. The courses class would need to be able to manage and communicate to students. Although independent, associate classes interact.</p><p>Search Terms: class relationships, class association, object-oriented design</p>')
# term37 = Term.create(termname:'composition', definition: '<p>A composition is a type of link relationship between two classes. Compositions reflect a relationship where objects from one class make up another class. As an example, an object from a car class is composed of objects from a number of other classes like an engine class, a muffler class, or a brake class. Each of these shares a composition relationship with the car class.&nbsp;</p><p>Search Terms: class relationships, class composition, object-oriented design</p>')
# term38 = Term.create(termname:'UML', definition: '<p>Unified modeling language (UML) is utilized to model systems and programs. Its specifications are given by the Object Management Group (OMG). UML includes specifications for class diagrams as well as other tools like component diagrams, activity diagrams, use case diagrams, communication diagrams, and sequence diagrams. These are essential for system design and system programming.</p><p>Search Terms: UML&nbsp;</p>')
# term39 = Term.create(termname:'class diagram', definition: '<p>A class diagram is a diagram that shows the relationships between different classes in a system. For each class, the name, attributes, and methods are listed. In the diagram, inheritance relationships are shown with connecting arrows, and links are shown as lines. Additionally, the diagram distinguishes different types of links and their multiplicity. A class diagram is designed using unified modeling language (UML) and helps to support system design, analysis, and development.</p><p>Search Terms: class diagram, UML</p>')
# term40 = Term.create(termname:'language', definition: '<p>Programming languages are sets of syntax and semantic rules that support development of computer instruction algorithms. There are hundreds of different programming languages available for programmers. Each has its own unique capabilities. Languages are often classified as either object-oriented or procedural. Visual Basic is the programming language utilized here.</p><p>Search Terms: programming languages, object-oriented programming, procedural programming, Visual Basic</p>')
# term41 = Term.create(termname:'tree', definition: '<p>A tree is a type of data structure that stores information in a hierarchical manner. This can be displayed and manipulated in Visual Basic using controls from the TreeView Class. The tree control allows expanding and collapsing different nodes. It is common to find this control in navigation to expand and view file contents in a list.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.treeview%28v=vs.110%29.aspx" title="TreeView Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.treeview%28v=vs.110%29.aspx</a></p><p>Search Terms: navigation tree, tree view, tree control</p>')
# term42 = Term.create(termname:'right-click', definition: '<p>Right-click is an event trigger associated with the mouse. This event is activated when the user clicks the button on the right side of the mouse. The mouse right-click generally pops up a menu of common tasks associated with the item the mouse pointer was active on when clicked. This event trigger can also be activated using Shift+F10 or the Ctrl key and left-click.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx" title="Mouse Events in Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets10p2.html" title="The Mouse Event in VB dotNet">http://www.homeandlearn.co.uk/NET/nets10p2.html</a></p><p>Search Terms: mouse right-click</p>')
# term43 = Term.create(termname:'left-click', definition: '<p>Left-click is an event trigger associated with the mouse. This event is activated when the user clicks the button on the left side of the mouse. The mouse left-click is the most commonly utilized mouse-click event and so is often just called clicking rather than left-clicking. It is utilized for common tasks like opening links or selecting objects.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx" title="Mouse Events in Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets10p2.html" title="The Mouse Event in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets10p2.html</a></p><p>Search Terms: mouse left-click</p>')
# term44 = Term.create(termname:'double-click', definition: '<p>Double-click is an event trigger associated with the mouse. This event is activated when the user clicks the button on the left side of the mouse in rapid succession. The mouse double-click generally opens folders or programs.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx" title="Mouse Events in Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/ms171542%28v=vs.110%29.aspx</a> ; <a href="http://www.homeandlearn.co.uk/NET/nets10p2.html" title="The Mouse Event in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets10p2.html</a></p><p>Search Terms: mouse double-click</p>')
# term45 = Term.create(termname:'drag-and-drop', definition: '<p>Drag-and-drop is an event trigger associated with the mouse. This event involves two different user actions: holding down the left mouse button and then moving the mouse. Drag-and-drop is associated with moving objects on the screen.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/ms171546%28v=vs.110%29.aspx" title="Drag and Drop Functionality in Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/ms171546%28v=vs.110%29.aspx</a></p><p>Search Terms: drag-and-drop</p>')
# term46 = Term.create(termname:'expand', definition: '<p>Expand is a control action associated with trees and menus. It opens the menu or part of the tree to show additional content. Expand is usually activated by left-clicking on an item or node or by hovering over a menu item.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.treenode.expand%28v=vs.110%29.aspx" title="TreeNode.Expand Method" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.forms.treenode.expand%28v=vs.110%29.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/ms531859%28v=vs.85%29.aspx" title="Menu Behavior" target="_blank">http://msdn.microsoft.com/en-us/library/ms531859%28v=vs.85%29.aspx</a></p><p>Search Terms: expand node, expand treeview, expand menu</p>')
# term47 = Term.create(termname:'collapse', definition: '<p>Collapse is a control action associated with trees and menus. It closes the menu or part of the tree to hide sub-content. Collapse is usually activated by left-clicking on an item or node that is already expanded or by moving the mouse off of a menu selection.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.treenode.collapse%28v=vs.110%29.aspx" title="TreeNode.Collapse Method" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.forms.treenode.collapse%28v=vs.110%29.aspx</a> ; <a href="http://msdn.microsoft.com/en-us/library/ms531859%28v=vs.85%29.aspx" title="Menu Behavior" target="_blank">http://msdn.microsoft.com/en-us/library/ms531859%28v=vs.85%29.aspx</a></p><p>Search Terms: collapse node, collapse treeview, collapse menu</p>')
# term48 = Term.create(termname:'swipe', definition: '<p>Swipe is an event trigger for touch screen interaction. It takes place when the user drags a finger or stylus across the screen. Swipes can be identified as horizontal swipes, vertical swipes, or cross swipes depending on the movement. Swipes are often used for scrolling navigation.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.input.gesturerecognizer.crosssliding.aspx" title="CrossSliding Event" target="_blank">http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.input.gesturerecognizer.crosssliding.aspx</a></p><p>Search Terms: touch screen gestures, touch screen swipe; cross sliding</p>')
# term49 = Term.create(termname:'tap', definition: '<p>Tap is an event trigger for touch screen interaction. It takes place when the user taps and lifts a finger or stylus on the screen. Taps can be single or double. One-finger and two-finger taps can also be distinguished. Taps commonly open items.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.input.gesturerecognizer.tapped.aspx" title="Tapped Event" target="_blank">http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.input.gesturerecognizer.tapped.aspx</a></p><p>Search Terms: touch screen gestures, touch screen tap</p>')
# term50 = Term.create(termname:'tab', definition: '<p>Tab is an event triggered by pressing the keyboard Tab key. It is important for form navigation because it moves from one form item to the next. In the properties for each item in a GUI, you can select its tab order. The tab process and use of the enter key for selection enables using many GUIs designed for a mouse even when the mouse is disabled.</p><p>Search Terms: tab order, tabbing navigation</p>')
# term51 = Term.create(termname:'human-computer interaction', definition: '<p>Human-computer interaction (HCI) is a discipline that combines technical, social, and behavioral considerations to analyze how humans interact with computers. A primary focus of HCI is interface analysis and design, but it also includes studies of user-satisfaction, analysis and design of hardware, and other aspects of interaction.</p><p>Search Terms: human-computer interaction, interface design</p>')
# term52 = Term.create(termname:'design', definition: '<p>The design tab in Visual Studio is utilized to create the graphical user interface (GUI) for a program. The programmer is able to place controls and edit their properties.&nbsp;</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets1p3.html" title="Adding Controls Using the Toolbox" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p3.html</a></p><p>Search Terms: visual studio interface design, visual studio toolbox</p>')
# term53 = Term.create(termname:'toolbox', definition: '<p>In general, a toolbox is a collection of items available in a program. In Visual Studio, the Toolbox palette provides access to the different GUI controls available in the design tab.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets1p3.html" title="Adding Controls Using the Toolbox" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p3.html</a></p><p>Search Terms: visual studio interface design, visual studio toolbox</p>')
# term54 = Term.create(termname:'properties', definition: '<p>In a class, each object is specified based on properties for that class. These are variables that define the characteristics of the objects. As an example, a circle class might include properties for radius, line color, fill color, and position. These characteristic properties would be specified for each circle object created. Class properties can be thought of as adjectives for the class. Class properties may also be referred to as class attributes or class variables.</p><p>Search Terms: class property, class attribute, class variable, object-oriented class</p>')
# term55 = Term.create(termname:'methods', definition: '<p>In a class, all objects of that class are able to use class methods. Methods are programs built directly into the class. They define how the class behaves. As an example, a circle class might have methods like make bigger, change color, or attach to another shape. These methods could be used on any circle object. Class methods can be thought of as verbs for the class. Class methods may also be referred to as class procedures or class sub-programs.</p><p>Search Terms: class method, class procedure, object-oriented class&nbsp;</p>')
# term56 = Term.create(termname:'multiplicity', definition: '<p>Multiplicity defines how many objects of one class can be linked to an object of another class when the two classes share a link. As an example, a course class might link many student classes but only one teacher class. Multiplicity is direction specific; so, a teacher may teach many courses and a course may have 1 teacher would each be specified. Multiplicity is generally identified as 0 meaning that no link is made in the direction, as 1 meaning only one object may be linked to another, or as many meaning any number of objects may be linked.</p><p>Search Terms: multiplicity, class diagram</p>')
# term57 = Term.create(termname:'public', definition: '<p>When defining a class or a variable in a program, you may identify it as Dim, Private, Public, or Global. Dim and Private both mean that only that specific class is able to access the information or method. Private is generally used for methods, and Dim is generally used for variable. Public means that other classes have access to the information or method.</p><p>Search Terms: variable specification, public private dim, public private</p>')
# term58 = Term.create(termname:'private', definition: '<p>When defining a class or a variable in a program, you may identify it as Dim, Private, Public, or Global. Dim and Private both mean that only that specific class is able to access the information or method. Private is generally used for methods, and Dim is generally used for variable. Public means that other classes have access to the information or method.</p><p>Search Terms: variable specification, public private dim, public private</p>')
# term59 = Term.create(termname:'pseudocode', definition: '<p>When learning to program, pseudocode is code written with correct logic but not with a specific programming language syntax. Instead of using formal syntax, the steps are described in common language that describes what happens when. You will utilize pseudo-code to practice thinking about what a program needs to do and writing algorithms without having to worry about code syntax. Pseudo-code translates directly to coding in any programming language.</p><p>Search Terms: pseudocode, program flow chart, input-process-output model</p>')
# term60 = Term.create(termname:'syntax', definition: '<p>Syntax is the rules for a programming language. Syntax identifies the possible code commands and describes how those commands must ordered and punctuated in order for the computer to parse and understand the commands. Different programming languages utilize different syntax rules; so, the same logical algorithm will appear differently in different languages.</p><p>Search Terms: programming language syntax, coding syntax, programming syntax and semantics</p>')
# term61 = Term.create(termname:'data management', definition: '<p>Data management is the primary purpose of most information systems. This includes collecting, manipulating, storing, and accessing data. Data management integrates databases, programming, human-computer interaction, and data security. Programming for data management generally focuses on the manipulation of data and on user interfaces for collecting and accessing data.</p><p>Search Terms: information systems, data management, information management</p>')
# term62 = Term.create(termname:'locally stored variable', definition: '<p>A locally stored variable is information that is stored in system memory during program operation. The variable is only accessible by the program and is generally deleted when the program is closed. Locally stored variables are utilized to store interim information that is needed for program processing but does not need to be saved or accessed from another system. As an example, loops in programs often include a counter that keeps track of how many loops have occurred. This counter is a locally stored variable.</p><p>Search Terms: local variable, call stack</p>')
# term63 = Term.create(termname:'local database', definition: '<p>A database is a system that organizes and systematically stores data. Local databases accessed by a single system are commonly utilized to maintain system and program information. As an example, a local database might index music files or store contacts. Local databases are often embedded in a program where only that program accesses the database rather than the database being more generally accessible.</p><p>Search Terms: local data access, embedded database</p>')
# term64 = Term.create(termname:'remote database', definition: '<p>Remote databases provide central access to many users. These are the cornerstone of information systems storing mass quantities of data. Programs are utilized to access and modify data in the database.</p><p>Search Terms: database management system, remote database, information system database</p>')
# term65 = Term.create(termname:'session file', definition: '<p>A session file manages a specific instance when a user accesses a program or system. The session file temporarily maintains information about the user and what the user has done. This data is utilized to tailor the user experience. Session files are commonly employed for remote web access; however, the principle of a session file may be utilized in a broader context.</p><p>Search Terms: session management, session variable, client-server session</p>')
# term66 = Term.create(termname:'window', definition: '<p>A window is the basic display element for most user interfaces. The window contains the other controls for the graphical user interface. A typical window generally includes a title bar, a menu bar, and a status bar in addition to the main window content.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/dd30h2yb%28v=vs.110%29.aspx" title="Windows Forms" target="_blank">http://msdn.microsoft.com/en-us/library/dd30h2yb%28v=vs.110%29.aspx</a> , <a href="http://www.homeandlearn.co.uk/NET/nets1p2.html" title="Visual Basic dotNet Forms" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p2.html</a></p><p>Search Terms: windows form, WIMP, GUI window</p>')
# term67 = Term.create(termname:'menus', definition: '<p>A menu is a graphical user interface element that allows selection by the user from a list of items. Menus are situated in the menu bar of a window and are utilized to navigate within a program or system to access content and functions.</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms647553%28v=vs.85%29.aspx" title="About Menus" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/ms647553%28v=vs.85%29.aspx</a> , <a href="http://www.homeandlearn.co.uk/NET/nets4p1.html" title="Adding Menus to a Visual Basic dotNet Form" target="_blank">http://www.homeandlearn.co.uk/NET/nets4p1.html</a></p><p>Search Terms: windows menu, menu bar</p>')
# term68 = Term.create(termname:'dialog', definition: '<p>A dialog is a process that opens a modal window to support a specific user interaction. The modal window for a dialog differs from other pop-up windows because interactions in the main program window are not allowed until the dialog is complete. Focus stays on the modal window. Common dialogs include open file, save file, message box, and print.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/aa969773%28v=vs.110%29.aspx" title="Dialog Boxes Overview" target="_blank">http://msdn.microsoft.com/en-us/library/aa969773%28v=vs.110%29.aspx</a></p><p>Search Terms: dialog window, dialog form, modal window, modal dialog&nbsp;</p>')
# term69 = Term.create(termname:'pop-up', definition: '<p>A pop-up is a separate window generated by a program to display additional information or content. &nbsp;</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/ms749018%28v=vs.110%29.aspx" title="Pop-up Overview" target="_blank">http://msdn.microsoft.com/en-us/library/ms749018%28v=vs.110%29.aspx</a></p><p>Search Terms: popup window</p>')
# term70 = Term.create(termname:'container', definition: '<p>In a graphical user interface, a container is an element that hosts other controls. The primary container is the window; however, it is possible to create additional containers within the window to link a set of controls together. Particularly in web applications, such a container is commonly referred to as a frame. Containers are generally referred to more specifically by what they contain like a tools palette or a task bar.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.container_properties%28v=vs.110%29.aspx" title="Container Properties" target="_blank">http://msdn.microsoft.com/en-us/library/system.componentmodel.container_properties%28v=vs.110%29.aspx</a></p><p>Search Terms: GUI container</p>')
# term71 = Term.create(termname:'palette', definition: '<p>A palette is a GUI element that provides choices or options to the user. The user chooses what palettes are useful to have visible and chooses where to place the palette. The palette may be pinned to a specific location in the program window or may float as a separate window. The palette takes its name from a color palette, but many other choices and options can be accessed from a palette as well. Palettes ensure the desired set of controls are easily accessible.</p><p>Search Terms: GUI palette, palette window</p>')
# term72 = Term.create(termname:'title bar', definition: '<p>The title bar displays at the top of a window. It displays an icon and line of text to identify the window. It also contains buttons to close, minimize, or maximize the window. The title bar also enables selecting and moving the window. Depending on context, other buttons or menus may also be included in the title bar.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd373662%28v=vs.85%29.aspx" title="Title Bar" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/dd373662%28v=vs.85%29.aspx</a></p><p>Search Terms: window title bar</p>')
# term73 = Term.create(termname:'menu bar', definition: '<p>The menu bar is a menu based GUI element just below the title bar in the window. The various menus provide access to the various components and options in the program. Often, the menu bar opens a series of toolbars with further options.&nbsp;</p><p>Links: <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd373589%28v=vs.85%29.aspx" title="Menu Bar" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/dd373589%28v=vs.85%29.aspx</a> , <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb760435%28v=vs.85%29.aspx" title="Toolbar" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/bb760435%28v=vs.85%29.aspx</a></p><p>Search Terms: menu bar, toolbars</p>')
# term74 = Term.create(termname:'label', definition: '<p>A label is a GUI element that provides information about other elements. The label does not support user interactions.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.label%28v=vs.110%29.aspx" title="Label Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.label%28v=vs.110%29.aspx</a></p><p>Search Terms: GUI label, label class</p>')
# term75 = Term.create(termname:'combo box', definition: '<p>A combo box is a GUI control that integrates a drop-down list with an editable textbox. A user can either choose an option from the list or type information in directly.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p22.html" title="Add a Combo Box to a VB dotNet Form" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p22.html</a> , <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.combobox%28v=vs.110%29.aspx" title="Combo Box Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.combobox%28v=vs.110%29.aspx</a></p><p>Search Terms: combo box</p>')
# term76 = Term.create(termname:'button', definition: '<p>A button is a GUI control that responds to a mouse click or tap event to initiate a specific action.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p11.html" title="Adding a Button to a Form" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p11.html</a> , <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.button%28v=vs.110%29.aspx" title="Button Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.button%28v=vs.110%29.aspx</a></p><p>Search Terms: GUI button, button tool</p>')
# term77 = Term.create(termname:'numeric updown', definition: '<p>A numeric updown is a GUI control that allows users to view and choose a number. The user may enter a number directly or may use arrow buttons on the control to raise and lower the value.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.numericupdown%28v=vs.110%29.aspx" title="NumericUpDown Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.forms.numericupdown%28v=vs.110%29.aspx</a></p><p>Search Terms: numeric updown control , spinner</p>')
# term78 = Term.create(termname:'textbox', definition: '<p>A textbox is a GUI control that allows entry and display of text. It can be configured to allow one or multiple lines and can be edited directly. The textbook is commonly utilized for user information entry.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p14.html" title="Assigning TextBox Text to your Variables" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p14.html</a> , <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.textbox%28v=vs.110%29.aspx" title="TextBox Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.textbox%28v=vs.110%29.aspx</a></p><p>Search Terms: textbox</p>')
# term79 = Term.create(termname:'slider', definition: '<p>A slider or track bar is a GUI control that allows a user to slide a control to select a value. The slider is typically utilized for volume, brightness, and other similar controls.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.slider%28v=vs.110%29.aspx" title="Slider Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.slider%28v=vs.110%29.aspx</a></p><p>Search Terms: slider, track bar</p>')
# term80 = Term.create(termname:'scrollbar', definition: '<p>A scrollbar is a GUI control that facilitates movement to another section of a display window. A horizontal scrollbar moves left-right in the window or box. A vertical scrollbar moves up-down in the window or box. The scrollbars typically appear at the bottom and right. Many control classes like those for textboxes, windows, or lists can been enabled with a scrollbar directly by linking the scrollbar class in properties.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.scrollbar%28v=vs.110%29.aspx" title="ScrollBar Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.scrollbar%28v=vs.110%29.aspx</a></p><p>Search Terms: scrollbar</p>')
# term81 = Term.create(termname:'icon', definition: '<p>In a graphical user interface, an icon is a picture or symbol that represents an object or option. In general, an icon acts as a selection button.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/system.drawing.icon.aspx" title="Icon Class" target="_blank">http://msdn.microsoft.com/en-us/library/system.drawing.icon.aspx</a></p><p>Search Terms: GUI icon</p>')
# term82 = Term.create(termname:'publish', definition: '<p>Publishing a program is the process of creating an executable file for a user to install and run a program. This packages all code as well as supporting libraries and frameworks together in a single file. When publishing, you should specify the author as well as version information. Versioning is particularly important because it allows you to know exactly what version of a program the user has. Anytime a program is revised and republished, it should be identified with a new version number.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/748fh114.aspx" title="Publishing ClickOnce Applications" target="_blank">http://msdn.microsoft.com/en-us/library/748fh114.aspx</a></p><p>Search Terms: publish program, version control&nbsp;</p>')
# term83 = Term.create(termname:'libraries', definition: '<p>Libraries are collections of pre-existing classes and code accessible for programmers to utilize. Libraries facilitate code reuse by independent programs. An IDE typically includes common libraries, but it is often necessary for developers to find and integrate other libraries as well.&nbsp;</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/d11h6832%28v=vs.71%29.aspx" title="Class Library" target="_blank">http://msdn.microsoft.com/en-us/library/d11h6832%28v=vs.71%29.aspx</a></p><p>Search Terms: code library, class library</p>')
# term84 = Term.create(termname:'write', definition: '<p>A write statement in a program adds information to a file or database.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets8p4.html" title="How to Write to a Text File in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets8p4.html</a></p><p>Search Terms: write statement, SQL insert</p>')
# term85 = Term.create(termname:'read', definition: '<p>A read statement in a program finds information in a file or database.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets8p3.html" title="Reading a Text File Line by Line" target="_blank">http://www.homeandlearn.co.uk/NET/nets8p3.html</a></p><p>Search Terms: read statement, SQL select</p>')
# term86 = Term.create(termname:'decision-based logic', definition: '<p>Decision-based logic is the general term utilized to describe algorithms that perform different actions under different circumstances. It is sometimes called conditional logic because what happens depends upon the conditions.</p><p>Search Terms: decision-based logic, conditional logic</p>')
# term87 = Term.create(termname:'conditional', definition: '<p>A conditional is utilized in decision-based logic to control an if-then statement. If the condition is true, then the accompanying code is processed. The conditional is either true or false. Common conditional operators are equal to, not equal to, less than, and greater than. Multiple conditions can be placed on an if-then statement utilizing Boolean logical operators like AND and OR to identify which conditions must be true.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets1p23.html" title="Conditional Operators" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p23.html</a></p><p><a href="http://www.homeandlearn.co.uk/NET/nets1p23.html" title="Conditional Operators" target="_blank">Search Terms: conditional logic, decision-based logic, conditional operators, conditional statements</a></p>')
# term88 = Term.create(termname:'cases', definition: '<p>Cases are utilized in decision-based logic when there are multiple different situations. For example, a program for taxes might behave differently depending on what state is selected. Each state would be identified as a separate case. When cases are utilized, the program must specify what happens in each case.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p21.html" title="Select Case Statements" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p21.html</a> , <a href="http://msdn.microsoft.com/en-us/library/cy37t14y.aspx" title="Select... Case Statements in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/cy37t14y.aspx</a></p><p>Search Terms: case statement, select statement</p>')
# term89 = Term.create(termname:'if-then', definition: '<p>If-then statements are utilized in decision-based logic to specify what happens if a condition is or is not met. The general structure is if-condition-then-true-else-false where true indicates all of the code for what happens if the condition is true and false indicates all of the code for what happens if the condition is false. If-then statements are essential for controlling programs.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets1p20.html" title="Conditional Logic - If Statements" target="_blank">http://www.homeandlearn.co.uk/NET/nets1p20.html</a> , <a href="http://msdn.microsoft.com/en-us/library/752y8abs.aspx" title="If... Then... Else Statement in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/752y8abs.aspx</a></p><p>Search Terms: if-then statement, if-then-else statement, decision-based logic, conditional logic</p>')
# term90 = Term.create(termname:'loop', definition: '<p>Loops are programming structures that allow a section of code to be repeated. Loops may iterate (keep going) while a certain condition is true or for a certain number of cycles. These are called While and For loops. Loops facilitate repetitive actions in the program.</p><p>Links: <a href="http://www.homeandlearn.co.uk/NET/nets3p1.html" title="An Introduction to Loops" target="_blank">http://www.homeandlearn.co.uk/NET/nets3p1.html</a>, <a href="http://msdn.microsoft.com/en-us/library/ezk76t25.aspx" title="Loop Structures in Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/ezk76t25.aspx</a></p><p>Search Terms: programming loops, for loop, while loop</p>')
# term91 = Term.create(termname:'test', definition: '<p>Testing programs is essential. Functional issues and complex algorithmic errors can only be identified by running the program and testing its behavior. Testing requires generating test cases and checking to see if the expected results are given. As programs become more complex so do test cases leading to multiple methodological approaches to testing. It is necessary to test at many levels ranging from individual methods up to the full system. At a broad scale, software testing is its own, complex discipline. From a simple perspective, a programmer needs to check if code is working as expected and so runs the program in debug with supporting IDE tools to check what is happening for different test cases.</p><p>Link: <a href="http://www.homeandlearn.co.uk/NET/nets5p5.html" title="Logic Errors in VB dotNet" target="_blank">http://www.homeandlearn.co.uk/NET/nets5p5.html</a></p><p>Search Terms: software testing, debug, test cases</p>')
# term92 = Term.create(termname:'list', definition: '<p>A list or collection is a complex data type that stores a collection of items. Each item can be any object or data type. Each item in the list is identified by its ordered location or index in the list. Lists and one-dimensional arrays are often utilized interchangeably, but unless array features like matrix mathematics are needed, lists are the better choice because they can be re-sized more easily than arrays.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/ybcx56wz.aspx" title="Collections in C sharp and Visual Basic" target="_blank">http://msdn.microsoft.com/en-us/library/ybcx56wz.aspx</a></p><p>Search Terms: list data type, collection data type, container data type</p>')
# term93 = Term.create(termname:'local file', definition: '<p>A local file is a file stored directly on a local system. It is accessible to the system in general but is generally only accessed by one or a few programs. The most familiar local files are those associated with office software. Local files store specific information that can be accessed and utilized by a program. This information may be state data or other program resources along with more familiar user files.</p><p>Link: <a href="http://msdn.microsoft.com/en-us/library/aa903295%28v=vs.71%29.aspx" title="File Access Types and Functions" target="_blank">http://msdn.microsoft.com/en-us/library/aa903295%28v=vs.71%29.aspx</a></p><p>Search Terms: local file system, application file access, sequential/random/binary access</p>')
# entry204=Termlist.create(course_id:'7', term_id: '204')
# entry205=Termlist.create(course_id:'7', term_id: '205')
# entry206=Termlist.create(course_id:'7', term_id: '206')
# entry207=Termlist.create(course_id:'7', term_id: '207')
# entry208=Termlist.create(course_id:'7', term_id: '208')
# entry209=Termlist.create(course_id:'7', term_id: '209')
# entry210=Termlist.create(course_id:'7', term_id: '210')
# entry211=Termlist.create(course_id:'7', term_id: '211')
# entry212=Termlist.create(course_id:'7', term_id: '212')
# entry213=Termlist.create(course_id:'7', term_id: '213')
# entry214=Termlist.create(course_id:'7', term_id: '214')
# entry215=Termlist.create(course_id:'7', term_id: '215')
# entry216=Termlist.create(course_id:'7', term_id: '216')
# entry217=Termlist.create(course_id:'7', term_id: '217')
# entry218=Termlist.create(course_id:'7', term_id: '218')
# entry219=Termlist.create(course_id:'7', term_id: '219')
# entry220=Termlist.create(course_id:'7', term_id: '220')
# entry221=Termlist.create(course_id:'7', term_id: '221')
# entry222=Termlist.create(course_id:'7', term_id: '222')
# entry223=Termlist.create(course_id:'7', term_id: '223')
# entry224=Termlist.create(course_id:'7', term_id: '224')
# entry225=Termlist.create(course_id:'7', term_id: '225')
# entry226=Termlist.create(course_id:'7', term_id: '226')
# entry227=Termlist.create(course_id:'7', term_id: '227')
# entry228=Termlist.create(course_id:'7', term_id: '228')
# entry229=Termlist.create(course_id:'7', term_id: '229')
# entry230=Termlist.create(course_id:'7', term_id: '230')
# entry231=Termlist.create(course_id:'7', term_id: '231')
# entry232=Termlist.create(course_id:'7', term_id: '232')
# entry233=Termlist.create(course_id:'7', term_id: '233')
# entry234=Termlist.create(course_id:'7', term_id: '234')
# entry235=Termlist.create(course_id:'7', term_id: '235')
# entry236=Termlist.create(course_id:'7', term_id: '236')
# entry237=Termlist.create(course_id:'7', term_id: '237')
# entry238=Termlist.create(course_id:'7', term_id: '238')
# entry239=Termlist.create(course_id:'7', term_id: '239')
# entry240=Termlist.create(course_id:'7', term_id: '240')
# entry241=Termlist.create(course_id:'7', term_id: '241')
# entry242=Termlist.create(course_id:'7', term_id: '242')
# entry243=Termlist.create(course_id:'7', term_id: '243')
# entry244=Termlist.create(course_id:'7', term_id: '244')
# entry245=Termlist.create(course_id:'7', term_id: '245')
# entry246=Termlist.create(course_id:'7', term_id: '246')
# entry247=Termlist.create(course_id:'7', term_id: '247')
# entry248=Termlist.create(course_id:'7', term_id: '248')
# entry249=Termlist.create(course_id:'7', term_id: '249')
# entry250=Termlist.create(course_id:'7', term_id: '250')
# entry251=Termlist.create(course_id:'7', term_id: '251')
# entry252=Termlist.create(course_id:'7', term_id: '252')
# entry253=Termlist.create(course_id:'7', term_id: '253')
# entry254=Termlist.create(course_id:'7', term_id: '254')
# entry255=Termlist.create(course_id:'7', term_id: '255')
# entry256=Termlist.create(course_id:'7', term_id: '256')
# entry257=Termlist.create(course_id:'7', term_id: '257')
# entry258=Termlist.create(course_id:'7', term_id: '258')
# entry259=Termlist.create(course_id:'7', term_id: '259')
# entry260=Termlist.create(course_id:'7', term_id: '260')
# entry261=Termlist.create(course_id:'7', term_id: '261')
# entry262=Termlist.create(course_id:'7', term_id: '262')
# entry263=Termlist.create(course_id:'7', term_id: '263')
# entry264=Termlist.create(course_id:'7', term_id: '264')
# entry265=Termlist.create(course_id:'7', term_id: '265')
# entry266=Termlist.create(course_id:'7', term_id: '266')
# entry267=Termlist.create(course_id:'7', term_id: '267')
# entry268=Termlist.create(course_id:'7', term_id: '268')
# entry269=Termlist.create(course_id:'7', term_id: '269')
# entry270=Termlist.create(course_id:'7', term_id: '270')
# entry271=Termlist.create(course_id:'7', term_id: '271')
# entry272=Termlist.create(course_id:'7', term_id: '272')
# entry273=Termlist.create(course_id:'7', term_id: '273')
# entry274=Termlist.create(course_id:'7', term_id: '274')
# entry275=Termlist.create(course_id:'7', term_id: '275')
# entry276=Termlist.create(course_id:'7', term_id: '276')
# entry277=Termlist.create(course_id:'7', term_id: '277')
# entry278=Termlist.create(course_id:'7', term_id: '278')
# entry279=Termlist.create(course_id:'7', term_id: '279')
# entry280=Termlist.create(course_id:'7', term_id: '280')
# entry281=Termlist.create(course_id:'7', term_id: '281')
# entry282=Termlist.create(course_id:'7', term_id: '282')
# entry283=Termlist.create(course_id:'7', term_id: '283')
# entry284=Termlist.create(course_id:'7', term_id: '284')
# entry285=Termlist.create(course_id:'7', term_id: '285')
# entry286=Termlist.create(course_id:'7', term_id: '286')
# entry287=Termlist.create(course_id:'7', term_id: '287')
# entry288=Termlist.create(course_id:'7', term_id: '288')
# entry289=Termlist.create(course_id:'7', term_id: '289')
# entry290=Termlist.create(course_id:'7', term_id: '290')
# entry291=Termlist.create(course_id:'7', term_id: '291')
# entry292=Termlist.create(course_id:'7', term_id: '292')
# entry293=Termlist.create(course_id:'7', term_id: '293')
# entry294=Termlist.create(course_id:'7', term_id: '294')
# entry295=Termlist.create(course_id:'7', term_id: '295')
# entry296=Termlist.create(course_id:'7', term_id: '296')

# term100 = Term.create(termname:'types of networks', definition:'<p>Computing networks, whether small local area networks or the broad mesh of the internet, connect computers and other devices together. They are the foundation of modern communications. Networks of computers may be characterized by their size and geographic scope, connection topology, media employed, types of devices connected, or purpose.</p><p>Search Terms: local area network (LAN) wide area network (WAN) network topology, physical media</p>')
# term101 = Term.create(termname:'Internet', definition:'<p>The Internet is a global infrastructure connecting networks throughout the world to provide real time communications between computing devices, and through them individuals, throughout the world. The Internet forms the framework for modern communications supporting not just the world wide web (www) but also e-mail, telephony, file sharing, and media streaming.</p><p>Search Terms: Internet</p>')
# term102 = Term.create(termname:'activity diagram', definition:'<p>An activity diagram shows the flow of a user&#39;s interaction with a system. Actions taken by the user are shown in one column, and actions undertaken by the system are shown in a second column. Arrows indicate how actions flow from one step to the next.</p><p>Search Items: activity diagram, UML activity diagram</p><p></p>')
# term103 = Term.create(termname:'actor', definition:'<p>In a use case scenario, actors are people interacting with an information system as part of that scenario. In a use case description, each step in the flow chart includes the actors involved and what they do.</p><p>Search Term: use case description, use case actor, UML actor</p>')
# term104 = Term.create(termname:'add-on', definition:'<p>Plug-ins and add-ons are both extensions that extend the functionality of a piece of software. In a web browser, they typically enable additional scripts or applications. Plug-ins are typically a separate program which interacts heavily with a given application. Add-ons are typically applications specific modifying or extending that application&#39;s code. Both server to add functionality.</p><p>Search Terms: add-on, plug-in, software extension</p>')
# term105 = Term.create(termname:'address pool', definition:'<p>The address pool is the set of IP addresses available to be allocated to devices. When configuring networks, it is important to insure that all IP addresses on the network are unique. If both static and dynamic address are utilized, they must be assigned from separate address pools. On the Internet, the Internet Assigned Numbers Authority (IANA) controls what addresses are available.</p><p>Search Terms: address pool, Internet Assigned Numbers Authority (IANA)</p>')
# term106 = Term.create(termname:'availability', definition:'<p>Availability measures the percentage of time that a network is accessible to users.</p><p>Search Terms: network availability</p>')
# term107 = Term.create(termname:'bandwidth', definition:'<p>Bandwidth is the amount of data that can be transmitted per second. It is measured in bits per second and may also be called maximum throughput.</p><p>Search Terms: network bandwidth, bit-rate</p>')
# term108 = Term.create(termname:'binary', definition:'<p>Bandwidth is the amount of data that can be transmitted per second. It is measured in bits per second and may also be called maximum throughput.</p><p>Search Terms: network bandwidth, bit-rate</p>')
# term109 = Term.create(termname:'bits', definition:'<p>Computers store and process information in binary, using only 0&#39;s and 1&#39;s. Each 0 or 1 is called a bit, short for binary digit. The bit is the smallest unit for computer memory and logic. It is shown as a lower case b. In logic, it is often interpreted as False (zero) or True (one).</p><p>Search Terms: bit, binary logic, digital logic, digital memory</p>')
# term110 = Term.create(termname:'broadband', definition:'<p>Broadband refers to any communication medium supporting multiple signals simultaneously. It is commonly utilized to identify coaxial cable based Internet access although fiber, DSL, twisted pair, and wireless are all technically broadband as well. Cable Internet is a common "last mile" technology connecting individual users to service providers.</p><p>Search Terms: broadband, cable Internet</p>')
# termXXX = Term.create(termname:'bytes', definition:'<p>A byte is eight bits and is commonly used as measure for computer memory and processing. A byte has a value between 0 (00000000) and 255 (11111111). It is shown as an upper case B in units like kB (kilobytes) or GB (gigbaytes).</p><p>Search Terms: byte, octet</p>')
# term111 = Term.create(termname:'cache poisoning', definition:'<p>Cache stores a temporary copy of recently accessed information so it can be accessed again quickly. User devices as well as routers and servers maintain cache for resources like web pages, DNS maps, or database queries. Cache poisoning inserts false information into the cache replacing a cached resource. This false information often makes the system vulnerable to other attacks.</p><p>Search Terms: cache poisoning, browser cache, search engine cache, DNS cache</p>')
# term112 = Term.create(termname:'checksum', definition:'<p>Checksum is utilized to detect data corruption errors. Check digits or text hashes are common for information like account identifiers. Checksum is also utilized to check protocol headers to insure correct information. If data is corrupted or entered incorrectly, the checksum result will not match its identified value. This flags that there is a problem with the data. &nbsp;</p><p>Search Terms: checksum, hash sum, check digit, parity bit</p>')
# term113 = Term.create(termname:'client-side', definition:'<p>Web interactions involve a client web browser and a host server. Information may be stored and scripts may be run either on the client computer or on the server. Local processing is called client-side.</p><p>Search Items: client-side, web scripting, session management</p>')
# term114 = Term.create(termname:'cloud application', definition:'<p>Cloud applications run on an Internet server which can be accessed from any Internet connected device. This is contrasted with local, native applications running on a specific device. The server provides the cloud application extensive processing power and memory resources. The connecting device only needs access not extensive system resources.</p><p>Search Terms: cloud computing, cloud applications, cloud services</p>')
# term115 = Term.create(termname:'command-line interface', definition:'<p>The command-line interface sends commands directly to the operating systems rather than mediating requests through other applications and graphical user interfaces. It is entirely text based.</p><p>Search Terms: command-line interface, command prompt&nbsp;</p>')
# term116 = Term.create(termname:'content development', definition:'<p>Content development network applications allow multiple users to work collaboratively on a shared task. These include project management, communications, and/or file sharing capabilities.</p><p>Search Terms: collaborative software, collaboration platforms&nbsp;</p>')
# term117 = Term.create(termname:'content sharing', definition:'<p>Content sharing networks enable users to share files and media they have developed through common Internet protocols. This provides a central access point for content.</p><p>Search Terms: content sharing, media sharing, video sharing, file sharing&nbsp;</p>')
# term118 = Term.create(termname:'data packets', definition:'<p>All computer networks, including the Internet, transfer data through a process called packet switching. Information is divided up into small, discrete pieces called packets. Each packet includes not only the data but also header information to support routing the data to the correct location, integrating the pieces of data, and other logistical functions. Packets are sent independently and then reassembled by the receiving device.</p><p>Search Terms: network packet, data packet, packet switching</p>')
# term119 = Term.create(termname:'datagram', definition:'<p>A datagram is a segment of data sent through a packet-based network. The datagram includes all information needed to route the data. It is connectionless meaning that it travels independently of all other communications and does not require a predetermined path.</p><p>Search Terms: datagram, RFC 1594, connectionless communication</p>')
# term120 = Term.create(termname:'denial of service', definition:'<p>Denial of service (DoS) attacks overwhelm a system&#39;s resources through repeated communication requests so that the system crashes, is unable to devote necessary resources to legitimate access, or has to be disconnected from the Internet.</p><p>Search Terms: denial of service, DOS attack, DDOS attack&nbsp;</p>')
# term100X = Term.create(termname:'domain name system', definition:'<p>The domain name system (DNS) translates between domain names and the IP address for the server hosting the domain. Users enter a uniform resource locator (URL) specific to the desired information or location. DNS maps this to the IP address and adds the appropriate address information to the IP header.</p><p>Search Terms: DNS, domain name system, uniform resource locator (URL) RFC 1034, RFC 1035, RFC 3986&nbsp;</p>')
# term121 = Term.create(termname:'download speed', definition:'<p>Download speed is the rate at which a device receive data from a network. It is measured in bits per second.</p><p>Search Terms: download speed, network test&nbsp;</p>')
# term122 = Term.create(termname:'DSL', definition:'<p>Digital subscriber lines (DSL) allow Internet communications to be sent over telephone lines. Internet and telephone communications may be transmitted simultaneously by utilizing different frequencies. DSL is a common "last mile" technology connecting individual users to service providers.</p><p>Search Terms: digital subscriber line, DSL, ADSL</p>')
# term123 = Term.create(termname:'dynamic address', definition:'<p>In local area networks, unique addresses are required for each device on the network. In dynamic addressing, a central server or router runs DHCP (dynamic host control protocol) to assign addresses to each device. A device connecting to the network requests an address, and an unused address is assigned from an address pool. Dynamic address assignment ensures unique network addresses without administrative overhead to track addresses.</p><p>Search Terms: DHCP, dynamic versus static IP, RFC 2131</p>')
# term124 = Term.create(termname:'dynamic host configuration protocol', definition:'<p>Dynamic host configuration protocol (DHCP) allocates IP addresses to devices on a network. DHCP manages a pool of addresses which it can assign to a requesting device or release from an inactive device. DHCP is described in RFC 2131 (request for comments). There is also a DHCP equivalent for IPv6 defined by RFC 3315, 3633, and 3736.</p><p>Search Terms: DHCP, dynamic host configuration protocol, dynamic IP address, RFC 2131</p>')
# term125 = Term.create(termname:'e-mail', definition:'<p>Electronic mail (e-mail) is an Internet service supporting exchange of digital messages, e-mails. Messages are sent to and stored on a server. The receiver sends a request for forward to the server when ready to download messages. The most common send protocol is SMTP (simple mail transfer protocol) and the most common receive protocols are POP3 (post office protocol) and IMAP (internet message access protocol).</p><p>Search terms: e-mail, SMTP, POP3, IMAP&nbsp;</p>')
# term126 = Term.create(termname:'encryption', definition:'<p>Encryption encodes information using a cipher key so that only parties with the appropriate deciphering key are able to decode the information. This protects the data if it is intercepted by an unauthorized party. Encryption may be implemented independently or embedded in communications protocols like TLS (transport layer security) or SSL (secure sockets layer).</p><p>Search Terms: encryption, cryptography, TLS, SSL, public key, RSA&nbsp;</p>')
# term127 = Term.create(termname:'exceptions', definition:'<p>In a use case scenario, exceptions are items that stop or redirect the process. They are if-then statements that read, "If [some exception condition is true], then [this alternative process takes place]."</p><p>Search Terms: use case description, use case exception, UML exception, exception conditions</p>')
# term128 = Term.create(termname:'fiber', definition:'<p>Fiber optic communications transmit data as pulses of light. Fiber optic cables are waveguides that direct the light from end to end. Fiber optics enable long distance, high bandwidth communications. Fiber optics are the primary means of backbone and service provider communications. Fiber optics are becoming more prevalent for local networks and access as well.</p><p>Search Terms: fiber optics, fiber optic communications&nbsp;</p>')
# term129 = Term.create(termname:'file transfer protocol', definition:'<p>File transfer protocol (ftp) supports the transfer of files between a client and a host server. Transfer may be protected through server authentication and by integrating in security protocols.</p><p>Search Terms: ftp, file transfer protocol</p>')
# term130 = Term.create(termname:'firewall', definition:'<p>A firewall mediates communications to protect a device or network from security risks. Typical protections include only allowing traffic from trusted sources, specifying allowed communications ports and protocols, or application based filters. Firewalls are common on as software on user devices and as part of networking hardware like routers.</p><p>Search Terms: firewall, packet filter, port filter, application layer filter&nbsp;</p>')
# term130a = Term.create(termname:'fragment', definition:'<p>When a datagram is sent over a packet-based network, it may reach sections of the network where it is too big to travel as a single data unit. If this occurs, it is fragmented into smaller pieces. Each piece is labeled so it can be reassembled into the original datagram.</p><p>Search Terms: IP fragmentation, maximum transfer unit (MTU)&nbsp;</p>')
# term141 = Term.create(termname:'ftp', definition:'<p>File transfer protocol (ftp) supports the transfer of files between a client and a host server. Transfer may be protected through server authentication and by integrating in security protocols.</p><p>Search Terms: ftp, file transfer protocol</p>')
# term142 = Term.create(termname:'hexadecimal', definition:'<p>Hexadecimal is base 16. The digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, and e are utilized. The place values are powers of sixteen like 1&#39;s, 16&#39;s, 256&#39;s, and so on. Each hexadecimal digit may be utilized to represent four binary digits. This makes hexadecimal useful for reporting binary information in a condensed format.</p><p>Search Terms: hexadecimal</p>')
# term143 = Term.create(termname:'hijacking', definition:'<p>Hijacking is a general term describing any attack where communications are taken over by an outside party. This includes IP hijacking where routing tables are changed to intercept data, DNS hijacking where the maps between domain names and addresses are changed, and session or cookie hijacking where session based communications are taken over.</p><p>Search Terms: man in the middle attack, IP hijacking, DNS hijacking, session hijacking</p>')
# term144 = Term.create(termname:'host server', definition:'<p>A host server is a computer that provides applications or services to others. Those using the application or service are called clients. Host servers are most familiar in the context of world wide web content. Information from the host server is displayed as a web page in the client browser. E-mail likewise relies on a host server. Host servers can also host files, like with cloud storage, or can operate an application, like with online games.</p><p>Search Terms: host server, server-client, network service&nbsp;</p>')
# term145 = Term.create(termname:'hyperlinks', definition:'<p>Hyperlinks are direct connections between web pages. They are configured in html and point towards the url for another web page. Hyperlinks connect together web pages to form the world wide web.</p><p>Search Terms: hyperlink, world wide web</p>')
# term146 = Term.create(termname:'hypertext markup language', definition:'<p>Hypertext markup language (html) is utilized to create web pages. Content is configured through style sheets and tags. Scripts can be embedded to support additional functionality and applications. Html forms the basis for all web pages.</p><p>Search Terms: html, html5, web page&nbsp;</p>')
# term147 = Term.create(termname:'internet backbone', definition:'<p>The Internet backbone is the core set of routers that serve as a central hub for Internet traffic. It consists of numerous Tier 1 networks which have agreed to share traffic. Individuals and businesses connect to Internet service providers, and Internet service providers (ISP) connect into the backbone through access points. This allows the Internet to span the world.</p><p>Search Terms: Internet backbone, Tier 1 provider, Internet exchange point, network access point</p>')
# term148 = Term.create(termname:'internet gateway', definition:'<p>LANs generally share a single Internet access point. This central server or router is the Internet gateway. Using IPv4, all devices on the LAN will appear the same to the Internet through network address translation (NAT). The Internet gateway track which packets are associated with which network device to ensure the information is still routed properly.</p><p>Search Terms: Internet gateway, network address translation (NAT)</p>')
# term149 = Term.create(termname:'internet service provider', definition:'<p>Internet service providers (ISPs) provide a link between users and the broader Internet. They typically offer not just a connection but also additional services like e-mail and web hosting and domain registration. Often ISPs also own additional network infrastructure, but some operate only the Tier 3 user network.</p><p>Search Terms: ISP, internet service provider, "last mile"&nbsp;</p>')
# term140 = Term.create(termname:'IP address', definition:'<p>IP addresses are utilized to uniquely identify each device on a network. They are assigned either statically by the user or dynamically through DHCP (dynamic host configuration protocol) when a device is added to a network. This address enables the network to know where that device is and consistently route data to and from the device.</p><p>Search Terms: IP address, Internet Protocol</p>')
# term140a = Term.create(termname:'IPv4', definition:'<p>The IPv4 (Internet Protocol version 4) protocol described in RFC 791 (request for comments) defines addressing, routing, and delivery processes for network packets. IPv4 utilizes four byte (32 bit) addresses usually shown as four decimal values like 192.168.0.35. This allows 4.3 billion addresses which is not sufficient for every device on the Internet to have a unique address. This issue has been addressed through subnets and network address translation. IPv6 resolves the issue by providing enough addresses for all devices and including subnet and host information in the address.</p><p>Search Terms: IPv4, RFC 791, subnetworks</p>')
# term151 = Term.create(termname:'IPv6', definition:'<p>The IPv6 (Internet Protocol version 6) protocol described in RFC 2460 (request for comments) is the latest version of the Internet Protocol defining addressing, routing, and delivery methods for network packets. IPv6 utilizes sixteen byte (128 bit) addresses usually shown as eight hexadecimal values like 30c4:1922:ec82:aa13:f79a:6533:0000:0000:2877. There are over a 300 undecillion (3*1038) IPv6 addresses easily giving a unique address to every device that will ever be on the Internet. In addition to greater address space, IPv6 has a simplified header and improved routing and quality of service methodologies compared to IPv4. IPv4 and IPv6 will both be utilized on the Internet for the foreseeable future. </p><p>Search Terms: IPv6, RFC 2469, IPv4 versus IPv6&nbsp;</p>')
# term152 = Term.create(termname:'jitter', definition:'<p>Jitter or packet delay variation (PDV) measures the consistency in the time to communicate between sender and receiver. Jitter results in packets arriving out of order since some travel faster than others. This is particularly problematic for real-time communications.</p><p>Search Terms: jitter, packet delay variation, latency variation, RFC 3393, network test</p>')
# term153 = Term.create(termname:'latency', definition:'<p>Network latency is the time between when a packet is sent and when it is received. It is often measured roundtrip through utilities like ping.</p><p>Search Terms: network latency, ping, network test&nbsp;</p>')
# term154 = Term.create(termname:'local area network', definition:'<p>Local area networks (LANs) provide interconnectivity to devices in a limited area usually through Ethernet or Wi-Fi. LANs support offices, homes, schools, and other geographically compact institutions. A LAN is generally supported by a single, central server or router which serves as a gateway to the Internet for all devices on the LAN.</p><p>Search Terms: LAN, local area network, Ethernet, Wi-Fi</p>')
# term155 = Term.create(termname:'mean time to restore', definition:'<p>Mean time to restore is the average amount of time required to restore a network connection when it becomes inaccessible.</p><p>Search Terms: mean time to restore</p>')
# term156 = Term.create(termname:'NAT', definition:'<p>Network address translation (NAT) changes the IP address in the header of a packet in transit. This allows one address space to be mapped to another address space. The most common use is to translate an internal LAN address to an external Internet address as a packet passes through an Internet gateway.</p><p>Search Terms: NAT, network address translation, Internet gateway &nbsp;</p>')
# term157 = Term.create(termname:'net neutrality', definition:'<p>Net neutrality is a philosophical standard holding that all Internet data should be treated equally without preferential routing or differential charges. This principle is adhered to by many telecommunications through mutual agreement and is sometimes integrated into regulations and laws. However, this is not a technical necessity and so it often debated.</p><p>Search Terms: net neutrality, open internet&nbsp;</p>')
# term158 = Term.create(termname:'network address translation', definition:'<p>Network address translation (NAT) changes the IP address in the header of a packet in transit. This allows one address space to be mapped to another address space. The most common use is to translate an internal LAN address to an external Internet address as a packet passes through an Internet gateway.</p><p>Search Terms: NAT, network address translation, Internet gateway &nbsp;</p>')
# term159 = Term.create(termname:'network interface', definition:'<p>A network interface is the physical component connecting a device to a network. Most commonly this is either a wired Ethernet connection or a wireless connection.</p><p>Search Terms: network interface controller, network interface card, wireless network interface&nbsp;</p>')
# term150 = Term.create(termname:'packet loss', definition:'<p>In packet-based communications, some packets may be misdirected or terminated rather. These lost packets are never received. Packet loss describes what percentage of information is lost.</p><p>Search Terms: packet loss, digital communication errors, network test&nbsp;</p>')
# term150a = Term.create(termname:'packet sniffing', definition:'<p>A packet sniffer intercepts a packet of data sent over a network, logs information about the packet, and sends the packet on to its original destination. It is commonly utilized to monitor network activity but can also be utilized to surreptitiously intercept data.</p><p>Search Terms: packet analyzer, packet sniffer, network analyzer, protocol analyzer&nbsp;</p>')
# term161 = Term.create(termname:'packet-based', definition:'<p>Packet-based communication is utilized to send data on the Internet and other networks. Data is divided into small, consistently sized pieces called datagrams. Each datagram is labeled using IP (internet protocol) and other protocols. Then, each is sent independently, and the packets are reassembled by the receiver.</p><p>Search Terms: packet-based communication, packet switching, Internet Protocol&nbsp;</p>')
# term162 = Term.create(termname:'peer-to-peer', definition:'<p>Peer-to-peer Internet services allow individual devices to act as a data host for resources. A peer-to-peer connection gives a local device access to shared resource from all online peers and provides these peers access to hosted resources on the local device. This facilitates distributed storage, distributed computing, file sharing, and peer-to-peer applications.</p><p>Search Terms: peer-to-peer, P2P, distributed network, distributed computing, file sharing&nbsp;</p>')
# term163 = Term.create(termname:'ping', definition:'<p>Ping is a tool utilized to determine whether or not a device has a connection to another network location. It is commonly accessed through the command line. It attempts to make four connections and gives the connection time for each connection.</p><p>Search Terms: ping network utility&nbsp;</p>')
# term164 = Term.create(termname:'plug-in', definition:'<p>Plug-ins and add-ons are both extensions that extend the functionality of a piece of software. In a web browser, they typically enable additional scripts or applications. Plug-ins are typically a separate program which interacts heavily with a given application. Add-ons are typically applications specific modifying or extending that application&#39;s code. Both server to add functionality.</p><p>Search Terms: plug-in, add-on, software extension&nbsp;</p>')
# term165 = Term.create(termname:'professional networks', definition:'<p>Professional networks are social network focused on business interactions. These may enable professional connections, promote business, and/or facilitating business interactions.</p><p>Search Terms: professional network service&nbsp;</p>')
# term166 = Term.create(termname:'protocol stack', definition:'<p>Internet communications require numerous protocols working together. Both the OSI (Open Systems Interconnection) model and the TCP/IP model characterize this interaction as a stack of layers with protocols at each layer performing differing functions and working together.</p><p>Search Terms: Internet protocol suite, OSI model, TCP/IP model, protocol stack&nbsp;</p>')
# term167 = Term.create(termname:'satellite', definition:'<p>Satellite Internet connects through satellites in geostationary orbit using long distance radio waves. Although bandwidth and latency are both issues, satellite enables access from areas not serviced by wired or wireless networks. Satellite Internet is available through both dish based and mobile solutions.</p><p>Search Terms: satellite internet &nbsp;</p>')
# term168 = Term.create(termname:'scenario', definition:'<p>A scenario identifies a specific task carried out through interactions with an information system. Use cases describes the series of interactions that take place as part of the scenario.</p><p>Search Terms: use case description, use case scenario, UML scenario&nbsp;</p>')
# term169 = Term.create(termname:'server-side', definition:'<p>Web interactions involve a client web browser and a host server. Information may be stored and scripts may be run either on the client computer or on the server. Server processing is called server-side.</p><p>Search Items: server-side, web scripting, session management&nbsp;</p>')
# term160 = Term.create(termname:'service level agreement', definition:'<p>A service level agreement defines the contracted terms of service for Internet service. It defines the minimum service the ISP will deliver and describes remunerations if that service level is not met. Typical SLAs specify upload and download speed, availability, connection latency, mean time to restore, and other metrics that characterize the connection. An SLA is an important aspect of a contract for Internet access.</p><p>Search Terms: SLA, service level agreement, Internet service contract, ISP contract&nbsp;</p>')
# term160a = Term.create(termname:'session', definition:'<p>A session is an ongoing interaction between a client web browser and a host server. The session incorporates in user settings and tailors itself based on user interactions during the session. This insures a consistent and robust web experience.</p><p>Search Items: web session, session management&nbsp;</p>')
# term171 = Term.create(termname:'social media', definition:'<p>Social media Internet applications connect users in a network of user created information. Interactive platforms facilitate creation, modification, and sharing of extensive quantities of information.</p><p>Search Terms: social media, social network, virtual community, Web 2.0&nbsp;</p>')
# term172 = Term.create(termname:'source code', definition:'<p>Source code is the underlying html (hypertext markup language) that supports a web page. It can be accessed and viewed in the web browser. The html source codes the web page as well as calling other scripts.</p><p>Search Items: html source code, browser source code&nbsp;</p>')
# term173 = Term.create(termname:'spoofing', definition:'<p>Spoofing is a deception where a resource falsely identifies itself. Common examples include e-mail scams showing a false sender, providing falsified credentials for network access, or inserted web cookies that establish false session details.</p><p>Search Terms: spoofing</p>')
# term174 = Term.create(termname:'static address', definition:'<p>In local area networks, unique addresses are required for each device on the network. These addresses may be defined by an administrator for each device through static IPs. Static addressing ensures that each device keeps the same address over time and when moved around the network. In contrast to dynamic addressing, static addressing requires a network administrator to carefully track addresses.</p><p>Search Terms: dynamic versus static IP, how to assign IP address</p>')
# term175 = Term.create(termname:'subnet mask', definition:'<p>Subnetting divides a network into logical components. A subnet is controlled by a router. In order to facilitate routing, all devices on the subnet will have IP address numbers in common. This allows the router to easily differentiate internal traffic on the subnet from external traffic. The subnet mask identifies how much of the IPv4 address is the same on the subnet. If it lists 255.255.255.0, then each of the three octets will be the same for every device on the subnet. In IPv6, the subnet identifier is integrated into the address itself rather than configured as a separate subnet mask.</p><p>Search Terms: subnetwork, subnet mask&nbsp;</p>')
# term176 = Term.create(termname:'T1', definition:'<p>Dedicated, leased lines provide a direct network connection between two points. They may be used to link two LANs into a single network or to provide a guaranteed connection to an Internet service provider. T1 refers to dedicated, leased lines with a data rate of 1.544Mbps. Originally, this referred to a dedicated telephone cable connecting only those two locations. Now, it is often a dedicated bandwidth circuit along shared connections.</p><p>Search Terms: leased line, t-carrier, T1, T3</p>')
# term177 = Term.create(termname:'telnet', definition:'<p>Telnet is a protocol utilized to transmit commands directly to a server from a client terminal interface and receive responses from the server. Dating back to 1973, it is still utilized for configuring network devices.</p><p>Search Terms: telnet&nbsp;</p>')
# term178 = Term.create(termname:'Tier 1 providers', definition:'<p>Tier 1 providers operate substantial portions of the Internet backbone. They are able to pass data without relying on transit fees or peer agreements.</p><p>Search Terms: tier 1 provider, tier 1 network, transit-free network, peering, Internet backbone&nbsp;</p>')
# term179 = Term.create(termname:'trace route', definition:'<p>Trace route is a tool utilized for characterizing network routes. It is commonly accessed through the command-line and provides a list of the path the packed follows and the delays at each node.</p><p>Search Terms: traceroute&nbsp;</p>')
# term170 = Term.create(termname:'transport protocol', definition:'<p>Transport protocols are responsible for placing data into datagrams which are then sent using the IP protocol and for reassembling the data received. The most common transport protocols are TCP (transmission control protocol) which insures data is complete and in order and UDP (user datagram protocol) which simply reassembles data in the order received.</p><p>Search Terms: transport layer, TCP (transmission control protocol) UDP (user datagram protocol)</p>')
# term170a = Term.create(termname:'triggering event', definition:'<p>A triggering event is an action that initiates a process. For scenario use cases, the triggering event lists the first step that starts the specific scenario.</p><p>Search Terms: use case description, use case trigger, UML trigger, triggering event&nbsp;</p>')
# term181 = Term.create(termname:'upload speed', definition:'<p>Upload speed is the rate at which a device can transfer data onto a network. It is measured in bits per second.</p><p>Search Terms: upload speed, network test</p>')
# term182 = Term.create(termname:'use case', definition:'<p>Use cases describe a specific interaction scenario within a system. They focus on what the various actors as well the information system do to accomplish the specified task. Uses cases are commonly presented as a description listing the scenario summary, triggering event, actors, stakeholders, conditions, and flow of activities. Use cases may also be presented as a flow diagram. Typically, exceptions to the scenario are also included with either use case descriptions or use case diagrams.</p><p>Search Terms: use case description, use case diagram, information system design&nbsp;</p>')
# term183 = Term.create(termname:'user account', definition:'<p>User accounts restrict access to resources on a web host server. Logging in using user name and password establishes a session which enables access to the web resource and tailors the resource based on user preferences and actions.</p><p>Search Terms: session management, user accounts</p>')
# term184 = Term.create(termname:'virtual world', definition:'<p>Virtual worlds are simulated computer environments in which users interact using avatars in semi-realistic environments. Common virtual worlds include online games, social worlds, and collaborative work and education environments.</p><p>Search Terms: virtual world, massively multiplayer online, simulated computer environment</p>')
# term185 = Term.create(termname:'virus protection', definition:'<p>Antivirus software detects and removes computer viruses from a system. The software generally also detects and removes other malware such as Trojan horses, keyloggers, worms, or spyware. In addition, the software protects against malware entering the system by monitoring communications and files.</p><p>Search Terms: antivirus software, antimalware software, malware protection, virus protection&nbsp;</p>')
# term186 = Term.create(termname:'voice over IP', definition:'<p>Voice over internet protocol (VoIP) is an Internet service supporting voice and multimedia communications. A variety of real-time protocols are utilized by VoIP providers. Because communications are sent in packets rather than on an established circuit, correcting for latency, packet loss, and jitter is required to provide quality of service.</p><p>Search Terms: VoIP, voice over IP, Internet telephony</p>')
# term187 = Term.create(termname:'VoIP', definition:'<p>Voice over internet protocol (VoIP) is an Internet service supporting voice and multimedia communications. A variety of real-time protocols are utilized by VoIP providers. Because communications are sent in packets rather than on an established circuit, correcting for latency, packet loss, and jitter is required to provide quality of service.</p><p>Search Terms: VoIP, voice over IP, Internet telephony</p>')
# term188 = Term.create(termname:'wide area network', definition:'<p>Wide area networks (WANs) provide private interconnectivity between devices in a variety of locations. Using leased telecommunication lines or protocol based technologies like VPN (virtual private network) ATM (asynchronous transfer mode) frame relay, or PPP (point to point protocol). WANs bridge from one location to another allowing all devices to connect on a single network. WANs allow businesses or other institutions with multiple locations to interconnect together in a single network.</p><p>Search Terms: WAN, wide area network</p>')
# term189 = Term.create(termname:'wireless', definition:'<p>Wireless Internet provides wi-fi connections to an Internet service provider through a meshed network of hotspots operating on radio wave communications. Mobile telephone providers integrate this service with cellular phone service to provide mobile Internet access. It may also be used more generally as a "last mile" connection for Internet users that does not require wiring.</p><p>Search Terms: wi-fi internet, wireless internet, 3G/4G/5G</p>')
# term190 = Term.create(termname:'world wide web', definition:'<p>The world wide web (www) is an Internet service supporting interconnected hypertext linked documents, web pages, accessed by web browsers. Documents are created using html (hypertext markup language) and distributed using http (hypertext transfer protocol) to mediate client requests from web browsers and server responses from web site hosts.</p><p>Search Terms: world wide web, web page, web browser, html, http, hyperlink&nbsp;</p>')

# termlist100=Termlist.create(course_id:'8', term_id: '306')
# termlist101=Termlist.create(course_id:'8', term_id: '365')
# termlist102=Termlist.create(course_id:'8', term_id: '307')
# termlist103=Termlist.create(course_id:'8', term_id: '308')
# termlist104=Termlist.create(course_id:'8', term_id: '309')
# termlist105=Termlist.create(course_id:'8', term_id: '297')
# termlist106=Termlist.create(course_id:'8', term_id: '298')
# termlist107=Termlist.create(course_id:'8', term_id: '299')
# termlist108=Termlist.create(course_id:'8', term_id: '300')
# termlist109=Termlist.create(course_id:'8', term_id: '301')
# termlist110=Termlist.create(course_id:'8', term_id: '302')
# termlist111=Termlist.create(course_id:'8', term_id: '303')
# termlist112=Termlist.create(course_id:'8', term_id: '304')
# termlist113=Termlist.create(course_id:'8', term_id: '305')
# termlist114=Termlist.create(course_id:'8', term_id: '328')
# termlist115=Termlist.create(course_id:'8', term_id: '310')
# termlist116=Termlist.create(course_id:'8', term_id: '311')
# termlist117=Termlist.create(course_id:'8', term_id: '312')
# termlist118=Termlist.create(course_id:'8', term_id: '313')
# termlist119=Termlist.create(course_id:'8', term_id: '314')
# termlist120=Termlist.create(course_id:'8', term_id: '315')
# termlist121=Termlist.create(course_id:'8', term_id: '316')
# termlist122=Termlist.create(course_id:'8', term_id: '317')
# termlist123=Termlist.create(course_id:'8', term_id: '318')
# termlist124=Termlist.create(course_id:'8', term_id: '319')
# termlist125=Termlist.create(course_id:'8', term_id: '320')
# termlist126=Termlist.create(course_id:'8', term_id: '321')
# termlist127=Termlist.create(course_id:'8', term_id: '322')
# termlist128=Termlist.create(course_id:'8', term_id: '323')
# termlist129=Termlist.create(course_id:'8', term_id: '324')
# termlist130=Termlist.create(course_id:'8', term_id: '325')
# termlist131=Termlist.create(course_id:'8', term_id: '326')
# termlist132=Termlist.create(course_id:'8', term_id: '327')
# termlist133=Termlist.create(course_id:'8', term_id: '329')
# termlist134=Termlist.create(course_id:'8', term_id: '330')
# termlist135=Termlist.create(course_id:'8', term_id: '331')
# termlist136=Termlist.create(course_id:'8', term_id: '332')
# termlist137=Termlist.create(course_id:'8', term_id: '333')
# termlist138=Termlist.create(course_id:'8', term_id: '334')
# termlist139=Termlist.create(course_id:'8', term_id: '335')
# termlist140=Termlist.create(course_id:'8', term_id: '336')
# termlist141=Termlist.create(course_id:'8', term_id: '337')
# termlist142=Termlist.create(course_id:'8', term_id: '338')
# termlist143=Termlist.create(course_id:'8', term_id: '339')
# termlist144=Termlist.create(course_id:'8', term_id: '340')
# termlist145=Termlist.create(course_id:'8', term_id: '341')
# termlist146=Termlist.create(course_id:'8', term_id: '342')
# termlist147=Termlist.create(course_id:'8', term_id: '343')
# termlist148=Termlist.create(course_id:'8', term_id: '344')
# termlist149=Termlist.create(course_id:'8', term_id: '364')
# termlist150=Termlist.create(course_id:'8', term_id: '345')
# termlist151=Termlist.create(course_id:'8', term_id: '346')
# termlist152=Termlist.create(course_id:'8', term_id: '347')
# termlist153=Termlist.create(course_id:'8', term_id: '348')
# termlist154=Termlist.create(course_id:'8', term_id: '349')
# termlist155=Termlist.create(course_id:'8', term_id: '350')
# termlist156=Termlist.create(course_id:'8', term_id: '351')
# termlist157=Termlist.create(course_id:'8', term_id: '352')
# termlist158=Termlist.create(course_id:'8', term_id: '353')
# termlist159=Termlist.create(course_id:'8', term_id: '354')
# termlist160=Termlist.create(course_id:'8', term_id: '355')
# termlist161=Termlist.create(course_id:'8', term_id: '356')
# termlist162=Termlist.create(course_id:'8', term_id: '357')
# termlist163=Termlist.create(course_id:'8', term_id: '358')
# termlist164=Termlist.create(course_id:'8', term_id: '359')
# termlist165=Termlist.create(course_id:'8', term_id: '360')
# termlist166=Termlist.create(course_id:'8', term_id: '361')
# termlist167=Termlist.create(course_id:'8', term_id: '362')
# termlist168=Termlist.create(course_id:'8', term_id: '363')
# termlist169=Termlist.create(course_id:'8', term_id: '366')
# termlist170=Termlist.create(course_id:'8', term_id: '367')
# termlist171=Termlist.create(course_id:'8', term_id: '368')
# termlist172=Termlist.create(course_id:'8', term_id: '369')
# termlist173=Termlist.create(course_id:'8', term_id: '370')
# termlist174=Termlist.create(course_id:'8', term_id: '371')
# termlist175=Termlist.create(course_id:'8', term_id: '372')
# termlist176=Termlist.create(course_id:'8', term_id: '373')
# termlist177=Termlist.create(course_id:'8', term_id: '374')
# termlist178=Termlist.create(course_id:'8', term_id: '375')
# termlist179=Termlist.create(course_id:'8', term_id: '376')
# termlist180=Termlist.create(course_id:'8', term_id: '377')
# termlist181=Termlist.create(course_id:'8', term_id: '378')
# termlist182=Termlist.create(course_id:'8', term_id: '379')
# termlist183=Termlist.create(course_id:'8', term_id: '380')
# termlist184=Termlist.create(course_id:'8', term_id: '381')
# termlist185=Termlist.create(course_id:'8', term_id: '382')
# termlist186=Termlist.create(course_id:'8', term_id: '383')
# termlist187=Termlist.create(course_id:'8', term_id: '384')

# term200 = Term.create(termname:'Cognitive', definition:'<p>Cognitive assessments (e.g., informal reading inventories, oral reading assessments) &ldquo;focus on the skills and strategies used by students as they develop as readers&rdquo; (Afflerbach, 2012, p.14).</p>')
# term201 = Term.create(termname:'Noncognitive assessments', definition:'<p>Noncognitive assessments are other factors that are important to reading success. &ldquo;These factors include readers&rsquo; motivation and engagement, self-concepts, agency, interests, and attitudes, as well as the attributions that readers make for their performances in reading&rdquo; (Afflerbach, 2012, p. 171)</p>')
# term202 = Term.create(termname:'Academic vocabulary', definition:'<p>Academic Vocabulary consists of &ldquo;words from core subject areas (e.g., science, social studies, mathematics)" (Reutzel &amp; Cooter, 2013, p. 246).</p>')
# term203 = Term.create(termname:'Word study', definition:'<p>Word study includes direct instruction of phonemic awareness and phonics, based on student needs.(Reutzel &amp; Cooter, 2013). It also includes word recognition, spelling concepts, the study of root words, prefixes, and suffixes, and vocabulary development (Gunning, 2012).</p>')
# term204 = Term.create(termname:'Word studies', definition:'<p>Word study includes direct instruction of phonemic awareness and phonics, based on student needs.(Reutzel &amp; Cooter, 2013). It also includes word recognition, spelling concepts, the study of root words, prefixes, and suffixes, and vocabulary development (Gunning, 2012).</p>')

# termlist300 = Termlist.create(course_id: '12', term_id: '385')
# termlist301 = Termlist.create(course_id: '12', term_id: '386')
# termlist302 = Termlist.create(course_id: '12', term_id: '387')
# termlist303 = Termlist.create(course_id: '12', term_id: '388')
# termlist304 = Termlist.create(course_id: '12', term_id: '389')

# term500 = Term.create(termname:'just-in-time',definition:'<p>The Just-In-Time interactive feature will provide you with additional information to support the assignments. When you click on a word or phrase displayed in a blue font with a broken underline, a pop-up window will display key information that may provide a definition or links to relevant resources.</p>')
# term501 = Term.create(termname:'passion',definition:'<p>Think about yourself 5 years from now. In what area do you wish to be an expert? What drives you so much that you find yourself talking about it all the time? Researching and reading about something for which you are passionate will help you with motivation and perseverance throughout your program.</p>')
# term502 = Term.create(termname:'topics',definition:'<p>You will be spending a lot of time on the topic that you select. Think of an area that interests you most. If you are passionate about writing, for example, what area of writing interests you? Writing conferences? Writing process? Writing and special education students?</p>')
# term503 = Term.create(termname:'end product',definition:'<p>The end product may vary per your degree path. The end product may be a dissertation, an applied study project, or a culminating project.</p>')
# term504 = Term.create(termname:'specialization',definition:'<p>You may explore specializations in the Walden University PhD, EdD, and EdS programs at the following sites:</p><p>PhD: <a href="http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/ph-d-in-education/" title="Walden PhD in Education" target="_blank">http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/ph-d-in-education/</a></p><p>EdD: <a href="http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/doctor-of-education/" title="Walden EdD Program" target="_blank">http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/doctor-of-education/&nbsp;</a></p><p>EdS: <a href="http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/education-specialist/" title="Walden EdS Program" target="_blank">http://info.waldenu.edu/walden-programs/education/doctoral-and-post-masters/education-specialist/&nbsp;</a></p>')
# term505 = Term.create(termname:'issues',definition:'<p>Once you have found your topic, begin to consider what educational issues might surround that topic. For example, if you are passionate about writing, your might decide that your topic of interest is writing across the curriculum. The issue may be that writing scores across the nation (state, district) are continuously low. Find an issue that you relate to &ndash; one that you will enjoy learning more about.</p><p>Here are a few resources that will help you keep up with the issues in education:</p><p><a href="https://www2.smartbrief.com/signupSystem/subscribe.action?pageSequence=1&amp;briefName=ascd" title="Subscribe to ASCD SmartBrief" target="_blank">ASCD SmartBrief</a></p><p><a href="http://www2.edweek.org/info/about/newsletters.html" title="Subscribe to Teacher Magazine and EdWeek" target="_blank">Teacher Magazine Update and EdWeek Update</a></p><p><a href="http://www.edweek.org/newsletter/daily-update/2009/08/31/email/ewupdate.html" title="Subscribe to Ed Week Daily News" target="_blank">Ed Week Update: Daily News and Insight</a></p><p><a href="http://scholasticadministrator.typepad.com/thisweekineducation/" title="Subscribe to This Week in Education" target="_blank">This Week In Education</a></p><p><a href="http://nea.bulletinmedia.com/" title="Subscribe to The Opening Bell" target="_blank">The Opening Bell</a></p><p></p>')
# term506 = Term.create(termname:'problem',definition:'<p>Once you have established your passion (e.g., writing) your topic (e.g., writing across the curriculum) and your issue (e.g., writing scores across the nation are continuously low) it is time to consider the problem you wish to investigate. The problem may be that teachers in a particular school are not embracing writing across the curriculum. Notice how your focus continually narrows until you are dealing with one specific problem that is a small chunk to tackle.</p>')
# term507 = Term.create(termname:'key word descriptors',definition:'<p>Key word descriptors help you to find articles that are relevant to your topics, issues, and problems. Key word descriptors are terms or phrases that you type into library search engines in order to find books, articles, and documents related to topics, issues and problems. For example: If you are working on a research paper about common core standards, you may begin your search by using key word descriptors such as &ldquo;standards,&rdquo; &ldquo;common core,&rdquo; &ldquo;K-12 education,&rdquo; and &ldquo;current education policy.&rdquo; As you search for supporting articles and documents related to your topic of interest, be sure to keep track of all of the key word descriptors that you have used. You will save time if you do.&nbsp;</p>')
# term508 = Term.create(termname:'Walden library',definition:'<p>The following links will take you to the Walden Library and other resources that will support you as you explore the case study issue and other topics of interest.</p><p><a href="http://library.waldenu.edu/" title="Walden Library" target="_blank">Walden Library</a></p><p><a href="http://researchcenter.waldenu.edu/" title="Walden Research Center" target="_blank">Research Center</a></p><p><a href="http://writingcenter.waldenu.edu/" title="Walden Writing Center" target="_blank">Online Writing Center</a></p><p><a href="http://catalog.waldenu.edu/content.php?catoid=90&amp;navoid=20872" title="Walden Student Code of Conduct" target="_blank">Student Code of Conduct</a></p>')
# term509 = Term.create(termname:'debate',definition:'<p>The following resources will help you prepare for the debate:</p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Constructing_Arguments.pdf" title="Download Constructing Arguments PDF file" target="_blank">Constructing Arguments</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Compare_and_Contrast_Essay.pdf" title="Download Compare and Contrast PDF file" target="_blank">Compare and Contrast</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Logical_Fallacies..pdf" title="Download Logical Fallacies PDF file" target="_blank">Logical Fallacies</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/What_to_Assume.pdf" title="Download What to Assume PDF file" target="_blank">What to Assume</a></p><p>Learning to spot a strong argument in what you read can help you become better at constructing your own arguments when you write. Click on this link to read about key concepts in <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf" title="Download Critical Reading PDF file" target="_blank">critical reading</a>.&nbsp;</p><p>This video provides excellent information to help you write persuasively:&nbsp;</p><p><a href="http://www.youtube.com/watch?v=X7siKD0lmfg" title="Watch Walden video on Persuasive Writing" target="_blank">http://www.youtube.com/watch?v=X7siKD0lmfg</a></p>')
# term510 = Term.create(termname:'education-related issue',definition:'<p>Education-related issues can be broad or specific. They might be based on subject area content, standards, policy, students with special needs, training, etc. These issues may relate to a variety of fields in education.</p>')
# term511 = Term.create(termname:'scholarly',definition:'<p>Scholarly writing is also known as academic writing. It is the genre of writing used in all academic fields. Scholarly writing is not better than journalism, fiction, or poetry; it is just a different category. If you are not used to scholarly writing, it can feel unfamiliar and intimidating, but it is a skill that can be learned by immersing yourself in scholarly literature. During your studies at Walden, you will be reading, discussing, and producing scholarly writing in everything from discussion posts to dissertations. For Walden students, there are plenty of opportunities to practice this skill in a writing intensive environment. &nbsp;</p><p></p><p>See more at <a href="http://writingcenter.waldenu.edu/312.htm#sthash.T4rAjMdj.dpuf" title="Resources related to scholarly writing" target="_blank">http://writingcenter.waldenu.edu/312.htm#sthash.T4rAjMdj.dpuf</a></p>')
# term512 = Term.create(termname:'change agent',definition:'<p>Canadian George Couros writes about five characteristics of change agents in this blog post: <a href="http://georgecouros.ca/blog/archives/3615" title="5 Characteristics of a Change Agent" target="_blank">http://georgecouros.ca/blog/archives/3615</a></p>')
# term513 = Term.create(termname:'Google Scholar alert',definition:'<p>You will find instructions on setting up a Google Scholar alert in the Toolkit.</p>')
# term514 = Term.create(termname:'RSS feeds',definition:'<p>You will find instructions on setting up an RSS feed in the Toolkit.</p>')
# term515 = Term.create(termname:'reliable resources',definition:'<p>Reliable sources are credible sources that have valid, expert knowledge about a particular area of study.</p>')
# term516 = Term.create(termname:'critical analyst',definition:'<p>For help, read the Writing Center&rsquo;s article, Critical Reading, at <a href="http://writingcenter.waldenu.edu/454.htm" title="Critical Reading" target="_blank">http://writingcenter.waldenu.edu/454.htm</a></p>')
# term517 = Term.create(termname:'literature review',definition:'<p>For assistance, consider reading Libberton&rsquo;s 2012 article &rdquo;10 Lessons I&rsquo;ve Learned Writing About the Literature Review for 1 Year&rdquo; &nbsp;at <a href="http://www.literaturereviewhq.com/10-literature-review-lessons/" title="10 Lessons about Literature Review" target="_blank">http://www.literaturereviewhq.com/10-literature-review-lessons/</a> and the Writing Center&rsquo;s article, Literature Review, at <a href="http://writingcenter.waldenu.edu/50.htm" title="Literature Review" target="_blank">http://writingcenter.waldenu.edu/50.htm</a></p>')
# term518 = Term.create(termname:'variety of resources',definition:'<p>As you locate these resources, subscribe to them using your RSS aggregator (see instructions for setting up an RSS feed in your Toolkit). &nbsp;As new information is posted, you will receive an update.</p>')
# term519 = Term.create(termname:'scholarly inquiry',definition:'<p>Click on this link to read about analyzing and evaluating scholarly inquiry: <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf" title="Download Critical Reading PDF file" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf</a></p>')
# term520 = Term.create(termname:'planning a research study',definition:'<p>The Writing Center has some excellent resources for assisting you in this process. &nbsp;Start with <a href="http://writingcenter.waldenu.edu/314.htm" title="Organizing your Research" target="_blank">organizing your research.</a></p>')
# term521 = Term.create(termname:'review the literature',definition:'<p>Go to the Writing Center for information on <a href="http://writingcenter.waldenu.edu/50.htm" title="literature reviews" target="_blank">literature reviews</a>.</p>')
# term522 = Term.create(termname:'stakeholders',definition:'<p>According to the Merriam-Webster dictionary (n.d.) a <a href="http://www.merriam-webster.com/dictionary/stakeholder" title="Dictionary entry: stakeholder" target="_blank">stakeholder</a> is &ldquo;one who is involved in or affected by a course of action.&rdquo;</p><p></p>')
# term523 = Term.create(termname:'address all the topics outlined in the template',definition:'<p>Make sure that you are also checking the rubric for all the components of the assignment.</p><p>Make sure that you are also checking the rubric for all the components of the assignment. To access the rubric, click <strong>Course Information</strong> in the course navigation menu.</p>')
# term524 = Term.create(termname:'toolkit',definition:'<p>The Toolkit contains a variety of resources that will support you in this course and throughout your program. Bookmark this link so you can find it when you need it.</p><p>To access your Toolkit, click <strong>Toolkit</strong> in the course navigation menu.</p>')
# term525 = Term.create(termname:'degree path road map',definition:'<p>We have provided you with an overview of each of the three degree paths. It will allow you to compare the required coursework and types of experiences for each. Links to the current catalog are also provided so that you may see detailed explanations of each path and program.&nbsp;</p><p>You can find the Degree Path Road Map interactive media piece at <a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/EDUC/8002/CH/mm/roadmap/index.html" title="Degree Path Roadmap interactive media" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/EDUC/8002/CH/mm/roadmap/index.html</a></p>')

# termlist600 = Termlist.create(course_id: '15', term_id: '390')
# termlist601 = Termlist.create(course_id: '15', term_id: '391')
# termlist602 = Termlist.create(course_id: '15', term_id: '392')
# termlist603 = Termlist.create(course_id: '15', term_id: '393')
# termlist604 = Termlist.create(course_id: '15', term_id: '394')
# termlist605 = Termlist.create(course_id: '15', term_id: '395')
# termlist606 = Termlist.create(course_id: '15', term_id: '396')
# termlist607 = Termlist.create(course_id: '15', term_id: '397')
# termlist608 = Termlist.create(course_id: '15', term_id: '398')
# termlist609 = Termlist.create(course_id: '15', term_id: '399')
# termlist610 = Termlist.create(course_id: '15', term_id: '400')
# termlist611 = Termlist.create(course_id: '15', term_id: '401')
# termlist612 = Termlist.create(course_id: '15', term_id: '402')
# termlist613 = Termlist.create(course_id: '15', term_id: '403')
# termlist614 = Termlist.create(course_id: '15', term_id: '404')
# termlist615 = Termlist.create(course_id: '15', term_id: '405')
# termlist616 = Termlist.create(course_id: '15', term_id: '406')
# termlist617 = Termlist.create(course_id: '15', term_id: '407')
# termlist618 = Termlist.create(course_id: '15', term_id: '408')
# termlist619 = Termlist.create(course_id: '15', term_id: '409')
# termlist620 = Termlist.create(course_id: '15', term_id: '410')
# termlist621 = Termlist.create(course_id: '15', term_id: '411')
# termlist622 = Termlist.create(course_id: '15', term_id: '412')
# termlist623 = Termlist.create(course_id: '15', term_id: '413')
# termlist624 = Termlist.create(course_id: '15', term_id: '414')
# termlist625 = Termlist.create(course_id: '15', term_id: '415')

# term600 = Term.create(termname:'identify', definition: '<p>Finding one or two reputable people in the field to follow can start the ball rolling in your development of a powerful PLN. Take another look at the PLN Handout and your instructor&rsquo;s suggestions to identify more people.</p>')
# term601 = Term.create(termname:'infographic', definition: '<p>An abbreviation for information graphic, infographics represent information in visual presentation of information that enables readers to quickly scan and understand content, trends, and patterns. &nbsp;This process is often referred to as information design or data visualization.</p>')
# term602 = Term.create(termname:'New Media Consortium Horizon Project website', definition: '<p>You will find the current Horizon Report at this website: <a href="http://www.nmc.org/" title="New Media Consortium website" target="_blank">http://www.nmc.org/</a>.</p>')
# term603 = Term.create(termname:'Horizon Report', definition: '<p>You will find the current Horizon Report at this website: <a href="http://www.nmc.org/" title="New Media Consortium website" target="_blank">http://www.nmc.org/</a>.</p>')
# term604 = Term.create(termname:'Personal Learning Network', definition: '<p>Sharing knowledge is the basis of a PLN. &nbsp;In this course you will develop connections with people in and out of the ed tech field. &nbsp;Be sure to read the PLN Handout. &nbsp;Your instructor will provide a few people who you can follow to begin building your PLN.</p>')
# term605 = Term.create(termname:'schedule of team meetings', definition: '<p>Teams should meet at least once every module. It may be necessary to meet on a weekly basis in order to complete the tasks and collaborate on the final Field Report.</p>')
# term606 = Term.create(termname:'Just-In-Time', definition: '<p>The Just-In-Time interactive feature will provide you with additional information to support the assignments. When you click on a word or phrase displayed in a blue font with a broken underline, a pop-up window will display key information that may provide a definition and/or links to relevant resources.&nbsp;</p>')

# termlist600 = Termlist.create(course_id: '16', term_id: '416')
# termlist601 = Termlist.create(course_id: '16', term_id: '417')
# termlist602 = Termlist.create(course_id: '16', term_id: '418')
# termlist603 = Termlist.create(course_id: '16', term_id: '419')
# termlist604 = Termlist.create(course_id: '16', term_id: '420')
# termlist605 = Termlist.create(course_id: '16', term_id: '421')
# termlist606 = Termlist.create(course_id: '16', term_id: '422')

# term750 = Term.create(termname:'blog', definition:'<p>Look at the Blogging, Tagging, and RSS handout for information about blogging.</p>')
# term751 = Term.create(termname:'create a blog', definition:'<p>The Blogging, Tagging, and RSS handout will give you a good start. Check out WordPress and Blogger.</p>')
# term752 = Term.create(termname:'post your blog', definition:'<p>For each new post to your blog, make sure to provide the link to the post itself, not the general link to your blog.</p>')
# term753 = Term.create(termname:'link to your blog', definition:'<p>Be sure to provide the link to the actual post.</p>')
# term754 = Term.create(termname:'RSS feeds', definition:'<p>Look at the Blogging, Tagging, and RSS handout for information about RSS feeds.</p>')
# term755 = Term.create(termname:'Learning Community', definition:'<p>Be sure to exchange contact information and add one another to your Skype Contacts.</p>')
# term756 = Term.create(termname:'read and respond', definition:'<p>Go to the Class Caf&eacute; and find the blog URLs for each of your learning community members. &nbsp;Follow the RSS instructions in the Blogging, Tagging, and RSS handout and begin subscribing to their blogs.</p>')
# term757 = Term.create(termname:'tags', definition:'<p>You can find instructions on tagging in the Blogging, Tagging, and RSS handout.</p>')
# term758 = Term.create(termname:'prepare for interviews', definition:'<p>Be sure to choose people who are readily available. &nbsp;Set up the interview appointments now.</p>')
# term759 = Term.create(termname:'create one tetrad', definition:'<p>If you are unsure of what your tetrad should look like, use a search engine such as Google or Bing to find examples.</p>')
# term760 = Term.create(termname:'appointments', definition:'<p>Set up the interview appointments now.</p>')
# term761 = Term.create(termname:'options', definition:'<p>If you do not know how to use a multimedia tool, choose one and look for a tutorial on YouTube.</p>')
# term762 = Term.create(termname:'futurists', definition:'<p>According to the Oxford Dictionary futurists are those who study the future and make predictions about it based on current trends.</p><p>(<a href="http://www.oxforddictionaries.com/us/definition/american_english/futurist" title="Oxford Dictionary: futurists" target="_blank">http://www.oxforddictionaries.com/us/definition/american_english/futurist</a>)</p>')
# term763 = Term.create(termname:'Just-In-Time', definition:'<p>The Just-In-Time interactive feature will provide you with additional information to support the assignments. When you click on a word or phrase displayed in a blue font with a broken underline, a pop-up window will display key information that may provide a definition and/or links to relevant resources.&nbsp;</p>')

# termlist750 = Termlist.create(course_id: '17', term_id: '424')
# termlist751 = Termlist.create(course_id: '17', term_id: '425')
# termlist752 = Termlist.create(course_id: '17', term_id: '426')
# termlist753 = Termlist.create(course_id: '17', term_id: '427')
# termlist754 = Termlist.create(course_id: '17', term_id: '428')
# termlist755 = Termlist.create(course_id: '17', term_id: '429')
# termlist756 = Termlist.create(course_id: '17', term_id: '430')
# termlist757 = Termlist.create(course_id: '17', term_id: '431')
# termlist758 = Termlist.create(course_id: '17', term_id: '432')
# termlist759 = Termlist.create(course_id: '17', term_id: '433')
# termlist760 = Termlist.create(course_id: '17', term_id: '434')
# termlist761 = Termlist.create(course_id: '17', term_id: '435')
# termlist762 = Termlist.create(course_id: '17', term_id: '436')

# term800 = Term.create(termname:'embedded audio', definition:'<p>If you need help embedding your audio on your Google site, use the Help files in Google or search YouTube for a tutorial. &nbsp;Make sure that the YouTube video is recent enough to include the latest updates to Google Sites.&nbsp;</p>')
# term801 = Term.create(termname:'free image editing tools', definition:'<p>Use a search engine to find free tools. &nbsp;Try terms such as "image editing" or "photo editing" &ndash; be sure to include the parenthesis to limit search results. Check the date of the post to be sure the site is still active. &nbsp;Reviews of tools can help you make an informed decision.</p>')
# term802 = Term.create(termname:'free web tools', definition:'<p>Use a search engine to find free tools or use Google tools such as Google Docs, Google Presenter, etc.</p>')
# term803 = Term.create(termname:'Google Sites', definition:'<p>Take a look at these websites from the Learning Resources:</p><p><a href="http://www.google.com/sites/help/intl/en/overview.html" title="Link to Google Sites" target="_blank">http://www.google.com/sites/help/intl/en/overview.html</a></p><p><a href="https://support.google.com/drive/answer/87809?hl=en" title="Link to Google support" target="_blank">https://support.google.com/drive/answer/87809?hl=en</a></p>')
# term804 = Term.create(termname:'Google tools', definition:'<p>These two sites will give you the basics for setting up your Google Site and creating a Google Form:</p><p><a href="http://www.google.com/sites/help/intl/en/overview.html" title="Link to Google Sites" target="_blank">http://www.google.com/sites/help/intl/en/overview.html</a></p><p><a href="https://support.google.com/drive/answer/87809?hl=en" title="Link to Google support" target="_blank">https://support.google.com/drive/answer/87809?hl=en</a></p>')
# term805 = Term.create(termname:'help pages', definition:'<p>The Learning Resources for this module provide some initial websites. &nbsp;Search YouTube for tutorials.&nbsp;</p>')
# term806 = Term.create(termname:'learning objects', definition:'<p>Sometimes referred to as reusable learning objects. &nbsp;Search the web for definitions and examples.</p>')
# term807 = Term.create(termname:'massification', definition:'<p>Check several online dictionaries and resources to see the similarities and differences in this term. Use the context of the sentence to define it for use in this course.</p>')
# term808 = Term.create(termname:'open courseware', definition:'<p>Several major universities are involved in this movement. &nbsp;Familiarize yourself with the term by using a search engine to look for definitions and examples.</p>')
# term809 = Term.create(termname:'provide a link', definition:'<p>For detailed instructions for any of these tasks, go to YouTube and search for a tutorial.</p>')
# term810 = Term.create(termname:'software of your choice', definition:'<p>For specific instructions on using any of the suggested software, search for tutorials on YouTube.&nbsp;</p>')
# term811 = Term.create(termname:'storyboard', definition:'<p>Click the link below to open or download an example of a storyboard.</p><p><a href="artifacts/USW1_EDUC_8343_Module02_storyboardExample.doc" title="Link to storyboard example" target="_blank">Storyboard example</a></p>')
# term812 = Term.create(termname:'two-column script format', definition:'<p>Click the link below to open or download an example of a two-column script.</p><p><a href="artifacts/USW1_EDUC_8343_Module02_Module04_twoColumnScriptExample.doc" title="Link to script example" target="_blank">Two-column script document</a></p>')

# termlist250 = Termlist.create(course_id: '18', term_id: '451')
# termlist251 = Termlist.create(course_id: '18', term_id: '452')
# termlist252 = Termlist.create(course_id: '18', term_id: '453')
# termlist253 = Termlist.create(course_id: '18', term_id: '454')
# termlist254 = Termlist.create(course_id: '18', term_id: '455')
# termlist255 = Termlist.create(course_id: '18', term_id: '456')
# termlist256 = Termlist.create(course_id: '18', term_id: '457')
# termlist257 = Termlist.create(course_id: '18', term_id: '458')
# termlist258 = Termlist.create(course_id: '18', term_id: '459')
# termlist259 = Termlist.create(course_id: '18', term_id: '460')
# termlist260 = Termlist.create(course_id: '18', term_id: '461')
# termlist261 = Termlist.create(course_id: '18', term_id: '462')
# termlist262 = Termlist.create(course_id: '18', term_id: '463')

# term850 = Term.create(termname:'Statistical Inference', definition:'<p>The method of forming judgments based on the factors of a population usually based on random sampling.</p>')
# term851 = Term.create(termname:'Statistical Analyses', definition:'<p>A quantitative manner used to interpret data from which inferences can be made about an outcome with measureable certainty.</p>')
# term852 = Term.create(termname:'Alpha', definition:'<p>The chance you are willing to take in mistakenly rejecting a true null hypothesis.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term853 = Term.create(termname:'Confidence Interval', definition:'<p>Confidence interval consists of the point estimate and surrounding margin of error (<em>m</em>).</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term854 = Term.create(termname:'Margin of Error', definition:'<p>Margin of error (<em>m</em>) is a measure of the precision of the estimate.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term855 = Term.create(termname:'Mean', definition:'<p>The mean refers to the arithmetic average of a data set. This is the most common measure of central location.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term856 = Term.create(termname:'Nonparametrics', definition:'<p>Nonparametrics tests encompass a broad array of statistical techniques used to analyze data.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term857 = Term.create(termname:'Normal Distribution', definition:'<p>The most popular type of probability distribution that applies to continuous random variables. Normal distributions are recognized by their bell shape.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term858 = Term.create(termname:'Null Hypothesis', definition:'<p>The first step in hypothesis testing is to state the hypotheses in null and alternative forms. The null hypothesis is a statement of "no difference." The alternative hypothesis contradicts the null hypothesis.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term859 = Term.create(termname:'Odds', definition:'<p>The odds of an event is the proportion of successes divided by the proportion of failures.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term860 = Term.create(termname:'Odds Ratios', definition:'<p>The odds ratio is the alternative measure of effect for categorical data.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term861 = Term.create(termname:'P-values', definition:'<p>The main "output" of hypothesis testing is the <em>P</em>-value. The <em>P</em>-value is the probability of the data or data that are more extreme assuming the null hypothesis is correct.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term862 = Term.create(termname:'Point Estimate', definition:'<p>Point estimation provides a single estimate of the parameter.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term863 = Term.create(termname:'Probability Theory', definition:'<p>Probability is a mathematical tool that helps us understand and address chance.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term864 = Term.create(termname:'Sample Size', definition:'<p>Since a true census is seldom possible, most surveys collect data on only a portion or sample of the population.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term865 = Term.create(termname:'Symmetrical', definition:'<p>Symmetry refers to the degree to which the shape reflects a mirror image of itself around its center.</p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition</p>')
# term866 = Term.create(termname:'Reading and Finding Problems in Data when using SPSS', definition:'<p>Click the link below to watch the video, <em>Reading and Finding Problems in Data when Using SPSS</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6032/CH/mm/spss_video/index.html" title="Video: Reading and Finding Problems in Data when Using SPSS" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6032/CH/mm/spss_video/index.html</a><span style="text-decoration: underline;"> </span></p>')
# term867 = Term.create(termname:'Data', definition:'<p>Data are recorded observations made on people, objects, or other things that can be counted, measured, or quantified in some way.</p><p>In statistics, data are categorized according to several criteria, for example, according to the type of the values used to quantify the observations.</p><p>Reference: Statistics.com. (2014). Glossary of statistical terms. Retrieved from <a href="http://www.statistics.com/glossary&amp;term_id=740" title="Glossary Listing on Statistics.com" target="_blank">http://www.statistics.com/glossary&amp;term_id=740</a></p>')
# term868 = Term.create(termname:'Epidemiology', definition:'<p><em>Epidemiology</em> is the study of the distribution and determinants of health-related states in specified populations, and the application of this study to control health problems.</p><p>Reference:&nbsp;Dekalb County Board of Health. (2009). Health assessment and promotion. Retrieved from <a href="http://www.dekalbhealth.net/hap/epidemiology-and-statistics/" title="Link to Dekalb Health website" target="_blank">http://www.dekalbhealth.net/hap/epidemiology-and-statistics/</a></p>')
# term869 = Term.create(termname:'Likelihood', definition:'<p>Likelihood function is a fundamental concept in statistical inference. It indicates how likely a particular population is to produce an observed sample.</p><p>Reference:&nbsp;Statistics.com. (2014). Glossary of statistical terms. Retrieved from <a href="http://www.statistics.com/glossary&amp;term_id=257" title="Glossary Term on Statistics.com" target="_blank">http://www.statistics.com/glossary&amp;term_id=257</a></p>')
# term870 = Term.create(termname:'Scientific Method', definition:'<p>The scientific method is a standardized way of making observations, gathering data, forming theories, testing predictions, and interpreting results.</p><p>Reference:&nbsp;SparkNotes. (2014). The scientific method. Retrieved from <a href="http://www.sparknotes.com/psychology/psych101/researchmethods/section2.rhtml" title="Sparknotes.com entry" target="_blank">http://www.sparknotes.com/psychology/psych101/researchmethods/section2.rhtml</a></p>')
# term871 = Term.create(termname:'Skewness', definition:'<p>When they are displayed graphically, some distributions of data have many more observations on one side of the graph than the other. Distributions with fewer observations on the right (toward higher values) are said to be skewed right; and distributions with fewer observations on the left (toward lower values) are said to be skewed left.</p><p>Reference:&nbsp;Stat treck. (2014). Statistics and probability dictionary. Retrieved from <a href="http://stattrek.com/statistics/dictionary.aspx?definition=outlier" title="Definition on StatTrek.com" target="_blank">http://stattrek.com/statistics/dictionary.aspx?definition=outlier</a></p>')
# term872 = Term.create(termname:'Analysis of Variance', definition:'<p>Click the link below to watch the video, <em>Analysis of Variance (ANOVA)</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_C_EN.html" title="Video: Analysis of Variance" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_C_EN.html</a></p>')
# term873 = Term.create(termname:'Chance', definition:'<p>Significance levels show you how likely a result is due to chance.</p><p>Reference: Creative Research Systems. (2012). Significance in statistics and surveys. Retrieved from <a href="http://www.surveysystem.com/signif.htm" title="Link to Surveysystem.com" target="_blank">http://www.surveysystem.com/signif.htm</a></p>')
# term874 = Term.create(termname:'Social Determinants', definition:'<p>The social determinants of health are the circumstances in which people are born, grow up, live, work, and age, as well as the systems put in place to deal with illness. These circumstances are in turn shaped by a wider set of forces: economics, social policies, and politics.</p><p>Reference:&nbsp;CDC. (2014). Social determinants of health. Retrieved from <a href="http://www.cdc.gov/socialdeterminants/" title="Link to CDC.gov website" target="_blank">http://www.cdc.gov/socialdeterminants/</a></p>')
# term875 = Term.create(termname:'Frequency Distributions', definition:'<p>Click the link below to watch the video, <em>Frequency Distributions</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_04_A_EN.html" title="Video: Frequency Distributions" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_04_A_EN.html</a></p>')
# term876 = Term.create(termname:'Introduction to Statistics', definition:'<p>Click the link below to watch the video, <em>Introduction to Statistics</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_01_A_EN.html" title="Video: Introduction to Statistics" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_01_A_EN.html</a></p>')
# term877 = Term.create(termname:'Central tendency', definition:'<p>A measure of central tendency is a single value that attempts to describe a set of data by identifying the central position within that set of data. As such, measures of central tendency are sometimes called measures of central location. They are also classed as summary statistics. The mean (often called the average) is most likely the measure of central tendency that you are most familiar with, but there are others, such as the median and the mode.</p><p>Click the link below to watch the video, <em>Central Tendency and Variability</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_05_A_EN.html" title="Video: Central Tendency and Variability" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_05_A_EN.html</a></p><p>Reference: Laerd Statistics. (2013). Measures of central tendency. Retrieved from&nbsp;<a href="https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php" title="Link to statistics.laerd.com" target="_blank">https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php</a></p>')
# term878 = Term.create(termname:'Correlation', definition:'<p>Click the link below to watch the video, <em>Correlation and Introduction to Regression</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_D_EN.html" title="Video: Correlation and Introduction to Regression" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_D_EN.html</a></p>')
# term879 = Term.create(termname:'Hypothesis', definition:'<p>In hypothesis testing, the population is sampled, data are used to calculate statistics, and statistics are used to help infer parameters.</p><p>Click the link below to watch the video, <em>Introduction to Hypothesis Testing</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_A_EN.html" title="Video: Introduction to Hypothesis Testing" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_A_EN.html</a></p><p>Reference: <em>Basic biostatistics: statistics for public health practice</em>, (2nd ed.). Sudbury, Mass.: Jones and Bartlett Publishers. Custom Laureate Edition<a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/WAL_PUBH6032_06_A_EN%20" title="Video: Introduction to Hypothesis Testing" target="_blank"></a></p>')
# term880 = Term.create(termname:'SPSS', definition:'<p>Click the link below to watch the video, <em>Introduction to SPSS</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_02_A_EN.html" title="Video: Introduction to SPSS" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_02_A_EN.html</a></p>')
# term881 = Term.create(termname:'T-tests', definition:'<p>Click the link below to watch the video, <em>The t Test for Independent Samples</em>.</p><p><a href="http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_B_EN.html" title="Video: The t Test for Independent Samples" target="_blank">http://mym.cdn.laureate-media.com/2dett4d/Walden/PUBH/6033/MyM2_WAL_PUBH6032_06_B_EN.html</a></p>')
# term882 = Term.create(termname:'Extreme Values', definition:'<p><em>Smallest or largest values in statistical study</em></p><p>Either of the smallest or largest variate values in a sample of observations from a statistical study.</p><p>Reference:&nbsp;QFinance. (2013). Extreme values. Retrieved from <a href="http://www.financepractitioner.com/dictionary/extreme-value" title="Link to QFinance Website" target="_blank">http://www.financepractitioner.com/dictionary/extreme-value</a></p>')


# termlist464 = Termlist.create(term_id: '464', course_id: '14')
# termlist465 = Termlist.create(term_id: '465', course_id: '14')
# termlist466 = Termlist.create(term_id: '466', course_id: '14')
# termlist467 = Termlist.create(term_id: '467', course_id: '14')
# termlist468 = Termlist.create(term_id: '468', course_id: '14')
# termlist469 = Termlist.create(term_id: '469', course_id: '14')
# termlist470 = Termlist.create(term_id: '470', course_id: '14')
# termlist471 = Termlist.create(term_id: '471', course_id: '14')
# termlist472 = Termlist.create(term_id: '472', course_id: '14')
# termlist473 = Termlist.create(term_id: '473', course_id: '14')
# termlist474 = Termlist.create(term_id: '474', course_id: '14')
# termlist475 = Termlist.create(term_id: '475', course_id: '14')
# termlist476 = Termlist.create(term_id: '476', course_id: '14')
# termlist477 = Termlist.create(term_id: '477', course_id: '14')
# termlist478 = Termlist.create(term_id: '478', course_id: '14')
# termlist479 = Termlist.create(term_id: '479', course_id: '14')
# termlist480 = Termlist.create(term_id: '480', course_id: '14')
# termlist481 = Termlist.create(term_id: '481', course_id: '14')
# termlist482 = Termlist.create(term_id: '482', course_id: '14')
# termlist483 = Termlist.create(term_id: '483', course_id: '14')
# termlist484 = Termlist.create(term_id: '484', course_id: '14')
# termlist485 = Termlist.create(term_id: '485', course_id: '14')
# termlist486 = Termlist.create(term_id: '486', course_id: '14')
# termlist487 = Termlist.create(term_id: '487', course_id: '14')
# termlist488 = Termlist.create(term_id: '488', course_id: '14')
# termlist489 = Termlist.create(term_id: '489', course_id: '14')
# termlist490 = Termlist.create(term_id: '490', course_id: '14')
# termlist491 = Termlist.create(term_id: '491', course_id: '14')
# termlist492 = Termlist.create(term_id: '492', course_id: '14')
# termlist493 = Termlist.create(term_id: '493', course_id: '14')
# termlist494 = Termlist.create(term_id: '494', course_id: '14')
# termlist495 = Termlist.create(term_id: '495', course_id: '14')
# termlist496 = Termlist.create(term_id: '496', course_id: '14')


# term900 = Term.create(termname: 'Hanging indent', definition:'<p>Read <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Hanging_Indent_update.pdf" title="Hanging Indent" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Hanging_Indent_update.pdf</a></p><p>Watch the video <a href="http://www.screencast.com/t/dV2JlqDA1" title="Hanging Indents in MS Word" target="_blank">Hanging Indents in MS Word</a></p>')
# term901 = Term.create(termname: 'Student Code of Conduct', definition:'<p>Read the Walden University Student Catalog section: <a href="http://catalog.waldenu.edu/content.php?catoid=90&amp;navoid=20872" title="Code of Conduct" target="_blank">Student Code of Conduct</a> <br /> See also this presentation on Walden&rsquo;s Academic Integrity Inquiry Process: <a href="http://writingcenter.waldenu.edu/AcadInt.swf" title="Academic Integrity and Code of Conduct at Walden University" target="_blank">http://writingcenter.waldenu.edu/AcadInt.swf</a></p>')
# term902 = Term.create(termname: 'Scholarly Writing', definition:'<p>Scholarly writing is formal, objective, unbiased, precise, and direct. Although the exact definition of scholarly or academic writing may vary, most scholars and editors of peer-reviewed journals do not allow the use of colloquialism, slang, contractions, <a href="http://writingcenter.waldenu.edu/774.htm" title="Avoiding Bias" target="_blank">biased language</a>, rhetorical questions, and <a href="http://writingcenter.waldenu.edu/711.htm" title="Point of View in Academic Writing" target="_blank">second person pronouns</a>.</p><p>Avoid writing:</p><ul><li>Excessively long or complex sentences</li><li>Compound sentences and <a href="http://writingcenter.waldenu.edu/728.htm" title="Run-On Sentences and Sentence Fragments" target="_blank">run-on sentences</a></li><li>Sentences that carry little information and merely state the obvious</li><li><a href="http://writingcenter.waldenu.edu/487.htm" title="Active and Passive Voice" target="_blank">Passive voice</a> constructions that hide the subject or &ldquo;doer&rdquo; of the action</li><li>Unnecessary words, phrases, sentences, and paragraphs that merely fill in extra space to meet an assignment limit</li></ul><p>See these three Writing Center resources:</p><p><a href="http://academicanswers.waldenu.edu/a.php?qid=295670" title="What is scholarly writing?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=295670</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Writing_Concisely.pdf" title="Writing Concisely" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Writing_Concisely.pdf</a></p><p><a href="http://academicanswers.waldenu.edu/a.php?qid=418310" title="How do I use good tone?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418310</a></p><p>See also definitions and examples of <span style="text-decoration: underline;">Bloom&rsquo;s Taxonomy</span> (1956) at &ldquo;Rhetorical Functions in Academic Writing: Writing Critically: <a href="http://www.uefap.com/writing/function/crit.htm" title="Rhetorical functions in academic writing" target="_blank">http://www.uefap.com/writing/function/crit.htm</a></p>')
# term903 = Term.create(termname: 'Scholarly Resources', definition:'<p><strong>Understanding different types of reference options helps scholars determine the best sources of appropriate information.</strong> Graduate school assignments require the use of scholarly peer-reviewed journal articles because scholars and experts in the particular field have reviewed and approve them.</p><p>Government documents and websites that use .gov as their designated domain often provide statistical information, but most scholarly writing should depend upon peer-reviewed articles.</p><p>Avoid the following types of <strong><span underline="">non-peer reviewed</span></strong> articles:</p><ul><li>Trade Journals for specific industries</li><li>Popular Magazines that casually inform, entertain, or present an opinion</li><li>Newspapers which often are the first to report a newsworthy story, but do not go into any depth of research</li><li>Books and Ebooks that provide broad and foundational coverage of a topic but are soon out-of-date</li><li>Encyclopedias and handbooks that feature introductory overviews of topics at a superficial level</li></ul>')
# term904 = Term.create(termname: 'Quotations', definition:'<p>To learn how to introduce, integrate, and explain direct quotations, see <a href="http://writingcenter.waldenu.edu/1321.htm" title="Using Evidence" target="_blank">http://writingcenter.waldenu.edu/1321.htm</a></p><p>To learn how to cite direct quotations information, see <a href="http://academicanswers.waldenu.edu/a.php?qid=413786" title="How do I cite in my text?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=413786</a></p>')
# term905 = Term.create(termname: 'Passive Voice', definition:'<p>Compare these two sentences:</p><p>&ldquo;A study was conducted on the effects of illegal immigration on non-border states.&rdquo; (This <strong><span style="text-decoration: underline;" data-mce-mark="1">Passive Voice</span></strong> sentence is <strong><span style="text-decoration: underline;" data-mce-mark="1">wrong </span></strong>because it does not tell the reader who conducted the study)</p><p><strong>&ldquo;</strong>The Department of Homeland Security conducted a study on the effects of immigration on non-border states.&rdquo; (This <strong><span style="text-decoration: underline;" data-mce-mark="1">Active Voice</span></strong> sentence is <strong><span style="text-decoration: underline;" data-mce-mark="1">correct </span></strong>because it tells who conducted the study.)</p><p>See &ldquo;<a href="http://writingcenter.waldenu.edu/487.htm" title="Active and Passive Voice" target="_blank">Active and Passive Voice</a>&rdquo;</p><p>See &ldquo;<a href="http://waldenwritingcenter.blogspot.com/2012/01/hunt-for-passive-voice.html" title="The Hunt for Passive Voice" target="_blank">The Hunt for Passive Voice</a>&rdquo;</p>')
# term906 = Term.create(termname: 'Library', definition:'<p><a href="http://library.waldenu.edu/" title="Walden Library" target="_blank">Walden Library</a></p><p>Notice types of sources that keyword searches yield. See <a href="http://libraryguides.waldenu.edu/keyword" title="Keyword Searching" target="_blank">http://libraryguides.waldenu.edu/keyword</a> and <a href="http://libraryguides.waldenu.edu/evaluating" title="Evaluating Resources" target="_blank">http://libraryguides.waldenu.edu/evaluating</a></p>')
# term907 = Term.create(termname: 'Evidence', definition:'<p>Use <a href="http://writingcenter.waldenu.edu/1321.htm" title="Using Evidence" target="_blank">evidence</a> in the form of specific facts and details from textbooks, journal articles, government documents, and/or course materials to support each thesis, theory, and claim. Because the appropriate use of evidence requires citing original sources for every idea and quote from another author, see &ldquo;<a href="http://writingcenter.waldenu.edu/33.htm" title="How and When to Cite in a Paper" target="_blank">How and When to Cite in a Paper</a>.&rdquo;</p>')
# term908 = Term.create(termname: 'References', definition:'<p><strong>Understanding different types of reference options helps scholars determine the best sources of appropriate information</strong><strong>.</strong> Graduate school assignments require the use of scholarly peer-reviewed journal articles because scholars and experts in the particular field have reviewed and approve them. <br /> Government documents and websites that use .gov as their designated domain often provide statistical information, but most scholarly writing should depend upon peer-reviewed articles. <br /> Avoid the following types of <strong><span style="text-decoration: underline;">non-peer reviewed</span></strong> articles:</p><ul><li>Trade Journals for specific industries </li><li>Popular Magazines that casually inform, entertain, or present an opinion</li><li>Newspapers which often are the first to report a newsworthy story, but do not go into any depth of research</li><li>Books and Ebooks that provide broad and foundational coverage of a topic but are soon out-of-date</li></ul><p>Encyclopedias and handbooks that feature introductory overviews of topics at a superficial level</p>')
# term909 = Term.create(termname: 'Track Changes', definition:'<p>When grading assignments, some instructors also use the MS Word &ldquo;Track Changes&rdquo; system to add individualized evaluation comments to student documents. This 15-minute video explains how to find and read Track Change grade comments:</p><p><a href="https://www.youtube.com/watch?v=O5OrMmCc3_4" title="Track Changes and Copyediting in Word 2013" target="_blank">https://www.youtube.com/watch?v=O5OrMmCc3_4</a></p>')
# term910 = Term.create(termname: 'Analyze', definition:'<p>Scholar-practitioners seek to assess, inform, and persuade by constructing well-informed, logical arguments that begin with analysis and critical reading. <em>Critical analysis</em> requires readers to detect and evaluate the validity of an author&#39;s viewpoints, arguments, <a href="http://academicanswers.waldenu.edu/a.php?qid=413848" title="When should I use evidence?" target="_blank">evidence</a>, potential bias, fact vs. opinion, and conclusions. For more information about critical analysis, see guides to each of these topics at the Walden Writing Center:</p><ul><li><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Constructing_Arguments.pdf" title="Arguments" target="_blank">Constructing Arguments</a></li><li><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Compare_and_Contrast_Essay.pdf" title="Writing the Compare and Contrast" target="_blank">Compare and Contrast</a></li><li><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Logical_Fallacies..pdf" title="Avoiding Logical Fallacies" target="_blank">Logical Fallacies</a></li><li><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/What_to_Assume.pdf" title="What to Assume, What Not to Assume" target="_blank">What to Assume</a></li><li><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf" title="Key Concepts in Critical Reading" target="_blank">Identifying Argument</a></li><li><a href="http://writingcenter.waldenu.edu/454.htm" title="Critical Reading" target="_blank">Critical Reading</a></li><li>The Art of Close Reading (Parts 1-3): <br /><a href="http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/509" title="The Art of Close Reading (Part One)" target="_blank">http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/509</a> <br /><a href="http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/510" title="The Art of Close Reading (Part Two)" target="_blank">http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/510</a> <br /><a href="http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/511" title="The Art of Close Reading (Part Three)" target="_blank">http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/511</a></li></ul>')
# term911 = Term.create(termname: 'Just-in-time', definition:'<p>The Just-In-Time interactive feature will provide you with additional information to support the assignments. When you click on a word or phrase displayed in a blue font with a broken underline, a pop-up window will display key information that may provide a definition or links to relevant resources.</p>')
# term912 = Term.create(termname: 'Citations', definition:'<p>Using scholarly evidence appropriately requires citing every original source of information. Failure to cite sources could result in a charge of <a href="http://writingcenter.waldenu.edu/63.htm" title="Avoiding Plagiarism" target="_blank">plagiarism</a> or a violation of <a href="http://writingcenter.waldenu.edu/AcadInt.swf" title="Academic Integrity" target="_blank">academic integrity</a>. Watch the "Academic Integrity and Code of Conduct at Walden University" video at <a href="http://writingcenter.waldenu.edu/AcadInt.swf" title="Academic Integrity and Code of Conduct" target="_blank">http://writingcenter.waldenu.edu/AcadInt.swf</a></p><p>In-text citations are an absolute requirement to acknowledge the source of every paraphrase as well as direct quotations. See <a href="http://writingcenter.waldenu.edu/11.htm" title="citations" target="_blank">http://writingcenter.waldenu.edu/11.htm</a> for advice. Citations direct readers to the reference list, giving credit to the original sources of direct quotations and paraphrases (see the Paraphrasing advice at <a href="http://writingcenter.waldenu.edu/295.htm" title="Effective Paraphrasing" target="_blank">http://writingcenter.waldenu.edu/295.htm</a>).</p><p>Every in-text citation includes the same three elements regardless of source: <strong>author, publication year, and page or paragraph number for all direct quotations.</strong> The page or paragraph number is optional for paraphrases.</p><p>Identify the sources in <strong>each sentence that includes a </strong>reference to words or ideas of another author; do not wait until the end of your paragraph to cite these sources.</p><p>For advice on using sources appropriately and incorporating evidence to support claims, read "Using Evidence" at <a href="http://writingcenter.waldenu.edu/1321.htm" title="Using Evidence" target="_blank">http://writingcenter.waldenu.edu/1321.htm</a></p><p>See also "How and When to Cite in a Paper" at <a href="http://writingcenter.waldenu.edu/33.htm" title="How and When to Cite" target="_blank">http://writingcenter.waldenu.edu/33.htm</a>. Cite anything that includes actual statistics or figures (i.e., "50% of the population believes..."). Do not cite common knowledge, such as the fact that each day consists of 24 hours.</p><p>See <a href="http://academicanswers.waldenu.edu/a.php?qid=418033" title="How Do I Cite?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418033</a> and <a href="http://writingcenter.waldenu.edu/33.htm" title="How and When to Cite" target="_blank">http://writingcenter.waldenu.edu/33.htm</a>.</p>')
# term913 = Term.create(termname: 'Paraphrase', definition:'<p>A successful paraphrase is your own explanation or interpretation of another person&#39;s ideas. Paraphrasing in academic writing is an effective way to restate, condense, or clarify another author&#39;s ideas while also providing credibility to your own argument or analysis.</p><p>Paraphrase, summary, and synthesis are 3 different concepts. In contrast to a paraphrase, a<strong><span style="text-decoration: underline;"> summary</span></strong> is an unbiased and objective articulation of a source&#39;s overall argument and essential points. Summaries usually incorporate information from a full source or larger document. A <span style="text-decoration: underline;">synthesis</span> is a comparison and contrast of different sources that leads to a new interpretation. For more information, see these Writing Center links:</p><ul><li>"Effective Paraphrasing:" <a href="http://writingcenter.waldenu.edu/295.htm" title="Effective Paraphrasing" target="_blank">http://writingcenter.waldenu.edu/295.htm</a></li><li>"How do I paraphrase?" <a href="http://academicanswers.waldenu.edu/a.php?qid=386040" title="How do I paraphrase?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=386040</a></li><li>"Synthesis Writing": <a href="http://www.users.drew.edu/sjamieso/synthesis.htm" title="Synthesis Writing" target="_blank">http://www.users.drew.edu/sjamieso/synthesis.htm</a></li><li>"Synthesis": <a href="http://writingcenter.waldenu.edu/synthesis.htm" title="Synthesis" target="_blank">http://writingcenter.waldenu.edu/synthesis.htm</a></li><li>See also University of Victoria School of Nursing&rsquo;s &ldquo;<a href="http://www.uvic.ca/hsd/nursing/assets/docs/current/tutor/PP_2.pdf" title="Writing Workshop #2" target="_blank">Summary, Synthesis, Quotation, and Paraphrase</a>&rdquo;</li></ul>')
# term914 = Term.create(termname: 'Peer Review', definition:'<p>One of the first questions a reader must ask is whether the author is knowledgeable. <strong>Understanding different types of reference options helps scholars determine the best sources of apprpriate information.</strong> Graduate school assignments require the use of scholarly peer-reviewed journal articles because scholars and experts in the particular field have reviewed and approve them.</p><p>Government documents and websites that use .gov as their designated domain often provide statistical information, but most scholarly writing should depend upon peer-reviewed articles.</p><p>Avoid the following types of <strong><span style="text-decoration: underline;">non-peer reviewed</span></strong> articles:</p><ul><li>Trade Journals for specific industries</li><li>Popular Magazines that casually inform, entertain, or present an opinion</li><li>Newspapers which often are the first to report a newsworthy story, but do not go into any depth of research</li><li>Books and Ebooks that provide broad and foundational coverage of a topic but are soon out-of-date</li><li>Encyclopedias and handbooks that feature introductory overviews of topics at a superficial level</li></ul><p>See &ldquo;Distinguishing scholarly from non-scholarly periodicals: A checklist of criteria&rdquo; at the Cornell University Library <a href="http://guides.library.cornell.edu/content.php?pid=318840&amp;sid=2609009" title="Distinguishing Scholarly from Non-Scholarly Periodicals" target="_blank">http://guides.library.cornell.edu/content.php?pid=318840&amp;sid=2609009</a></p><p>See also <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Evaluating_a_source_%28Final%29.pdf" title="Choosing a Source" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Evaluating_a_source_%28Final%29.pdf</a></p><p>Consult the following list of international peer reviewed journals:</p><ul><li><a href="http://ft.csa.com/factsheets/supplements/lisa.php" title="Current Serials Source List" target="_blank">http://ft.csa.com/factsheets/supplements/lisa.php</a></li><li><a href="http://ft.csa.com/factsheets/lisa-set-c.php" title="Library and Information Science Abstracts" target="_blank">http://ft.csa.com/factsheets/lisa-set-c.php</a></li></ul>')
# term915 = Term.create(termname: 'Plagiarism', definition:'<p>See:</p><ul><li>"Plagiarism: What it is and how to avoid it": <a href="http://www.indiana.edu/~wts/pamphlets/plagiarism.pdf" title="Examples of Plagiarism" target="_blank">http://www.indiana.edu/~wts/pamphlets/plagiarism.pdf</a></li><li>"How to recognize plagiarism: Plagiarism test": <a href="http://www.indiana.edu/~istd/plagiarism_test.html" title="How to Recognize Plagiarism" target="_blank">http://www.indiana.edu/~istd/plagiarism_test.html</a></li><li>"Avoiding plagiarism": <a href="http://library.ucr.edu/?view=help/plagiarism2.html%20" title="What is Plagiarism?" target="_blank">http://library.ucr.edu/?view=help/plagiarism2.html</a></li><li>"Tutorial on Plagiarism": <a href="http://writingcenter.waldenu.edu/63.htm%20" title="Plagiarism" target="_blank">http://writingcenter.waldenu.edu/63.htm</a></li><li>"Interrogating Texts: Six Reading Habits to Develop in Your First Year at Harvard": <a href="http://hcl.harvard.edu/research/guides/lamont_handouts/interrogatingtexts.html" title="Six Reading Habits to Develop" target="_blank">http://hcl.harvard.edu/research/guides/lamont_handouts/interrogatingtexts.html</a></li></ul><p>Every Walden course includes free links to the Turnitin (TII) plagiarism prevention software and requires students to submit designated application assignments to their course Turnitin (TII) system for instructor evaluation.</p><p>As an addition service to help students avoid accidental plagiarism, Walden offers a separate system of <span style="text-decoration: underline;">optional, free, confidential</span> access to Turnitin originality reports within each class so that students can check and, if necessary, revise their own papers <span style="text-decoration: underline;">before</span> submitting them to instructors for evaluation and grading.</p><p>The Writing Center also allows students the free and confidential option of checking their own papers <span style="text-decoration: underline;">before</span> submitting them to instructors.</p><p>See <a href="http://academicguides.waldenu.edu/ASCtii" title="TurnItIn" target="_blank">http://academicguides.waldenu.edu/ASCtii</a>.</p>')
# term916 = Term.create(termname: 'Research', definition:'<p>For help with conducting and organizing your research projects, see the Walden Writing Center&#39;s "Organizing your research" guide at <a href="http://writingcenter.waldenu.edu/314.htm" title="Organizing Your Research" target="_blank">http://writingcenter.waldenu.edu/314.htm</a></p><p>See also The Writing Center&#39;s special series of podcasts on research and writing at this link: <a href="http://waldenwritingcenter.blogspot.com/2013/06/introducing-writecast-first-writing.html" title="Introducing WriteCast" target="_blank">http://waldenwritingcenter.blogspot.com/2013/06/introducing-writecast-first-writing.html</a></p>')
# term917 = Term.create(termname: 'Synthesize', definition:'<p>To <span style="text-decoration: underline;">synthesize</span>, a writer compares and contrasts different sources of information in order to yield a new interpretation. Unlike synthesis, a <span style="text-decoration: underline;">summary</span> is an unbiased and objective articulation of a source&#39;s overall argument and essential points, without further interpretation. Summaries usually incorporate information from a full source or larger document. A <span style="text-decoration: underline;">paraphrase</span>, on the other hand, is a restatement and explanation of another author&#39;s ideas. Scholars often use paraphrasing to support their arguments and analysis. For more information, see these resources:</p><p>"Synthesis Writing": <a href="http://www.users.drew.edu/sjamieso/synthesis.htm" title="Synthesis Writing" target="_blank">http://www.users.drew.edu/sjamieso/synthesis.htm</a></p><p>"Synthesis": <a href="http://writingcenter.waldenu.edu/synthesis.htm" title="Synthesis" target="_blank">http://writingcenter.waldenu.edu/synthesis.htm</a></p><p>"Effective Paraphrasing:" <a href="http://writingcenter.waldenu.edu/295.htm" title="Effective Paraphrasing" target="_blank">http://writingcenter.waldenu.edu/295.htm</a></p><p>"How do I paraphrase?": <a href="http://academicanswers.waldenu.edu/a.php?qid=386040" title="How do I paraphrase?" target="new">http://academicanswers.waldenu.edu/a.php?qid=386040</a></p><p>See also University of Victoria School of Nursing&rsquo;s &ldquo;Summary, Synthesis, Quotation, and Paraphrase&rdquo; <a href="http://www.uvic.ca/hsd/nursing/assets/docs/current/tutor/PP_2.pdf">http://www.uvic.ca/hsd/nursing/assets/docs/current/tutor/PP_2.pdf</a></p>')
# term918 = Term.create(termname: 'Grammar', definition:'<p>For tutorials on grammar and punctuation, see the Walden Writing Center&#39;s links at <a href="http://writingcenter.waldenu.edu/Grammar-and-ELL.htm" title="Grammar" target="_blank">http://writingcenter.waldenu.edu/Grammar-and-ELL.htm</a></p>')
# term919 = Term.create(termname: 'Point-of-view', definition:'<p>For advice on point-of-view and personal pronouns, see "Point-of-View in Academic Writing" at <a href="http://writingcenter.waldenu.edu/711.htm">http://writingcenter.waldenu.edu/711.htm</a></p>')
# term920 = Term.create(termname: 'Walden Expectations', definition:'<p><span style="text-decoration: underline;">Walden University Expectations about Scholarly Writing, Critical Analysis, and Academic Integrity</span></p><p>Walden University requires graduate students to demonstrate critical analysis and academic integrity through the quality of their scholarly writing. However, many new graduate students are unsure about a variety of graduate level writing requirements. To ensure your success in each course, please read the following information carefully and print a copy for quick reference. If you have any questions about these rules and expectations, please post them in the course &ldquo;Contact the Instructor&rdquo; link so that you and your classmates can share the information.</p><p><span style="text-decoration: underline;">Rubrics and Course Paper Templates</span>: Before beginning to write any assignment, students should click on the Course Information tab and study the rubrics for the Discussion, Application, and any Final Project assignments. Walden rubrics explain grading criteria and specify various levels of academic performance. Note that an essential component of each rubric is scholarly writing and following the form and style rules of the American Psychological Association (APA). Complete information on APA guidelines is available at the Walden Writing Center at <a href="http://writingcenter.waldenu.edu/APA.htm" title="What is APA Style?" target="_blank">http://writingcenter.waldenu.edu/APA.htm</a>. In addition to the rubrics, Walden requires students to use course paper templates to ensure consistency. Copies of these templates are available through the Walden Writing Center at <a href="http://writingcenter.waldenu.edu/57.htm" title="Paper Templates" target="_blank">http://writingcenter.waldenu.edu/57.htm</a>.</p><p><span style="text-decoration: underline;">Scholarly Analysis, APA Form and Style, In-text Citations, and Reference Lists:</span> Graduate level writing requires students to demonstrate an understanding of course readings, academic texts, and peer-reviewed articles, as well as an ability to apply that information outside of class. In addition, scholarly analysis depends upon the identification and use of authoritative, objective research rather than subjective opinion. Throughout the United States and Europe, scholars insist upon the use of references to identify the original sources of all information in academic documents. Therefore, the APA Manual includes guidance on avoiding plagiarism, self-plagiarism, and personal bias in addition to its chapters on the proper formatting of citations and references. See Chapters 6 and 7 of the APA Publications Manual, 6th edition for information on in-text citations and reference lists. For guidance about identifying and locating peer-reviewed articles, go to the Walden Library at <a href="http://academicanswers.waldenu.edu/a.php?qid=218893" title="What is peer review?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=218893</a>.</p><p><span style="text-decoration: underline;">Academic Integrity:</span> To avoid accidental plagiarism that might result in a failing grade, study the resources at the Walden Writing Center at <a href="http://writingcenter.waldenu.edu/63.htm" title="Plagiarism" target="_blank">http://writingcenter.waldenu.edu/63.htm</a> and then take the interactive, self-paced tutorial on Academic Integrity and avoiding plagiarism: <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Academic_Integrity_Student_04.24.13.swf" title="Academic Integrity" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Academic_Integrity_Student_04.24.13.swf</a>. (The download for the tutorial may take a few minutes.) Pay attention to the directions for using and interpreting the Turnitin (TII) originality report system that is available in every course as well as at the Walden Writing Center at <a href="http://writingcenter.waldenu.edu/57.htm" title="Paper Templates" target="_blank">http://writingcenter.waldenu.edu/57.htm</a>. Before you complete the tutorial, listen to the information on Walden&#39;s Academic Integrity Inquiry Process.</p><p>Note: The weekly instructions for both Walden discussion posts and application assignments require students to support claims with specific in-text citations and references to all resources. Again, Walden expects students to distinguish between fact and opinion, evaluate the academic quality of their sources, and acknowledge these sources in a new scholarly document (discussion post, application, or final project) as a matter of academic integrity.</p>')
# term921 = Term.create(termname: 'Social Change', definition:'<p>For inspiring examples of the University&#39;s mission of positive social change, watch the Walden Scholars of Change videos at <a href="http://www.waldenu.edu/About-Us/39004.htm" title="Scholars of Change" target="_blank">http://www.waldenu.edu/About-Us/39004.htm</a></p><p>See also <a href="http://www.waldenu.edu/about/who-we-are/data/vision-mission-statements" title="Vision and Mission Statements" target="_blank">http://www.waldenu.edu/about/who-we-are/data/vision-mission-statements</a></p><p>For advice on writing your own social change documents, see this Walden Writing Center presentation: <a href="http://writingcenter.waldenu.edu/Documents/Writing_for_Social_Change_Exploring_Perspectives.ppt" title="Writing for Social Change" target="_blank">http://writingcenter.waldenu.edu/Documents/Writing_for_Social_Change_Exploring_Perspectives.ppt</a></p>')
# term922 = Term.create(termname: 'Time Management', definition:'<p>See Cornell University&rsquo;s links to time management advice, templates, and videos: <a href="http://lsc.cornell.edu/Sidebars/Study_Skills_Resources/SKResources.html" title="Study Skills Resources and Videos" target="_blank">http://lsc.cornell.edu/Sidebars/Study_Skills_Resources/SKResources.html</a></p><p>See North Carolina State University&rsquo;s &ldquo;Working Smarter, Not Harder: Time Management for Graduate Students&rdquo; <a href="http://www.ncsu.edu/grad/preparing-future-leaders/career-skills/docs/TimeManagement.pdf" title="Working Smarter, Not Harder" target="_blank">http://www.ncsu.edu/grad/preparing-future-leaders/career-skills/docs/TimeManagement.pdf</a></p>')
# term923 = Term.create(termname: 'Thesis statement', definition:'<p>The <em>thesis statement</em> is the brief articulation of a paper&#39;s central argument and purpose. Every scholarly paper should have a thesis statement that is <strong>concise, specific, and arguable</strong><strong>. </strong>Strong thesis statements address specific intellectual questions, have clear positions, and use a structure that reflects the overall structure of the paper. See <a href="http://writingcenter.waldenu.edu/405.htm" title="Thesis Construction" target="_blank">http://writingcenter.waldenu.edu/405.htm</a></p><p>For a video about writing persuasively in an academic paper, see <a href="http://www.youtube.com/watch?v=X7siKD0lmfg" title="Writing Persuasively in Academic Writing" target="_blank">http://www.youtube.com/watch?v=X7siKD0lmfg</a></p>')
# term924 = Term.create(termname: 'Academic integrity', definition:'<p>After you read <a href="http://catalog.waldenu.edu/content.php?catoid=90&amp;navoid=20872" title="Code of Conduct" target="_blank">Student Code of Conduct</a> in the Walden University Student Catalog, look for extra information on Academic Integrity. Using scholarly evidence appropriately requires citing every original source of information. Failure to cite sources could result in a charge of <a href="http://writingcenter.waldenu.edu/63.htm" title="Plagiarism" target="_blank">plagiarism</a> or a violation of academic integrity. Watch this "Academic Integrity and Code of Conduct at Walden University" video, paying special attention to the information on Walden&#39;s Academic Integrity Inquiry Process: <a href="http://writingcenter.waldenu.edu/AcadInt.swf" title="Academic Integrity and Code of Conduct at Walden University" target="_blank">http://writingcenter.waldenu.edu/AcadInt.swf</a></p><p>WARNING: Walden requires that students acknowledge each source of information that they use in every discussion post, application, final project, and dissertation! Avoid accidental plagiarism that might result in a failing grade for an assignment or the entire course. See the "Plagiarism" link of the Writing Center: <a href="http://writingcenter.waldenu.edu/63.htm" title="Plagiarism" target="_blank">http://writingcenter.waldenu.edu/63.htm</a> <br /> Take the interactive, self-paced tutorial on Academic Integrity: <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Academic_Integrity_Student_04.24.13.swf" title="Academic Integrity" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Academic_Integrity_Student_04.24.13.swf</a> (The download may take a few minutes.)</p><p>Pay attention to the directions for using and interpreting the Turnitin originality report system that is available in every course as well as at the Walden Writing Center at <a href="http://academicguides.waldenu.edu/ASCtii" title="TurnItIn" target="_blank">http://academicguides.waldenu.edu/ASCtii</a></p><p>See the "Academic Integrity" link in the menu on the left side of every course. Note that academic integrity violations include, but are not limited to:</p><ul><li>Plagiarism</li><li>Cheating</li><li>Providing False Information</li><li>Copyright Violation</li><li>Misrepresentation of Credentials</li><li>Theft or Damage of Property</li><li>Alteration of University Documents</li></ul>')
# term925 = Term.create(termname: 'Academic goals', definition:'<p>To help you identify and reach your academic goals, Academic Advisors are available from 7:00 a.m. - 7:00 p.m. CST Monday-Friday. <br /> <strong>Phone:</strong> 1-800-WALDENU (1-800-925-3368) and press option 3. <br /> Public Policy and Administration Masters Advising Advisors at <a href="mailto:sppmaadvising@waldenu.edu" title="email address for academic advising">sppmaadvising@waldenu.edu</a></p><p>The Student Support Team can answer your general technical, financial, materials, and registrar-related inquiries 24 hours a day, 7 days a week. Contact student support advisors at <a href="mailto:support@waldenu.edu" title="email address for Student Support">support@waldenu.edu</a>.</p>')
# term926 = Term.create(termname: 'APA', definition:'<p>The American Psychological Association (APA) sets the standards for scholarly writing in the Social Sciences. Although APA format rules differ from those of the Modern Language Association (MLA) for scholars in the Humanities, both professional associations emphasize consistency in citing and listing references. To ensure correct citation and reference format as well as the other protocols of scholarly writing, such as avoiding bias, Walden University requires all students to follow the guidelines of the APA Manual 6th edition: <a href="http://www.apastyle.org/manual/" title="APA Style Guide" target="_blank">http://www.apastyle.org/manual/</a></p><p>See "APA Style" at <a href="http://writingcenter.waldenu.edu/APA.htm" title="Writing Style APA page" target="_blank">http://writingcenter.waldenu.edu/APA.htm</a></p>')
# term927 = Term.create(termname: 'Audience', definition:'<p>Click on this Walden Writing Center link for information and two practice exercises on audience: <a href="http://writingcenter.waldenu.edu/1509.htm" title="Audience" target="_blank">http://writingcenter.waldenu.edu/1509.htm</a></p><p>For further advice on writing for a special audience, see the "Audience" slides in this Walden Writing Center presentation on social change: <a href="http://writingcenter.waldenu.edu/Documents/Writing_for_Social_Change_Exploring_Perspectives.ppt" title="Writing for Social Change" target="_blank">http://writingcenter.waldenu.edu/Documents/Writing_for_Social_Change_Exploring_Perspectives.ppt</a></p>')
# term928 = Term.create(termname: 'Bias', definition:'<p>Avoid bias. Scholarly writing requires objectivity, acknowledgement of alternative points of view and respect for diversity. See: Purdue Online Writing Lab guide: <a href="https://owl.english.purdue.edu/owl/resource/608/05/" title="Stereotypes and Biased Language" target="_blank"><span style="text-decoration: underline;">https://owl.english.purdue.edu/owl/resource/608/05/</span></a></p><p>Watch the "Using Sensitive Language and Avoiding Bias in Scholarly Writing" video and read these Writing Center guidelines: <a href="http://writingcenter.waldenu.edu/774.htm" title="Avoiding Bias" target="_blank">http://writingcenter.waldenu.edu/774.htm</a></p><p>To test your unconscious bias while checking your skills at distinguishing between fact and opinion, see: <a href="http://highered.mcgraw-hill.com/sites/007256380x/student_view0/part4/chapter13/supplemental_exercises_1.html" title="Fact and Opinion, Exercise 1" target="_blank">http://highered.mcgraw-hill.com/sites/007256380x/student_view0/part4/chapter13/supplemental_exercises_1.html</a></p>')
# term929 = Term.create(termname: 'Communication', definition:'<p>Read or listen to the University of Waterloo&#39;s "Effective communication: barriers and strategies" <a href="https://uwaterloo.ca/centre-for-teaching-excellence/teaching-resources/teaching-tips/communicating-students/telling/effective-communication-barriers-and-strategies" title="University of Waterloo Effective Communications" target="_blank">https://uwaterloo.ca/centre-for-teaching-excellence/teaching-resources/teaching-tips/communicating-students/telling/effective-communication-barriers-and-strategies</a></p><p>Every Walden student should read Clemson University&#39;s "Communication Strategies for International Graduate Students: Surviving and Thriving in American Academia" <a href="http://career.clemson.edu/michelin_career_center/students/planning/handouts/Communication_for_Graduate_Students_in_American_Academia.pdf" title="Clemson University Communications Strategies" target="_blank">http://career.clemson.edu/michelin_career_center/students/planning/handouts/Communication_for_Graduate_Students_in_American_Academia.pdf</a></p>')
# term930 = Term.create(termname: 'Critical Thinking', definition:'<p>Watch the <a href="http://www.ProCon.org" title="www.ProCon.org" target="_blank">www.ProCon.org</a> critical thinking video <a href="http://www.youtube.com/watch?v=GzV1pNQUX5s" title="Critical Thinking Explained" target="_blank">Critical Thinking Explained</a></p><p>Read <a href="http://www.criticalthinking.org/pages/critical-thinking-in-everyday-life-9-strategies/512" title="Critical Thinking in Everyday Life" target="_blank">Critical Thinking in Everyday Life</a></p><p>Consider &ldquo;<a href="http://www.criticalthinking.org/pages/becoming-a-critic-of-your-thinking/605" title="Becoming a Critic Of Your Thinking" target="_blank">Becoming a Critic of Your Thinking</a>&rdquo;</p><p>The Art of Close Reading (Parts 1-3):<br /> <a href="http://www.criticalthinking.org/pages/the-art-of-close-reading-part-one/509" title="The Art of Close Reading (Part One)" target="_blank">The Art of Close Reading (Part One)</a></p><p>Watch Grandmaster Chess Champion Maurice Ashley&rsquo;s &ldquo;<a href="http://ed.ted.com/lessons/working-backward-to-solve-problems-maurice-ashley#review" title="Working backward to solve problems" target="_blank">Working Backward to Solve Problems</a>&rdquo; (Retrograde Analysis) TED Talk<strong> </strong></p>')
# term931 = Term.create(termname: 'Rubrics', definition:'<p>Complete information on the grading rubrics for course discussion posts, application assignments, and final projects is available in the "Course Information" tab for every course. In the Foundations of Graduate Study course,</p><p><span style="text-decoration: underline;">Discussion Assignment</span> rubrics focus upon four criteria: Responsiveness to the Discussion Question, Content Knowledge, Quality of Writing, and Contribution to the Discussion.</p><p><span style="text-decoration: underline;">Application Assignment</span> rubrics focus upon three criteria: Responsiveness to Paper or Writing Assignment, Content Knowledge, and Quality of Writing.</p>')
# term932 = Term.create(termname: 'Writing Center', definition:'<p>The Walden Writing Center offers excellent advice about every step of the writing process at <a href="http://writingcenter.waldenu.edu/Writing-Resources.htm" title="Writing Resources" target="_blank">http://writingcenter.waldenu.edu/Writing-Resources.htm</a></p><p>For a schedule of Writing Center Webinars on special topics, see <a href="http://writingcenter.waldenu.edu/415.htm#joining" title="Joining the Conversation" target="_blank">http://writingcenter.waldenu.edu/415.htm#joining</a></p><p>Multilingual students will find special assistance at <a href="http://writingcenter.waldenu.edu/1544.htm" title="Multilingual Students" target="_blank">http://writingcenter.waldenu.edu/1544.htm</a></p><p>For Writing Center policies, see <a href="http://writingcenter.waldenu.edu/825.htm" title="Writing Center Policies" target="_blank">http://writingcenter.waldenu.edu/825.htm</a></p>')
# term933 = Term.create(termname: 'Course Paper Templates', definition:'<p>Watch the video about using course paper templates for graduate-level courses: <a href="http://www.screencast.com/t/cfQn09QYfD" title="Using Templates" target="_blank">http://www.screencast.com/t/cfQn09QYfD</a></p><p>For step-by-step instructions on various MS Word functions such as fixing formatting, adjusting pagination, and creating a Table of Contents, see <a href="http://writingcenter.waldenu.edu/1175.htm" title="Creating Tables of Contents" target="_blank">http://writingcenter.waldenu.edu/1175.htm</a></p><p>For help with formatting papers, see <a href="http://academicanswers.waldenu.edu/a.php?qid=442539" title="Formatting Papers" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=442539</a></p>')
# term934 = Term.create(termname: 'Grade Comments', definition:'<p>In addition to posting grade points, most Walden instructors usually add comments in the gradebook, but some use an attached PowerPoint presentation or video link to explain their evaluations. Students who read their instructor&rsquo;s comments are better able to improve their grades on subsequent assignments. Be sure to take advantage of this extra guidance.</p><p>Some instructors also use the MS Word &ldquo;Track Changes&rdquo; system to add individualized evaluation comments to student documents. This 15-minute video explains how to find and read Track Change grade comments:</p><p><a href="https://www.youtube.com/watch?v=O5OrMmCc3_4" title="Track Changes and Copyediting in Word 2013" target="_blank">https://www.youtube.com/watch?v=O5OrMmCc3_4</a></p>')
# term935 = Term.create(termname: 'Turnitin', definition:'<p>Walden students are required to submit designated application assignments to their course Turnitin (TII) system for instructor evaluation.</p><p>To help students avoid accidental plagiarism, Walden offers a separate system of <span style="text-decoration: underline;">optional, free, confidential</span> access to Turnitin (TII) originality reports within each class so that students can check and, if necessary, revise their own papers <span style="text-decoration: underline;">before</span> submitting them to instructors for evaluation and grading.</p><p>The Writing Center also allows students the free and confidential option of checking their own papers <span style="text-decoration: underline;">before</span> submitting them to instructors.</p><p>See <a href="http://academicguides.waldenu.edu/ASCtii" title="ASC TurnItIn" target="_blank">http://academicguides.waldenu.edu/ASCtii</a></p>')
# term936 = Term.create(termname: 'Reference List Format', definition:'<p>A <a href="http://writingcenter.waldenu.edu/353.htm" title="reference list" target="_blank">reference list</a> includes the publication information for the sources of information in a paper. While the American Psychological Association (APA) uses the term <em>reference list</em>, other publication style manuals use the terms <em>bibliography</em> or <em>works cited.</em></p><p>Double-space the reference list and use a hanging indent for each reference. See <a href="http://academicguides.waldenu.edu/ASCsoftware/word" title="ASC Software Assistance: Microsoft Word" target="_blank">http://academicguides.waldenu.edu/ASCsoftware/word</a></p><p>Organize each reference alphabetically by the author&#39;s last name.</p><p>The reference list must include every citation in the paper, but nothing else.</p><p><strong>Do not merely copy the reference list of another author without reading each work and adding new sources! Doing so would be a form of plagiarism and a violation of academic integrity!</strong></p><p>See <a href="http://academicanswers.waldenu.edu/a.php?qid=418146" title="What is a reference list?" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418146</a></p>')

# termlist497 = Termlist.create(term_id: '497', course_id: '13')
# termlist498 = Termlist.create(term_id: '498', course_id: '13')
# termlist499 = Termlist.create(term_id: '499', course_id: '13')
# termlist500 = Termlist.create(term_id: '500', course_id: '13')
# termlist501 = Termlist.create(term_id: '501', course_id: '13')
# termlist502 = Termlist.create(term_id: '502', course_id: '13')
# termlist503 = Termlist.create(term_id: '503', course_id: '13')
# termlist504 = Termlist.create(term_id: '504', course_id: '13')
# termlist505 = Termlist.create(term_id: '505', course_id: '13')
# termlist506 = Termlist.create(term_id: '506', course_id: '13')
# termlist507 = Termlist.create(term_id: '507', course_id: '13')
# termlist508 = Termlist.create(term_id: '508', course_id: '13')
# termlist509 = Termlist.create(term_id: '509', course_id: '13')
# termlist510 = Termlist.create(term_id: '510', course_id: '13')
# termlist520 = Termlist.create(term_id: '520', course_id: '13')
# termlist511 = Termlist.create(term_id: '511', course_id: '13')
# termlist512 = Termlist.create(term_id: '512', course_id: '13')
# termlist513 = Termlist.create(term_id: '513', course_id: '13')
# termlist514 = Termlist.create(term_id: '514', course_id: '13')
# termlist515 = Termlist.create(term_id: '515', course_id: '13')
# termlist516 = Termlist.create(term_id: '516', course_id: '13')
# termlist517 = Termlist.create(term_id: '517', course_id: '13')
# termlist518 = Termlist.create(term_id: '518', course_id: '13')
# termlist519 = Termlist.create(term_id: '519', course_id: '13')
# termlist521 = Termlist.create(term_id: '521', course_id: '13')
# termlist522 = Termlist.create(term_id: '522', course_id: '13')
# termlist523 = Termlist.create(term_id: '523', course_id: '13')
# termlist524 = Termlist.create(term_id: '524', course_id: '13')
# termlist525 = Termlist.create(term_id: '525', course_id: '13')
# termlist526 = Termlist.create(term_id: '526', course_id: '13')
# termlist527 = Termlist.create(term_id: '527', course_id: '13')
# termlist528 = Termlist.create(term_id: '528', course_id: '13')
# termlist529 = Termlist.create(term_id: '529', course_id: '13')
# termlist530 = Termlist.create(term_id: '530', course_id: '13')
# termlist531 = Termlist.create(term_id: '531', course_id: '13')
# termlist532 = Termlist.create(term_id: '532', course_id: '13')
# termlist533 = Termlist.create(term_id: '533', course_id: '13')

# term950 = Term.create(termname: 'thesis statement', definition: '<p>The <em>thesis statement</em> is the brief articulation of your paper&#39;s central argument and purpose. You might hear it referred to as simply a &#34;thesis.&#34; Every scholarly paper should have a thesis statement, and strong thesis statements are <strong>concise, specific, and arguable.</strong> <em>Concise</em> means the thesis is short: perhaps one or two sentences for a shorter paper. <em>Specific</em> means the thesis deals with a narrow and focused topic, appropriate to the paper&#39;s length. <em>Arguable</em> means that a scholar in your field could (or perhaps already has&#33;) disagreed.</p><p>Strong thesis statements address specific intellectual questions, have clear positions, and use a structure that reflects the overall structure of the paper.</p> <p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/405.htm" target="_blank">http://writingcenter.waldenu.edu/405.htm</a></p><p>For a video about writing persuasively in an academic paper, see <a href="http://www.youtube.com/watch?v=X7siKD0lmfg" target="_blank">http://www.youtube.com/watch?v=X7siKD0lmfg</a></p>.')
# term951 = Term.create(termname: 'outline', definition: '<p>Outlining a paper before you begin writing helps ensure your paper has a clear overall structure and forward momentum. A strong outline details each topic and subtopic in your paper, organizing these points so that they build your <a href="http://writingcenter.waldenu.edu/738.htm" target="_blank">argument</a> toward its <a href="http://writingcenter.waldenu.edu/320.htm" target="_blank">conclusion</a>. Writing from an outline can help you avoid tangents, <a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Logical_Fallacies..pdf" target="_blank">logical fallacies</a>, and underdeveloped <a href="http://writingcenter.waldenu.edu/900.htm" target="_blank">paragraphs</a>.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/318.htm" target="_blank">http://writingcenter.waldenu.edu/318.htm</a></p><p>For a video about writing persuasively in an academic paper, see <a href="http://www.youtube.com/watch?v=X7siKD0lmfg" target="_blank">http://www.youtube.com/watch?v=X7siKD0lmfg</a></p>')
# term952 = Term.create(termname: 'Argumentation-Persuasion', definition: '<p>Although reflection and summary play a role in academic writing, your papers need to be founded in analysis and critique. The documents linked below will help you learn how to develop a strong argument in a paper and move beyond basic summary.</p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Constructing_Arguments.pdf" target="_blank">Constructing Arguments</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Compare_and_Contrast_Essay.pdf" target="_blank">Compare and Contrast</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Logical_Fallacies..pdf" target="_blank">Logical Fallacies</a></p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/What_to_Assume.pdf" target="_blank">What to Assume</a></p><p>Learning to spot a strong argument in what you read can help you become better at constructing your own arguments when you write. Use the handout linked below to learn how to become an expert at reading for argument.</p><p><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf" target="_blank">Identifying Argument</a></p>')
# term953 = Term.create(termname: 'logos', definition: '<p>&#34;Your main concern in an argumentation-persuasion essay should be with the <em>logos</em>, or <strong>soundness</strong> of your argument: the facts, statistics, examples, and authoritative statements you gather to support your viewpoint.&#34; (Nadell, Langan & Comodromos, 2009, p. 457)</p>')
# term954 = Term.create(termname: 'pathos', definition: '<p>&#34;Sensitivity to the pathos, or the <strong>emotional power of language</strong>, is another key consideration for writers of argumentation-persuasion essays. <em>Pathos</em> appeals to readers’ needs, values, and attitudes, encouraging them to commit themselves to a viewpoint or course of action.&#34; (Nadell, Langan & Comodromos, 2009, p. 457)</p>')
# term955 = Term.create(termname: 'ethos', definition: '<p>&#34;...whenever you write an argumentation-persuasion essay, you should establish your <em>ethos</em>, or <strong>credibility</strong> and <strong>reliability</strong>. You cannot expect readers to accept or act on your viewpoint unless you convince them that you know what you’re talking about and that you’re worth listening to. You will come across as knowledgeable and trustworthy if you present a logical, reasoned argument that takes opposing views into account.&#34; (Nadell, Langan & Comodromos, 2009, p. 458)</p>')
# term956 = Term.create(termname: 'locate resources', definition: '<p>There are many different types of resources. <strong>Understanding resource types helps you determine the best source needed for your information purpose</strong>.</p><p>Below is a list of the most commonly cited resources used for research.</p><p>Scholarly Peer-Reviewed Journals</p><ul><li>Articles are reviewed and approved for publication by scholars/experts in the field.</li></ul><p>Trade Journals</p><ul><li>Articles are written and read by professionals in a specific industry.</li></ul><p>Popular Magazines</p><ul><li>Articles are intended to casually inform, entertain, or present an opinion.</li></ul><p>Newspapers</p><ul><li>Published daily, newspapers are often the first to report a newsworthy story.</li></ul><p>Books and Ebooks</p><ul><li>Books provide broad and foundational coverage of a topic.</li></ul><p>Encyclopedias & Handbooks</p><ul><li>Encyclopedias & handbooks feature introductory overviews of topics.</li></ul><p>Government Websites</p><ul><li>Government websites have .gov as their designated domain. They are often a great place to search for statistical information.</li></ul><p>Pay attention to the types of sources that arise from your keyword searches.</p><p>For more information, see <br/><a href="http://libraryguides.waldenu.edu/keyword" target="_blank">http://libraryguides.waldenu.edu/keyword</a> and<br/><a href="http://libraryguides.waldenu.edu/evaluating" target="_blank">http://libraryguides.waldenu.edu/evaluating</a></p>')
# term957 = Term.create(termname: 'evaluate  information', definition: '<p><em>Critical reading</em> generally refers to reading in a scholarly context, with an eye toward identifying a text or author&#39;s viewpoints, arguments, evidence, potential biases, and conclusions.  Critical reading means <strong>evaluating what you have read using your knowledge as a scholar</strong>.  You may look at the quality of the writing, the quality of the research, and the persuasiveness of the arguments, among other things. Critical reading is an active process by which a student rigorously and systematically questions the literature with the goal of assessing credibility and validity.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/454.htm" target="_blank">http://writingcenter.waldenu.edu/454.htm</a></p>')
# term958 = Term.create(termname: 'APA', definition: '<p>When you are writing as a student, you are entering into <a href="http://waldenwritingcenter.blogspot.com/2012/08/welcome-to-academic-writing-community.html" target="_blank">a new writing community</a>; just as you would need to learn the customs and rules of any new country you visit, you need to learn the customs and rules of academic writing. These guidelines will be different than guidelines for writing in other environments (such as letters to friends, e-mails to coworkers, or writing for blogs). The academic community has its own rules. These standards help writers</p><p><ul><li>Improve clarity</li><li>Avoid distracting the reader</li><li>Indicate sources for evidence</li><li>Provide uniform formatting</li></ul></p><p>To learn more about transitioning into academic writing, view <a href="http://writingcenter.waldenu.edu/415.htm#joining" target="_blank">&#34;Joining the Conversation: Relearning the Conventions of Academic Writing.&#34;</a> Remember that it’s your job as the author to engage your readers, and inconsistencies in formatting and citations distract the reader from the content of your writing. By using APA style, you allow your readers to focus on the ideas you are presenting, rather than the presentation itself. You will be learning more about APA style as you progress toward your degree.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/APA.htm" target="_blank">http://writingcenter.waldenu.edu/APA.htm</a></p>')
# term959 = Term.create(termname: 'critical reading', definition: '<p><em>Critical reading</em> generally refers to reading in a scholarly context, with an eye toward identifying a text or author&#39;s viewpoints, arguments, <a href="http://academicanswers.waldenu.edu/a.php?qid=413848" target="_blank">evidence</a>, potential biases, and conclusions.  Critical reading means <strong>evaluating what you have read using your knowledge as a scholar</strong>. You may look at the quality of the writing, the quality of the research, and the persuasiveness of the arguments, among other things.</p><p>For more information, see<br/> <a href="http://writingcenter.waldenu.edu/454.htm" target="_blank">http://writingcenter.waldenu.edu/454.htm</a></p>')
# term960 = Term.create(termname: 'Prewriting', definition: '<p>Writing is a process, not an event. Taking the time to prepare for your writing will help make the writing process smooth and efficient. The techniques of prewriting can help ensure that your page does not stay blank for long.  All of these techniques should be used simultaneously—you will often find yourself switching back and forth between <a href="http://writingcenter.waldenu.edu/788.htm" target="_blank">brainstorming</a>, <a href="http://writingcenter.waldenu.edu/454.htm" target="_blank">critical reading</a>, <a href="http://writingcenter.waldenu.edu/314.htm" target="_blank">organizing</a>, and fighting off <a href="http://writingcenter.waldenu.edu/504.htm" target="_blank">writer’s block</a> as you begin a new assignment.</p><p>For more information, see<br/> <a href="http://writingcenter.waldenu.edu/325.htm" target="_blank">http://writingcenter.waldenu.edu/325.htm</a></p>')
# term961 = Term.create(termname: 'credibility', definition: '<p>This is a question of expertise and when evaluating scholarly literature credibility is paramount. One of the first questions a reader must ask is whether the work is written by someone who is knowledgeable about the subject.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Evaluating_a_source_%28Final%29.pdf" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Evaluating_a_source_%28Final%29.pdf</a></p>')
# term962 = Term.create(termname: 'relevant', definition: '<p>&#34;It makes no difference how riveting material might be; if it doesn&#39;t <em>relate directly</em> to the essay&#39;s central point the evidence should be eliminated.&#34; (Nadell, Langan & Comodromos, 2009, p. 48)</p>')
# term963 = Term.create(termname: 'persuasive', definition: '<p>&#34;Besides encouraging acceptance of an opinion, persuasion often urges readers (or another group) to commit themselves to a course of action.&#34;(Nadell, Langan & Comodromos, 2009, p. 455)</p>')
# term964 = Term.create(termname: 'evidence', definition: '<p>Evidence is the specific details you gather from textbooks, journal articles, and other course readings. There are <strong>specific times you will want to use evidence</strong> and thus will need to cite your sources<ul><li>To support your thesis</li><li>To give evidence of a main idea</li><li>To strengthen your argument</li><li>To illustrate a point</li></ul></p><p>Using evidence appropriately also means citing your sources every time you use information that is not originally your own. Whether paraphrasing or quoting, you must use in-text citations. <a href="http://writingcenter.waldenu.edu/33.htm" target="_blank">Learn more about how to cite your sources from the Writing Center&#39;s website</a>.</p><p>Knowing how to incorporate evidence can be tricky, so see the Writing Center&#39;s website for more tips on using your sources at <a href="http://writingcenter.waldenu.edu/1321.htm" target="_blank">http://writingcenter.waldenu.edu/1321.htm</a></p>')
# term965 = Term.create(termname: 'anecdotes', definition: '<p>Sometimes professors ask students to reflect on personal experiences within a paper. Most of the time, however, including examples or anecdotes from your life can weaken your academic writing. Instead, use academic sources to introduce your topic and then help support your assertions. If your professor does ask for personal experiences, limit them to experiences that directly relate to the argument in your paper.</p><p>For more information, see <a href="http://writingcenter.waldenu.edu/730.htm" target="_blank">http://writingcenter.waldenu.edu/730.htm</a></p>')
# term966 = Term.create(termname: 'essay', definition: '<p>You’ll find some great tips about every step in the writing process at <a href="http://writingcenter.waldenu.edu/Writing-Resources.htm" target="_blank">http://writingcenter.waldenu.edu/Writing-Resources.htm</a>, including a presentation entitled &#34;Walden Writing Center: Lifecycle of a Paper.&#34;</p><p>To download an undergraduate writing template, see template #13 at<br/><a href="http://writingcenter.waldenu.edu/57.htm" target="_blank">http://writingcenter.waldenu.edu/57.htm</a></p>')
# term967 = Term.create(termname: 'Block paragraph', definition: '<p>In a block paragraph, all the lines start on the left margin. For your paper, you should <strong>indent the first line of each paragraph</strong>.</p><p>To download an undergraduate writing template, see template #13 at <a href="http://writingcenter.waldenu.edu/57.htm" target="_blank">http://writingcenter.waldenu.edu/57.htm</a></p><p>To view a video about using templates, go to <a href="http://screencast.com/t/Kq55Owg0mq" target="_blank">http://screencast.com/t/Kq55Owg0mq</a></p>')
# term968 = Term.create(termname: 'Word Processing', definition: '<p>Writers commonly use Microsoft (MS) Word to write academic papers. MS Word is also the program that Walden prefers students write assignments in and the program that the Writing Center tutors use to provide feedback to students. As such, students will need to learn how to complete various functions in MS Word to format papers and make editing easier.</p><p>The Writing Center offers step-by-step instructions for performing various MS Word functions, like fixing formatting, tweaking pagination, and creating a Table of Contents page. Additionally, the Writing Center has created tutorials to accompany these instructions. Similarly, the Writing Center’s <a href="http://waldenwritingcenter.blogspot.com/" target="_blank">blog</a> often addresses technical issues dealing with MS Word.</p><p>For more information, see <br/><a href="http://writingcenter.waldenu.edu/1175.htm" target="_blank">http://writingcenter.waldenu.edu/1175.htm</a></p><p>For help with formatting your paper, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=442539" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=442539</a></p>')
# term969 = Term.create(termname: 'Writing  Center', definition: '<p>For help on grammar, see<br/> <a href="http://writingcenter.waldenu.edu/Grammar-and-ELL.htm" target="_blank">http://writingcenter.waldenu.edu/Grammar-and-ELL.htm</a></p><p>For help with formatting, see<br/> <a href="http://academicanswers.waldenu.edu/a.php?qid=442539" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=442539</a></p>')
# term970 = Term.create(termname: 'spell check', definition: '<p>Spell check is an automated program in Word that will check the grammar and spelling of a document. This program helps writers avoid small typos, spelling errors, and grammatical mistakes. It is not foolproof, though, so you should always carefully proofread your document.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/Documents/Spell_Check.pdf" target="_blank">http://writingcenter.waldenu.edu/Documents/Spell_Check.pdf</a></p>')
# term971 = Term.create(termname: 'summary', definition: '<p>A <em>summary</em> is an unbiased and objective articulation of a source&#39;s overall argument and essential points. Summaries usually incorporate information from a full source or larger document.</p><p>Here is an example of a clear and succinct summary:</p><p>Jones (2010) argued that electronic medical records (EMRs) make care for patients more reliable and thorough.  The study cited many instances of medication mismanagement and lack of treatment records that could have been avoided with consistently applied EMRs (Jones, 2010).  The evidence in the article is persuasive, but Jones did not address the training and implementation costs of such systems.</p><p>In this excerpt, <strong>the student clearly explains the source&#39;s argument</strong> (that EMRs increase quality of care) <strong>and its evidence</strong> (the inconsistent level of care associated with analog records). In addition, the student points out a weakness in Jones&#39; argument.</p>')
# term972 = Term.create(termname: 'quotation', definition: '<p>A direct quotation is a phrase taken word for word from an original source and used within your paper. Quotation marks, as well as year and page number, indicate that you are using phrasing that is not your own.</p><p>Example:</p><p>According to Shiell (2013), &#34;This is a direct quotation because it is word for word the same as what I said&#34; (p. 47).</p><p>For more information about using quotations, see<br/> <a href="http://writingcenter.waldenu.edu/1321.htm" target="_blank">http://writingcenter.waldenu.edu/1321.htm</a></p><p>For more information about properly citing sources, see<br/><a href="http://academicanswers.waldenu.edu/a.php?qid=413786" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=413786</a></p>"')
# term973 = Term.create(termname: 'Fragments', definition: '<p>A <em>sentence fragment</em> occurs when a sentence is missing either a <a href="http://writingcenter.waldenu.edu/233.htm" target="_blank">subject</a> (usually a noun) or a <a href="http://writingcenter.waldenu.edu/233.htm" target="_blank">predicate</a> (the sentence&#39;s action).</p><p><strong><em>Example</em></strong>:  Shows no improvement in any of the vital signs.</p><p>The sentence above is a fragment, since there is no subject (Who shows no improvement?).  Fragments can be corrected by identifying the missing element and including it.<p><p><strong><em>Example</em></strong>:  <strong>The patient</strong> shows no improvement in any of the vital signs.</p><p>Here is an example of a fragment with a missing predicate, or action:</p><p><strong><em>Example</em></strong>:  The doctors, who were using peer-reviewed research articles that contributed to the body of knowledge in their fields, which was obstetrics.</p><p>Notice here that although the sentence is quite long, it still contains no action (What are the doctors doing?). Once identified, the sentence can be corrected easily.</p><p><strong><em>Example</em></strong>:  The doctors, who were using peer-reviewed research articles that contributed to the body of knowledge in their field, <strong>improved their knowledge of</strong> obstetrics.</p>')
# term974 = Term.create(termname: 'Parallelism', definition: '<p>Parallel ideas must be presented in parallel grammatical form. Parallel grammatical form means that each part of a sentence uses the same grammatical structure, as in the following examples:</p><p><strong><em>Between and And</em></strong></p><p><strong><em>Incorrect</em></strong>: We debated the difference between <strong>the weather in Minnesota in the winter</strong> and <strong>how hot it is in the summer</strong>.</p><p><strong><em>Correct</em></strong>:  We debated the difference between <strong>the weather in Minnesota in the winter</strong> and <strong>the weather in Minnesota in the summer</strong>.</p><p><strong><em>Not Only and But Also</em></strong></p><p><strong><em>Incorrect</em></strong>:  It was surprising not only <strong>that the house sold</strong>, but also <strong>it sold well over the asking price</strong>.</p><p><strong><em>Correct</em></strong>:  It was surprising not only <strong>that the house sold</strong> but also that <strong>it sold well over the asking price</strong>.</p><p><strong>Parallel Construction in a Series</strong></p><p>Sentences with series, or lists, require particular attention to parallel construction.</p><p><strong><em>Incorrect</em></strong>:  This paper will address <strong>No Child Left Behind, how to teach effectively, and instructing with multimedia aids</strong>.</p><p>We must correct this sentence so that each element in the list has the same grammatical form:</p><p><strong><em>Correct</em></strong>: The paper will address No Child Left Behind <strong>benchmarks</strong>, effective teaching <strong>strategies</strong>, and multimedia instructional <strong>aids</strong>.</p><p>Now, the series has parallel elements (<em>benchmarks</em>, <em>strategies</em>, and <em>aids</em> are all plural nouns).</p>')
# term975 = Term.create(termname: 'Milestone', definition: '<p><strong>Milestone 1:</strong> Create a thesis and outline of your persuasive essay.</p><p><strong>Milestone 2:</strong> Write the first draft of your persuasive essay.</p><p><strong>Milestone 3:</strong> Revise and write the second draft of your persuasive essay.</p><p><strong>Milestone 4:</strong> Critique a peer&#39;s persuasive essay.</p><p><strong>Milestone 5:</strong> Submit final draft of your persuasive essay.</p>')
# term976 = Term.create(termname: 'draft', definition: '<p>Here are some great resources to get you started.<ul><li>Paragraph structure and content: <a href="http://writingcenter.waldenu.edu/900.htm" target="_blank">http://writingcenter.waldenu.edu/900.htm</a></li><li>Prewriting: <a href="http://writingcenter.waldenu.edu/325.htm" target="_blank">http://writingcenter.waldenu.edu/325.htm</a></li><li>Brainstorming: <a href="http://writingcenter.waldenu.edu/788.htm" target="_blank">http://writingcenter.waldenu.edu/788.htm</a></li><li>Organizing your research: <a href="http://writingcenter.waldenu.edu/314.htm" target="_blank">http://writingcenter.waldenu.edu/314.htm</a></li><li>The writing process: <a href="http://waldenwritingcenter.blogspot.com/2013/06/introducing-writecast-first-writing.html" target="_blank">http://waldenwritingcenter.blogspot.com/2013/06/introducing-writecast-first-writing.html</a> (podcast)</li></ul></p>')
# term977 = Term.create(termname: 'clarity', definition: '<p>Writing is different than speaking. In speaking, you might use metaphors or clichés to get a point across. You might go off on tangents and use long phrases instead of addressing an issue head-on. In academic writing, you do not have the luxury of eye contact, expression, and follow-up to clarify meaning. Therefore, you need to express yourself in the clearest and most direct way possible so that the reader can understand.</p><p>For more information, see <a href="http://writingcenter.waldenu.edu/1513.htm " target="_blank">http://writingcenter.waldenu.edu/1513.htm </a></p>')
# term978 = Term.create(termname: 'voice', definition: '<p>Formal language and tone are expected in scholarly writing, although the definition of formal varies over time and by field. Most current fields agree, however, that colloquialisms, slang, contractions, <a href="http://writingcenter.waldenu.edu/774.htm" target="_blank">biased language</a>, rhetorical questions, and <a href="http://writingcenter.waldenu.edu/711.htm" target="_blank">second person pronouns</a> should be avoided.</p><p>In formal writing, you must be cautious in your selection of scholarly language. Be aware that not all texts demonstrate good scholarly tone, even those that may be peer-reviewed.</p><p>Watch out for these writing temptations:<ul><li>Using overly long or complex sentences: longer is not necessarily better. Instead, simplicity and directness should be the highest priority.</li><li>Using compound sentences that try to stretch themselves too far (e.g., <a href="http://writingcenter.waldenu.edu/728.htm" target="_blank">run-on sentences</a>)</li><li>Writing sentences that carry little information or structural purpose or those that point out the obvious.</li><li>Writing in an indirect fashion to sound more scholarly or formal (e.g., using <a href="http://writingcenter.waldenu.edu/487.htm" target="_blank">passive voice</a>)</li><li>Using &#34;nice-sounding&#34; words or phrases without fully understanding their specific meaning. (If you are unsure of a word&#39;s or phrase&#39;s definition or meaning, look it up in a dictionary or thesaurus, or find another word to use in its place.)</li><li>Using unneeded words to make a point.</li><li>Adding unnecessary ideas or phrases to lengthen your paragraphs and sentences.</li></ul></p>')
# term979 = Term.create(termname: 'mechanics', definition: '<p>Test your knowledge of important elements of writing such as capitalization, punctuation, sentence structure, and tone with short quizzes at <a href="http://writingcenter.waldenu.edu/68.htm" target="_blank">http://writingcenter.waldenu.edu/68.htm</a></p>')
# term980 = Term.create(termname: 'varied', definition: '<p>Using different sentence structures can make your writing more interesting. Having a large vocabulary can help you make your writing more precise.</p><p>You can download a document about varying wording and sentence structure at <br/><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Varying_Sentence_Structure.pdf" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Varying_Sentence_Structure.pdf</a></p>')
# term981 = Term.create(termname: 'economical', definition: '<p>Scholarly writing doesn’t have to contain long sentences with lots of commas and five-syllable words. In fact, great writing is clear and to the point.</p><p>You can download some helpful hints about writing <em>concisely</em> at<br/><a href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Writing_Concisely.pdf" target="_blank">http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Writing_Concisely.pdf</a></p>')
# term982 = Term.create(termname: 'emphatic', definition: '<p>To make your writing stronger, consider the following tips.<ul><li>Use strong topic sentences that clearly preview the paragraph’s topic.</li><li>Discuss one topic at a time. When the topic shifts, the paragraph should shift as well.</li><li>Use evidence to support or negate your ideas, and clearly analyze and discuss the evidence.</li><li>Connect your ideas to one another within the paragraph. Use strong transitions and connecting words to show how your ideas are related.</li></ul></p><p>For more information, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=442269" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=442269</a></p>')
# term983 = Term.create(termname: 'clear', definition: '<p>To make your writing clearer, consider the following tips.<ul><li>Use direct language. Avoid using sentences that use there are or here is in their construction.</li><li>Use active, direct verbs. (e.g. &#34;He ate the apple&#34; rather than &#34;The apple was eaten by him.&#34;)</li><li>Delete any words that give unnecessary emphasis (e.g. <em>very</em>, <em>really</em>).</li><li>Cut out any unnecessary description.</li><li>Remove any information that is not essential to the core sentence. You can always go back and insert details if you feel they are relevant.</li><li>Use simple sentences—you can always go back to vary your sentence structure.</li><li>Choose clear, precise words.</li></ul></p><p>For more information, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=442433" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=442433</a></li></p>')
# term984 = Term.create(termname: 'tone', definition: '<p>Tone refers to the way a reader &#34;hears&#34; the writer’s voice or the personality that comes through the writing. Writing with good tone requires these steps:<ul><li>Consider your audience</li><li>Remain objective</li><li>Retain formality</li><li>Clarify the point of view</li><li>Be discerning in your word choices</li><li>Be precise and direct</li></ul><p>For more information, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=418310" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418310</a></p>')
# term985 = Term.create(termname: 'case', definition: '<p><em>Case</em> refers to whether words are capitalized (&#34;uppercase&#34;) or not capitalized (&#34;lowercase&#34;). APA formatting has certain rules around capitalization. You will be learning more about APA formatting as you progress toward your degree.  <p>For more information, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=418257" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418257</a></p>')
# term986 = Term.create(termname: 'antecedent reference', definition: '<p>The purpose of a pronoun is to take the place of, or refer back to, a noun in a sentence. Just like subjects and verbs, nouns and pronouns should agree in number within a sentence.</p><p>For more information, see <br/><a href="http://writingcenter.waldenu.edu/784.htm" target="_blank">http://writingcenter.waldenu.edu/784.htm</a></p>')
# term987 = Term.create(termname: 'Revision', definition: '<p><em>Revision</em> means to look again. After you write your draft, <strong>look at it again to improve your ideas, evidence, and organization</strong>.  By revising (also known as rewriting or changing) parts of your writing, you can produce a higher quality document. Revision happens more than once in the same draft.  Read your draft a few times to make some changes, and then look at the changed version again to make additional changes. <strong>Repeat this process until you feel confident that your paper has focused ideas, strong evidence, and an effective organization</strong>.</p><p>You’ll find some useful examples under the heading Revising at <a href="http://writingcenter.waldenu.edu/872.htm" target="_blank">http://writingcenter.waldenu.edu/872.htm</a></p>')
# term988 = Term.create(termname: 'subject-verb agreement', definition: '<p><em>Subjects</em> and <em>verbs</em> must agree in number.  Subject-verb disagreement can be easy to spot:<p><strong>Example</strong>:  Basketball are my favorite sport.<p><em>Basketball</em>, singular, is mismatched with the plural form of a verb (are).<p><strong>Correction</strong>:  Basketball is my favorite sport.<p>Subject-verb agreement can get tricky when you have more than one subject.<p><strong><em>Incorrect</em></strong>:  The percentage of students who called in sick and the number of students who were marked as truant is proportional to the students&#39; degree of seniority.<p>The subject here consists of two parts (percentage and number), so the subject is plural.  The singular form of the verb (is) does not agree.<p><strong><em>Correct</em></strong>:  The percentage of students who called in sick <strong>and</strong> the number of students who were marked as truant are proportional to the students&#39; degree of seniority.<p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/500.htm" target="_blank">http://writingcenter.waldenu.edu/500.htm</a>, and<br/><a href="http://writingcenter.waldenu.edu/539.htm" target="_blank">http://writingcenter.waldenu.edu/539.htm</a></p>')
# term989 = Term.create(termname: 'modifiers', definition: '<p>A <em>modifier</em> is a word, phrase or clause that modifies--i.e., gives us information about--another word in the same sentence. For example, in the following sentence, the word burger is modified by the word vegetarian:</p><p><strong><em>Example:</em></strong>  I&#39;m going to the Saturn Café for a <strong>vegetarian</strong> burger.</p><p>The modifier <em>vegetarian</em> gives us extra information about what kind of burger it is.</p><p>A modifier can be an <em>adjective</em> (a word that modifies a noun, like <em>burger</em>), but it can also be an adverb (a word that modifies a verb):</p><p><strong><em>Example:</em></strong>  The student <strong>carefully</strong> proofread her draft.</p><p>The adverb <em>carefully</em> is the modifier in this example--it modifies the verb <em>proofread</em>, giving us important details about how the proofreading was conducted.</p><p><strong>Misplaced or Ambiguous Modifiers</strong></p><p>When a modifier is ambiguously or illogically modifying a word, we consider it a <em>misplaced modifier</em>.</p><p><strong><em>Example:</em></strong>  Dolger discovered an ancient Mayan civilization using <strong>astronavigation</strong></p><p>The modifier, using <em>astronavigation</em>, is unclear in this sentence.  Does it modify <em>Dolger</em> or <em>civilization</em>?  A reader will wonder, &#34;Was Dolger using astronavigation? Or was the civilization he discovered using astronavigation?&#34;</p><p><strong><em>Correction:</em></strong>  <strong>Using astronavigation</strong>, Dolger discovered an ancient Mayan civilization.</p><p>This modifier placement makes it clear that <em>Dolger</em> is the one using astronavigation.</p><p><strong><em>Correction:</em></strong> Dolger discovered an ancient Mayan civilization that used astronavigation.</p><p>This modifier placement makes it clear that the <em>civilization</em> used astronavigation.</p><p><strong>Dangling Modifiers</strong></p><p>When a modifier is not modifying a specific word, we call it a <em>dangling modifier</em>.</p><p><strong><em>Example:</em></strong>  <strong>Like other reviews</strong>, McNeilly (2007) found the game  <em>Portal</em> to be &#34;flawlessly executed from within the margins it assails&#34; (para. 1).</p><p>The placement of <em>like the other reviews</em> in this sentence equates <em>McNeilly</em> (an author) with a <em>review</em> (a piece of text).  This construction is incorrect, since these two objects of comparison are not similar enough to be compared.</p><p><strong><em>Correction:</em></strong> <strong>Like the other reviews</strong>, McNeilly&#39;s <strong>article</strong> (2007) found the game Portal to be &#34;flawlessly executed from within the margins it assails&#34; (para. 1).</p><p>This correction gives the modifier (<em>Like other reviews</em>) an appropriate object to modify (<em>McNeilly&#39;s article</em>).  Now both items in the comparison are similar enough to compare.</p><p>You could also correct the sentence by changing the modifier slightly:</p><p><strong><em>Correction:</em></strong>  Like other reviewers, McNeilly (2007) found the game Portal to be &#34;flawlessly executed from within the margins it assails&#34; (para. 1).</p>')
# term990 = Term.create(termname: 'skeptics', definition: '<p>A skeptic is someone who is doubtful. If you think about the kinds of questions skeptics might have, you can try to answer those questions in advance.</p>')
# term991 = Term.create(termname: 'cite', definition: '<p>When referring to a source in your text, you will include the author, the year of publication, and sometimes the page number. (The page number is required only with direct quotations.) This list of information is called an in-text citation. The purpose of citations is to direct readers to the reference list, giving credit to the sources you used for direct quotations or paraphrases. Any time you use information that is not originally your own, you will want to include an in-text citation.</p><p>Citations have the same three elements regardless of source: author, publication year, and page or paragraph number. The page or paragraph number where you find information is required for all quotations but is optional for paraphrased information.  Citations in your paper are necessary to provide credit to the proper sources; failure to cite properly could result in plagiarism.</p><p>Some good guidelines for citing your work are to cite anything that includes actual statistics or figures (i.e., &#34;50% of the population believes...&#34;).  It is not necessary to cite common knowledge (i.e., you do not need to cite that the Earth is round). You will credit a source in each sentence that references material from a source.</p><p>For more information about citations, see<br/><a href="http://academicanswers.waldenu.edu/a.php?qid=418033" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418033</a> and <a href="http://writingcenter.waldenu.edu/33.htm" target="_blank">http://writingcenter.waldenu.edu/33.htm</a></p>')
# term992 = Term.create(termname: 'pronouns', definition: '<p>The purpose of a <em>pronoun</em> is to take the place of, or refer back to, a noun in a sentence. Just like subjects and verbs, nouns and pronouns should agree in number within a sentence.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/784.htm" target="_blank">http://writingcenter.waldenu.edu/784.htm</a></p>')
# term993 = Term.create(termname: 'editing strategies', definition: '<p>The writing process is circular; it does not end when you submit the paper to your instructor.  In order to make progress with each assignment, you will need to optimize feedback, reflect on your strengths and weaknesses, and plan for improvement.</p><p>For more guidance on evaluating and improving your own writing, see<br/> <a href="http://writingcenter.waldenu.edu/768.htm" target="_blank">http://writingcenter.waldenu.edu/768.htm</a></p>')
# term994 = Term.create(termname: 'proofreading', definition: '<p><em>Proofreading</em> involves reading your document to correct the <strong>smaller typographical, grammatical, and spelling errors</strong>. Proofreading is usually the very last step you take before sending off the final draft of your work for evaluation or publication. <strong>It comes after you have addressed larger matters such as style, content, citations, and organization during revising</strong>. Like revising, proofreading demands a close and careful reading of the text. Although quite tedious, it is a necessary and worthwhile exercise that ensures that your reader is not distracted by careless mistakes.</p><p>Download a handy bookmark at<br/><a href="http://writingcenter.waldenu.edu/Documents/APA/Proofreading_Bookmark.pdf" target="_blank">http://writingcenter.waldenu.edu/Documents/APA/Proofreading_Bookmark.pdf</a></p>')
# term995 = Term.create(termname: 'comma', definition: '<p><em>Common Comma Errors</em></p><p>The following constructions do not require commas:</p><p><strong>1. Months.</strong> Do not use a comma when referring to a month within a particular year.</p><p><strong>Example</strong>: I conducted the study in <strong>June 2003.</strong></p><p><strong>2. Complex sentences.</strong> Do not use a comma in a sentence that joins <a href="http://writingcenter.waldenu.edu/728.htm" target="_blank">an independent clause and a dependent clause</a> with a conjunction (<em>and</em>, <em>or</em>, <em>but</em>).</p><p><strong>Example</strong>: Smith (2001) found that results were consistent but also suggested further investigation.</p><p><strong>3. Introducing quotations (seamless).</strong> Do not use a comma when an independent clause seamlessly introduces a quotation.</p><p><strong>Example</strong>: Freud (1900) claimed <strong>that &#34;the</strong> dreamer…assumes that the dream–even if it does not come from another world–has at all events transported the dreamer into another world&#34; (p. 5).</p><p><strong>4. Comma splices.</strong> A comma splice occurs when two independent clauses (complete sentences) are separated by just a comma.</p><p><strong>Example</strong>: Jessica and I went to the movies, we had a good time.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/331.htm" target="_blank">http://writingcenter.waldenu.edu/331.htm</p>')
# term996 = Term.create(termname: 'apostrophe', definition: '<p><strong>Common Apostrophe Errors</strong></p><p>There are some common apostrophe errors that are easy to avoid.  Do not use an apostrophe</p><p><strong>1. When making a noun plural.</strong></p><p><Strong>Example</strong>: The studies&#39; of Jones and Barnum…</p><p><strong>Correct</strong>:  The studies of Jones and Barnum...  or Jones&#39;s and Barnum&#39;s studies…</p><p><strong>2. When making an acronym or a number plural.</strong></p><p><strong>Example</strong>:  CEO&#39;s of major corporations in the 1950&#39;s…</p><p><strong>Correct</strong>:  CEOs of major corporations in the 1950s…</p><p>Students should avoid contractions to keep their voice formal. You can find more information about academic writing expectations at <a href="http://writingcenter.waldenu.edu/awe.htm" target="_blank">http://writingcenter.waldenu.edu/awe.htm</a></p><p>For more information, see <br/><a href="http://writingcenter.waldenu.edu/776.htm" target="_blank">http://writingcenter.waldenu.edu/776.htm</a></p>')
# term997 = Term.create(termname: 'transitions', definition: '<p>The strength of any argument largely hinges on the writer&#39;s ability to make clear connections among his or her ideas and topics. This means that every sentence needs to rely on the previous sentence and contribute to the next. After all, this sort of logic-based linking is what ultimately guides your reader from one idea to the next and explains the relationships between your research and assessments.</p><p>For more information, see<br/><a href="http://writingcenter.waldenu.edu/502.htm" target="_blank">http://writingcenter.waldenu.edu/502.htm</a></p>')
# term998 = Term.create(termname: 'pointing words', definition: '<p>Examples of pointing words include <em>these</em>, <em>this</em>, <em>those</em>, and <em>that</em>.</p>')
# term999 = Term.create(termname: 'editing strategies', definition: '<p>How should you revise? Although there is no single answer to that question, here are a few suggestions:<ul><li>Before revising, let the manuscript, and your own mind, rest for a short period. Even a couple of days can change one&#39;s perspective.</li><li>During that first read of a draft, avoid making revisions or corrections. In other words, read it as if it was already published. See what you think. Is there cohesion? How well does the narrative flow? Do you still agree with what you have written?</li><li>Be honest with yourself. Take note of what is good and what could be improved. Use those passages where you are satisfied as a guide for revising those that you want to rework.</li></ul></p><p>For more information, see <br/><a href="http://waldenwritingcenter.blogspot.com/2013/06/good-writing-is-rewriting-learning-to.html" target="_blank">http://waldenwritingcenter.blogspot.com/2013/06/good-writing-is-rewriting-learning-to.html</a></p>')
# term1000 = Term.create(termname: 'elements of writing', definition: '<p>You’ll find some great tips about every step in the writing process at <a href="http://writingcenter.waldenu.edu/Writing-Resources.htm" target="_blank">http://writingcenter.waldenu.edu/Writing-Resources.htm</a></p>')
# term1001 = Term.create(termname: 'reference list', definition: '<p>A <em>reference list</em> is a list of the publication information for the sources you&#39;ve cited in your paper and is intended to give your readers all the information they need to find those sources. In other publication styles, this list may be called a bibliography or a works cited page, but APA uses the term reference list. Here are a few things to keep in mind about reference lists:<ul><li>Only list sources you cite in your writing. Do not include sources you read but did not cite.</li><li>Double-space your list and use a hanging indent for each reference. (View resources on creating hanging indents and double-spacing your work on the Writing Center&#39;s website.)</li><li>Organize your references alphabetically by the author&#39;s last name.</li><li>Include a reference list for every paper in which you cite outside material.</li><li>Do note bold the title of the list.</li></ul></p><p>For more information and some samples, see <br/><a href="http://academicanswers.waldenu.edu/a.php?qid=418146" target="_blank">http://academicanswers.waldenu.edu/a.php?qid=418146</a></p>')


# termlist534 = Termlist.create(term_id: '534', course_id: '9')
# termlist535 = Termlist.create(term_id: '535', course_id: '9')
# termlist544 = Termlist.create(term_id: '544', course_id: '9')
# termlist536 = Termlist.create(term_id: '536', course_id: '9')
# termlist537 = Termlist.create(term_id: '537', course_id: '9')
# termlist538 = Termlist.create(term_id: '538', course_id: '9')
# termlist539 = Termlist.create(term_id: '539', course_id: '9')
# termlist540 = Termlist.create(term_id: '540', course_id: '9')
# termlist541 = Termlist.create(term_id: '541', course_id: '9')
# termlist542 = Termlist.create(term_id: '542', course_id: '9')
# termlist543 = Termlist.create(term_id: '543', course_id: '9')
# termlist545 = Termlist.create(term_id: '545', course_id: '9')
# termlist548 = Termlist.create(term_id: '548', course_id: '9')
# termlist549 = Termlist.create(term_id: '549', course_id: '9')
# termlist550 = Termlist.create(term_id: '550', course_id: '9')
# termlist551 = Termlist.create(term_id: '551', course_id: '9')
# termlist552 = Termlist.create(term_id: '552', course_id: '9')
# termlist553 = Termlist.create(term_id: '553', course_id: '9')
# termlist554 = Termlist.create(term_id: '554', course_id: '9')
# termlist555 = Termlist.create(term_id: '555', course_id: '9')
# termlist556 = Termlist.create(term_id: '556', course_id: '9')
# termlist557 = Termlist.create(term_id: '557', course_id: '9')
# termlist558 = Termlist.create(term_id: '558', course_id: '9')
# termlist559 = Termlist.create(term_id: '559', course_id: '9')
# termlist560 = Termlist.create(term_id: '560', course_id: '9')
# termlist561 = Termlist.create(term_id: '561', course_id: '9')
# termlist562 = Termlist.create(term_id: '562', course_id: '9')
# termlist563 = Termlist.create(term_id: '563', course_id: '9')
# termlist564 = Termlist.create(term_id: '564', course_id: '9')
# termlist565 = Termlist.create(term_id: '565', course_id: '9')
# termlist566 = Termlist.create(term_id: '566', course_id: '9')
# termlist567 = Termlist.create(term_id: '567', course_id: '9')
# termlist568 = Termlist.create(term_id: '568', course_id: '9')
# termlist569 = Termlist.create(term_id: '569', course_id: '9')
# termlist570 = Termlist.create(term_id: '570', course_id: '9')
# termlist571 = Termlist.create(term_id: '571', course_id: '9')
# termlist572 = Termlist.create(term_id: '572', course_id: '9')
# termlist573 = Termlist.create(term_id: '573', course_id: '9')
# termlist574 = Termlist.create(term_id: '574', course_id: '9')
# termlist575 = Termlist.create(term_id: '575', course_id: '9')
# termlist578 = Termlist.create(term_id: '578', course_id: '9')
# termlist579 = Termlist.create(term_id: '579', course_id: '9')
# termlist580 = Termlist.create(term_id: '580', course_id: '9')
# termlist581 = Termlist.create(term_id: '581', course_id: '9')
# termlist582 = Termlist.create(term_id: '582', course_id: '9')
# termlist583 = Termlist.create(term_id: '583', course_id: '9')
# termlist584 = Termlist.create(term_id: '584', course_id: '9')
# termlist585 = Termlist.create(term_id: '585', course_id: '9')
# termlist577 = Termlist.create(term_id: '577', course_id: '9')
# termlist576 = Termlist.create(term_id: '576', course_id: '9')
# termlist547 = Termlist.create(term_id: '547', course_id: '9')
# termlist546 = Termlist.create(term_id: '546', course_id: '9')


# term1020 = Term.create(termname: 'Back-up Plan', definition: '<p>A back-up plan is what you developed in case something unexpected occurs related to technology or other events that might impact your role as a Walden student.</p>')
# term1021 = Term.create(termname: 'Discussion', definition: '<p>When you are writing as a student, you are entering into a new writing community; just as you would need to learn the customs and rules of any new country you visit, you need to learn the customs and rules of academic writing. These guidelines will be different than guidelines for writing in other environments (such as letters to friends, e-mails to coworkers, or writing for blogs). The academic community has its own rules. These standards help writers:</p><ul><li>Improve clarity</li><li>Avoid distracting the reader</li><li>Indicate sources for evidence</li></ul><p></p>')
# term1022 = Term.create(termname: 'Ice Breaker Activity', definition: '<p>These questions will help you make connections to students and to your instructor. Some of them are just for fun, and others might help you find a classmate who can help you through this transition with academic, social, or emotional supports.</p>')
# term1023 = Term.create(termname: 'Just-in-Time', definition: '<p>Just-in-Time is the phrase that we use to describe small informational pop-up content that is in place to help you complete assignments. These blurbs provide more information for you at the moment when you need further information. </p>')
# term1024 = Term.create(termname: 'Learning Objectives', definition: '<p>Learning Objectives are included each week. The objectives will let you know exactly what you will be learning that week. Each learning objective will be used to guide your work in the Discussion, Assignments, or Reflections. Learning objectives are written in measurable terms and can be used to help you see what you have learned in the course.</p>')
# term1025 = Term.create(termname: 'Learning Resources', definition: '<p>Learning Resources is the heading given to all the readings, media, websites, and documents you will use in the course.</p><p>In scholarly writing, you will often use <strong>direct quotations</strong> or <strong>paraphrased material</strong> from the learning resources to support your research and strengthen your academic argument. Although direct quotations are generally not as strong as paraphrases, they can add evidence and substance to your scholarly argument. Do keep in mind, however, that some instructors forbid direct quotations for some assignments.</p>')
# term1026 = Term.create(termname: 'Media', definition: '<p>Video and multi-media programs are developed specifically to help you gain knowledge and meet the course objectives.</p>')
# term1027 = Term.create(termname: 'MobileLearn', definition: '<p>MobileLearn in an app that allows you to access your Walden courses and resources on a mobile device.</p>')
# term1028 = Term.create(termname: 'Notes and Readings', definition: '<p>Week 1-Week 5 will include Notes and Readings that includes content and context for the resources. The Notes and Readings should be read first-before any of the other resources. This content will provide a lens through which you will view the rest of the course resources.</p>')
# term1029 = Term.create(termname: 'Optional Resources', definition: '<p>There are many different types of resources. Understanding resource types helps you determine the best source needed for your information purpose. <br />Below is a list of the most commonly cited resources used for research.<br />Popular Magazines</p><ul><li>Articles are intended to casually inform, entertain, or present an opinion.</li></ul><p>Newspapers</p><ul><li>Published daily, newspapers are often the first to report a newsworthy story.</li></ul><p>Books and Ebooks</p><ul><li>Books provide broad and foundational coverage of a topic.</li></ul><p>Encyclopedias &amp; Handbooks</p><ul><li>Encyclopedias &amp; handbooks feature introductory overviews of topics.</li></ul><p>Government Websites</p><ul><li>Government websites have .gov as their designated domain. They are often a great place to search for statistical information.</li></ul><p>For more information, see <a target="_blank" title="Walden Library Guide: Keywords" href="http://libraryguides.waldenu.edu/keyword">http://libraryguides.waldenu.edu/keyword</a> and <a target="_blank" title="Walden Library Guide: Evaluating" href="http://libraryguides.waldenu.edu/evaluating">http://libraryguides.waldenu.edu/evaluating</a><br /><br /></p>')
# term1030 = Term.create(termname: 'searchable', definition: '<p>When you first started at Walden, you were introduced to many of Walden&rsquo;s resources in the Student Readiness Orientation (SRO). The <a target="_blank" title="Walden e-guide" href="http://auth.waldenulibrary.org/ezpws.exe?url=http://libraryguides.waldenu.edu/waldeneguide">e-Guide</a>, which is available through your myWalden portal, offers access to the same helpful information throughout your educational journey at Walden. Continuously updated with new information, the e-Guide is an all-inclusive website that you can explore at your own pace to find answers to your questions and connect with our support services.</p>')
# term1031 = Term.create(termname: 'SRO', definition: '<p>Student Readiness Orientation (SRO) is a course that provides support and orientation to key concepts, process, and procedures associated with being a student at Walden University. You will have access to this resource for one year. You will return to if often as a source for technology procedures, online learning supports, and information about all things Walden.</p>')
# term1032 = Term.create(termname: 'Student Readiness Orientation', definition: '<p>Student Readiness Orientation (SRO) is a course that provides support and orientation to key concepts, process, and procedures associated with being a student at Walden University. You will have access to this resource for one year. You will return to if often as a source for technology procedures, online learning supports, and information about all things Walden.</p>')
# term1033 = Term.create(termname: 'Websites', definition: '<p>In your courses, you may be provided with links to a variety of websites pertaining to course topics. These have been selected to target course objectives and focus your learning.</p>')
# term1034 = Term.create(termname: 'virtual', definition: '<p>This course discusses how humans live in a virtual world. Virtual is defined as &ldquo;being on or simulated on a computer or computer network&rdquo; and &ldquo;occurring or existing primarily online or relating to, or existing within a virtual reality.&rdquo; In this course, <em>virtual is interchangeable with cyber, digital, and asynchronous when used to describe online environments.</em></p>')
# term1035 = Term.create(termname: 'To prepare for the Discussion', definition: '<p>Learning to spot a strong argument in what you read can help you become better at constructing your own arguments when you write. Use the handout below to learn how to become an expert at reading for argument so you can, in turn, become an expert at writing an argument.</p><p><a target="_blank" title="Key concepts of critical reading" href="http://writingcenter.waldenu.edu/Documents/Scholarly-Writing/Key_Concepts_of_Critical_Reading.pdf">Identifying Argument</a><br /><br /></p>')
# term1036 = Term.create(termname: 'read', definition: '<p>Critical reading generally refers to reading in a scholarly context, with an eye toward identifying a text or author&#39;s viewpoints, arguments, evidence, potential biases, and conclusions.&nbsp; Critical reading means evaluating what you have read using your knowledge as a scholar.&nbsp; You may look at the quality of the writing, the quality of the research, and the persuasiveness of the arguments, among other things. Critical reading is an active process by which a scholar rigorously and systematically questions the literature with the goal of assessing credibility and validity.</p><p>For more information, see <a target="_blank" title="Walden writing center: critical reading" href="http://writingcenter.waldenu.edu/454.htm">http://writingcenter.waldenu.edu/454.htm</a></p>')
# term1037 = Term.create(termname: 'Respond', definition: '<p>As you respond to your fellow students in the discussion board, watch out for these writing temptations:</p><ul><li>Using overly long or complex sentences: longer is not necessarily better. Instead, simplicity and directness should be the highest priority.</li><li>Using compound sentences that try to stretch themselves too far (e.g., <a target="_blank" title="Walden writing center: run-on sentences and sentence fragments" href="http://writingcenter.waldenu.edu/728.htm">run-on sentences</a>)</li><li>Writing sentences that carry little information or structural purpose or those that point out the obvious: &ldquo;Great job!&rdquo;</li><li>Writing in an indirect fashion to sound more scholarly or formal (e.g., using <a target="_blank" title="Walden writing center: active and passive voice" href="http://writingcenter.waldenu.edu/487.htm">passive voice</a>)</li><li>Using "nice-sounding" words or phrases without fully understanding their specific meaning. (If you are unsure of a word&#39;s or phrase&#39;s definition or meaning, look it up in a dictionary or thesaurus, or find another word to use in its place.)</li><li>Using unneeded words to make a point.</li><li>Adding unnecessary ideas or phrases to lengthen your paragraphs and sentences.</li></ul>')
# term1038 = Term.create(termname: 'Grammarly', definition: '<p>Grammarly is a website where you can submit a passage or a paper and get feedback on the elements of writing.</p><p>Test your knowledge of important elements of writing such as capitalization, punctuation, sentence structure, and tone with short quizzes at <a target="_blank" title="Walden writing center: exercises and quizzes" href="http://writingcenter.waldenu.edu/68.htm">http://writingcenter.waldenu.edu/68.htm</a><br /><br /></p>')
# term1039 = Term.create(termname: 'File naming convention', definition: '<p>There are specific guidelines for naming a document or file prior to submission. The naming convention you used will not only assist the instructor in correctly awarding points to you, but will help you organize and file your work.</p>')
# term1040 = Term.create(termname: 'Mobile device', definition: '<p>A mobile device is a portable computing device that is wireless and small enough to be used while held in the hand. Smartphones, PDAs, and tablets are mobile devices. </p>')
# term1041 = Term.create(termname: 'artifact', definition: '<p>An artifact is an item crafted by humans. In this context, it is used to describe an item you will select that is meaningful to you.</p><p>Many of the assignments in this course will be used to help you craft your final project. Make sure to look closely at your instructor&rsquo;s feedback on your draft. For more information about writing college papers, check out the presentation entitled &ldquo;Walden Writing Center: Lifecycle of a Paper&rdquo; at <a target="_blank" title="Visual presentation: Life-cycle of a paper" href="http://prezi.com/rqlb553eegdy/life-cycle-of-a-paper/">http://prezi.com/rqlb553eegdy/life-cycle-of-a-paper/</a></p><p>To download a thesis template, go to <a target="_blank" title="Walden thesis template" href="http://writingcenter.waldenu.edu/57.htm">http://writingcenter.waldenu.edu/57.htm</a></p>')
# term1042 = Term.create(termname: 'multiple perspectives', definition: '<p>When encountering multiple perspectives, it is important to attempt to remain objective. In your discussion boards and posts this week, as you engage with the ideas of others, please suspend judgment and practice objectivity. To be objective means to write with curiosity, rather than having a preset opinion, and to engage with research, rather than presenting a personal preference.</p><p>Being objective in your writing is a skill that you will develop, just like your academic voice. Though having a passion for your topic makes the writing process easier, it is important not to let it take over your draft.</p><p>For tips for keeping objectivity and eliminating bias, see <a target="_blank" title="Walden writing center: eliminating bias" href="http://writingcenter.waldenu.edu/774.htm">http://writingcenter.waldenu.edu/774.htm</a></p>')
# term1043 = Term.create(termname: 'Diversity of experience', definition: '<p>As a student at Walden, you will grow from a diversity of experience-by having people who are different races or who have different cultures in your class. Together, you will create a learning community that learns with and from each other.</p>')
# term1044 = Term.create(termname: 'Self-concept', definition: '<p>Self-concept is the idea that you have about the kind of person you are; the mental image one has of oneself.</p>')
# term1045 = Term.create(termname: 'perspectives', definition: '<p>Your perspective is your point of view-how you see the world. Your perspective is informed by your culture, age, geographic location, political, beliefs, gender, social economic status, etc. </p>')
# term1046 = Term.create(termname: 'Life Factors', definition: '<ul><li>Availability of time to study</li><li>Availability of a dedicated place to study</li><li>Reason for continuing one&#39;s education</li><li>Support resources from family, friends and employers</li><li>Perception of academic skills</li></ul>')
# term1047 = Term.create(termname: 'Individual Attributes', definition: '<ul><li>Procrastination</li><li>Time management</li><li>Persistence</li><li>Willingness to ask for help</li><li>Academic attributes</li><li>Locus of control</li></ul>')
# term1048 = Term.create(termname: 'Learning Styles', definition: '<p>Identifies the degree to which they possess each of the following learning styles:</p><ul><li>Visual</li><li>Verbal</li><li>Social</li><li>Solitary</li><li>Physical</li><li>Aural</li><li>Logical</li></ul>')
# term1049 = Term.create(termname: 'SmarterMeasure', definition: '<p>The SmarterMeasure Learning Readiness Indicator, is a web-based, 124-item assessment which measures a learner&#39;s readiness for succeeding in an online and/or technology rich learning program. SmarterMeasure indicates the degree to which an individual student possesses attributes, skills and knowledge that contribute to success in learning. All seven components of SmarterMeasure are grounded in theoretical research and practice. The seven components of SmarterMeasure are:</p><ul><li>Individual Attributes - motivation, procrastination, willingness to ask for help, etc.</li><li>Life Factors</li><li>Learning styles</li><li>Technical Competency</li><li>Technical Knowledge</li><li>On-screen Reading Rate and Recall</li><li>Typing Speed and Accuracy</li></ul>')
# term1050 = Term.create(termname: 'Likert-type scale', definition: '<p>In surveys and questionnaires, a Likert-type scale is used to assess responses. Often a 5-point scale, you would be asked to: Strongly Agree, Agree, Neutral, Disagree or Strongly Disagree with a statement.</p>')
# term1051 = Term.create(termname: 'journal', definition: '<p>Writing is a process, not an event. Taking the time to prepare for your writing will help make the writing process smooth and efficient. Follow these steps to ensure that your page does not stay blank for long.&nbsp; All of prewriting resources should be used simultaneously&mdash;you will often find yourself switching back and forth between <a target="_blank" title="Walden writing center: brainstorming" href="http://writingcenter.waldenu.edu/788.htm">brainstorming</a>, <a target="_blank" title="Walden writing center: critical reading" href="http://writingcenter.waldenu.edu/454.htm">critical reading</a>, <a target="_blank" title="Walden writing center: organizing your research" href="http://writingcenter.waldenu.edu/314.htm">organizing</a>, and fighting off <a target="_blank" title="Walden writing center: writer&#39;s block" href="http://writingcenter.waldenu.edu/504.htm">writer&rsquo;s block</a> as you begin a new assignment.</p><p>For more information, see <a target="_blank" title="Walden writing center: prewriting" href="http://writingcenter.waldenu.edu/325.htm">http://writingcenter.waldenu.edu/325.htm</a><br /><br /></p>')
# term1052 = Term.create(termname: 'Trojan viruses', definition: '<p>Trojan viruses are malware. They infect a computer and allow an outside entity to gain access to information stored on the computer. Some viruses cause redirects that push people toward products and services.</p>')
# term1053 = Term.create(termname: 'brb', definition: '<p>This phrase stands for be right back, and it is used to introduce a pause in an instant message conversation. It can be set as an IM status to indicate that you are away from your desk.</p>')
# term1054 = Term.create(termname: 'ttyl', definition: '<p>This phrase is a common way to end an electronic conversation. Talk to you later!</p>')
# term1055 = Term.create(termname: 'YOLO', definition: '<p>You only live once (YOLO) is a phrase that is used to describe taking full advantage of the opportunity to act, create, or celebrate being alive. It now appears on t-shirts and other products to endorse the &ldquo;seize the moment&rdquo; mentality that YOLO represents for many. </p>')
# term1056 = Term.create(termname: 'NGO', definition: '<p>Non-governmental organization (NGO) is not a part of a government. These groups often fulfill governmental roles include post-emergency clean up and distribution of supplies during a natural disaster.&nbsp; They are not for-profit businesses. Usually these groups are organized around a strongly help belief, and many of them work for positive social change in poor communities. Some do receive private funding, and others are actually operating on governmental grants.</p>')
# term1057 = Term.create(termname: 'George Orwell', definition: '<p>Born Eric Arthur Blair, George Orwell wrote extensively about social justice issues, most notably his fictional novels: Animal Farm and 1984. These novels attempted to reveal the dangers of surveillance by government and the way that the class system serves to perpetuate the collection of assets among the very rich in English society. Many of the lessons that he learned as a young man serving as a police officer in Burma informed his fiction.</p>')
# term1058 = Term.create(termname: 'ubiquitous surveillance', definition: '<p>George Orwell&#39;s novel <em>1984</em> provides a snapshot of the &ldquo;ubiquitous surveillance&rdquo; of Big Brother&ndash;where everyone was observed at all times everywhere.</p>')
# term1059 = Term.create(termname: 'social networking', definition: '<p>Usually referring to online applications, social networking sites are places to share and connect with a community. Facebook and Twitter are examples of social networks.</p>')
# term1060 = Term.create(termname: 'Instagrams, Twitter, Pinterest, instant messaging, and Facebook', definition: '<p>These are examples of social networking sites.</p>')
# term1061 = Term.create(termname: 'Rough draft', definition: '<p>A rough draft is a draft of an assignment or paper you submit for faculty feedback and review.</p><p>The <em>thesis statement</em> is the brief articulation of your paper&#39;s central argument and purpose.&nbsp; You might hear it referred to as simply a "thesis."&nbsp; Every scholarly paper should have a thesis statement, and strong thesis statements are <strong>concise</strong>, <strong>specific</strong>, and <strong>arguable</strong>.&nbsp; <em>Concise</em> means the thesis is short: perhaps one or two sentences for a shorter paper.&nbsp; <em>Specific</em> means the thesis deals with a narrow and focused topic, appropriate to the paper&#39;s length.&nbsp; <em>Arguable</em> means that a scholar in your field could (or perhaps already has!) disagreed.&nbsp;</p><p>Strong thesis statements address specific intellectual questions, have clear positions, and use a structure that reflects the overall structure of the paper.&nbsp; Read on to learn more about constructing a strong thesis statement.</p><p>For more information, see <a target="_blank" title="Walden writing center: thesis construction" href="http://writingcenter.waldenu.edu/405.htm">http://writingcenter.waldenu.edu/405.htm</a></p>')
# term1062 = Term.create(termname: 'John Dewey', definition: '<p>John Dewey was an American philosopher, psychologist, and educational reformer whose progressive education ideas addressed social reform in the early 20th century.</p>')
# term1063 = Term.create(termname: 'selfie', definition: '<p>A &ldquo;selfie&rdquo; is a picture a person takes of themselves and then posts it to a social media site.</p>')
# term1064 = Term.create(termname: 'googled', definition: '<p>This verb describes the online search that a person can conduct to learn more about a person, product, or service. Googling is a form of research conducted using a search engine to discover more information on a topic.</p>')
# term1065 = Term.create(termname: 'social media profile', definition: '<p>As you review the peer profiles here, keep in mind that you will be asked to help the student revise his or her profile. Revision means to look again. After you write your draft, look at it again to improve your ideas, evidence, and organization.&nbsp; By revising (also known as rewriting or changing) parts of your writing, you can produce a higher quality document. Revision happens more than once in the same draft.&nbsp; Read your draft a few times to make some changes, and then look at the changed version again to make additional changes.&nbsp; Repeat this process until you feel confident that your paper has focused ideas, strong evidence, and an effective organization.</p><p>You&rsquo;ll find some useful examples under the heading Revising at <a target="_blank" title="Walden writing center: proofreading and revising" href="http://writingcenter.waldenu.edu/872.htm">http://writingcenter.waldenu.edu/872.htm</a><br /><br /></p>')
# term1066 = Term.create(termname: 'LinkedIn', definition: '<p>LinkedIn is a social networking website for people in professional occupations. Founded in December 2002 and launched on May 5, 2003, it is mainly used for professional networking. In 2006, LinkedIn increased to 20 million viewers.</p>')
# term1067 = Term.create(termname: 'PathBrite', definition: '<p>Pathbrite is a venture-backed ed-tech company based in San Francisco. Our cloud-based Portfolio Learning Platform (PLP) makes course planning easier, student management more efficient, and teaching and learning more engaging. Hundreds of educators use Pathbrite to improve learning outcomes, completion rates, and holistic student assessment and tracking. Campus career centers and employers also use Pathbrite to improve student-applicant evaluation and job placement outcomes.</p>')
# term1068 = Term.create(termname: 'Learning objects', definition: '<p>This phrase is used to describe smaller &ldquo;bite sized&rdquo; chunks of curriculum that are used to illustrate a concept or theory. Learning objects are more portable segments of a longer course.</p>')
# term1069 = Term.create(termname: 'Template', definition: '<p>Course templates provide students with a pre-formatted shell to use for the essays they need to create. This Word template provides a starting point for course papers at Walden. Note that some schools have their own requirements that might differ slightly.&nbsp;</p><ul><li><a target="_blank" title="Downloadable template in Word format" href="http://writingcenter.waldenu.edu/Documents/APA/APA_Template_With_Advice_(6th_Ed).doc">APA Course Paper Template With Advice (6th ed.)</a></li></ul><p></p>')
# term1070 = Term.create(termname: 'reflection', definition: '<p>Sometimes professors ask students to reflect on personal experiences within a paper. Most of the time, however, including examples or anecdotes from your life can weaken your academic writing. Instead, use academic sources to introduce your topic and then help support your assertions. If your professor does ask for personal experiences, limit them to experiences that directly relate to the argument in your paper. In this assignment, you will be asked to reflect on positive social change.</p><p>(<a target="_blank" title="Walden writing center: writing tips for undergrads" href="http://writingcenter.waldenu.edu/730.htm">http://writingcenter.waldenu.edu/730.htm</a>)</p>')
# term1071 = Term.create(termname: 'introduction', definition: '<p>An introduction provides the reader with a clear understanding of what your essay will contain. For more information on crafting an introduction, review the material below.</p><p><a target="_blank" title="Walden writing center: introductions and conclusions" href="http://writingcenter.waldenu.edu/320.htm">http://writingcenter.waldenu.edu/320.htm</a></p>')
# term1072 = Term.create(termname: 'Visual representation', definition: '<p>A visual representation is a photo, illustration, painting, etc. or multimedia object that provides insight and understanding of a concept or event.</p>')
# term1073 = Term.create(termname: 'Turnitin', definition: '<p>Turnitin is an academic plagiarism detection tool used in Walden courses. You will submit certain assignments to Turnitin. Specific directions are provided in each course.</p>')
# term1074 = Term.create(termname: 'Technology', definition: '<p>Technology is the &ldquo;application of knowledge to the practical aims of human life or to changing and manipulating the human environment. Technology includes the use of materials, tools, techniques, and sources of power to make life easier or more pleasant and work more productive. Whereas science is concerned with how and why things happen, technology focuses on making things happen.&rdquo;</p><p>Technology. (n.d.). Merriam-Webster.com. Retrieved April 1, 2014, from <a target="_blank" title="Dictionary entry: technology" href="http://www.merriam-webster.com/concise/technology%20%20">http://www.merriam-webster.com/concise/technology&nbsp; </a></p>')
# term1075 = Term.create(termname: 'Required Readings', definition: '<p>Required Readings is the area in each module where you will find the written resources you will need to guide your work in the course.</p>')
# term1076 = Term.create(termname: 'Documents', definition: '<p>All documents needed to complete course Discussions or Assignments are included under this heading.</p>')
# term1077 = Term.create(termname: 'Civility', definition: '<p>Civility is defined as polite, reasonable, and respectful behavior (Merriam-Webster dictionary) and is the expectation for interaction in Walden courses-in Discussion Boards, the Class Caf&eacute;, and in email interactions.</p>')
# term1078 = Term.create(termname: 'Assignment', definition: '<p>Assignments provide you the opportunity to display your understanding of the materials and how you will meet the Learning Objectives. Assignments can be papers, essays, projects, etc.</p><p>To learn more about transitioning into academic writing, view <a target="_blank" title="Walden writing center: joining the conversation" href="http://writingcenter.waldenu.edu/415.htm#joining">Joining the Conversation: Relearning the Conventions of Academic Writing</a>." Remember that it&rsquo;s your job as the author to engage your readers, and inconsistencies in formatting and citations distract the reader from the content of your writing.&nbsp; Developing an academic voice is an important part of a college education.<br /><br /></p>')
# term1079 = Term.create(termname: 'Submit', definition: '<p>There are specific procedures for submitting (turning in) your assignments. Follow the directions provided in your course for specifics.</p>')
# term1080 = Term.create(termname: 'rubric', definition: '<p>A rubric is a scoring tool that clearly states the performance expectations for an assignment. A rubric identifies the components of an assignment and the standards or expectations at the different levels associated with each component, at different levels of mastery. Rubrics can be used to guide and assess a wide variety of assignments.</p>')
# term1081 = Term.create(termname: 'exponential', definition: '<p>Exponential is defined as &ldquo;characterized by or being an extremely rapid increase (as in size or extent)&rdquo; such as in exponential growth.</p><p>Exponential. (n.d.). Merriam-Webster.com. Retrieved April 1, 2014, from <a target="_blank" title="Dictionary entry: exponential" href="http://www.merriam-webster.com/dictionary/exponential">http://www.merriam-webster.com/dictionary/exponential</a>&nbsp; </p>')
# term1082 = Term.create(termname: 'Positive social change', definition: '<p>Positive social change is a tenet of our mission, and your work at Walden. The Walden Writing Center is just one resource to support you as you move through your program. Some resources will help you think about &ldquo;positive social change&rdquo; or the ways that the work you do can have a real impact on the world around you, from the most personal all the way to the global level.</p><p>(<a target="_blank" title="Walden blog: Writing for Social Change" href="http://waldenwritingcenter.blogspot.com/2013/10/how-to-write-for-positive-social-change.html">http://waldenwritingcenter.blogspot.com/2013/10/how-to-write-for-positive-social-change.html</a>)</p>')
# term1083 = Term.create(termname: 'Humanities', definition: '<p>Humanities, as an academic discipline, explores what it means to be human by examining the ways that we communicate and process information.</p>')
# term1084 = Term.create(termname: 'conclusion', definition: '<p>A conclusion serves as a mirror reflecting back on the introduction, and it should provide the reader with a clear overview of the ideas that were introduced in the essay. For more information on crafting a compelling conclusion, review the material below.</p><p><a target="_blank" title="Walden writing center: introductions and conclusions" href="http://writingcenter.waldenu.edu/320.htm">http://writingcenter.waldenu.edu/320.htm</a></p>')
# term1085 = Term.create(termname: 'culture', definition: '<p>cul&middot;ture<br>&nbsp;noun &#92;k&#601;l-ch&#601;r&#92;<br>: the beliefs, customs, arts, etc., of a particular society, group, place, or time<br />: a particular society that has its own beliefs, ways of life, art, etc.<br />: a way of thinking, behaving, or working that exists in a place or organization (such as a business)<br /><br />Culture. (n.d.). Merriam-Webster.com. Retrieved February 20, 2014, from <a target="_blank" title="Dictionary entry: culture" href="http://www.merriam-webster.com/dictionary/culture%20%20">http://www.merriam-webster.com/dictionary/culture &nbsp;</a><br /><br /></p>')
# term1086 = Term.create(termname: 'reality', definition: '<p>Merriam-Webster states that reality is the true situation that exists; the real situation. It is something that actually exists or happens: a real event, occurrence, situation, etc.</p><p>Reality. (n.d.). Merriam-Webster.com. Retrieved April 1, 2014, from <a target="_blank" title="Dictionary entry: reality" href="http://www.merriam-webster.com/dictionary/reality">http://www.merriam-webster.com/dictionary/reality</a></p>')

# termlist589 = Termlist.create(term_id: '589', course_id: '10')
# termlist586 = Termlist.create(term_id: '586', course_id: '10')
# termlist587 = Termlist.create(term_id: '587', course_id: '10')
# termlist588 = Termlist.create(term_id: '588', course_id: '10')
# termlist590 = Termlist.create(term_id: '590', course_id: '10')
# termlist591 = Termlist.create(term_id: '591', course_id: '10')
# termlist592 = Termlist.create(term_id: '592', course_id: '10')
# termlist593 = Termlist.create(term_id: '593', course_id: '10')
# termlist594 = Termlist.create(term_id: '594', course_id: '10')
# termlist595 = Termlist.create(term_id: '595', course_id: '10')
# termlist596 = Termlist.create(term_id: '596', course_id: '10')
# termlist597 = Termlist.create(term_id: '597', course_id: '10')
# termlist598 = Termlist.create(term_id: '598', course_id: '10')
# termlist599 = Termlist.create(term_id: '599', course_id: '10')
# termlist600 = Termlist.create(term_id: '600', course_id: '10')
# termlist601 = Termlist.create(term_id: '601', course_id: '10')
# termlist602 = Termlist.create(term_id: '602', course_id: '10')
# termlist603 = Termlist.create(term_id: '603', course_id: '10')
# termlist604 = Termlist.create(term_id: '604', course_id: '10')
# termlist605 = Termlist.create(term_id: '605', course_id: '10')
# termlist606 = Termlist.create(term_id: '606', course_id: '10')
# termlist607 = Termlist.create(term_id: '607', course_id: '10')
# termlist608 = Termlist.create(term_id: '608', course_id: '10')
# termlist609 = Termlist.create(term_id: '609', course_id: '10')
# termlist610 = Termlist.create(term_id: '610', course_id: '10')
# termlist611 = Termlist.create(term_id: '611', course_id: '10')
# termlist612 = Termlist.create(term_id: '612', course_id: '10')
# termlist613 = Termlist.create(term_id: '613', course_id: '10')
# termlist614 = Termlist.create(term_id: '614', course_id: '10')
# termlist615 = Termlist.create(term_id: '615', course_id: '10')
# termlist616 = Termlist.create(term_id: '616', course_id: '10')
# termlist617 = Termlist.create(term_id: '617', course_id: '10')
# termlist618 = Termlist.create(term_id: '618', course_id: '10')
# termlist619 = Termlist.create(term_id: '619', course_id: '10')
# termlist620 = Termlist.create(term_id: '620', course_id: '10')
# termlist621 = Termlist.create(term_id: '621', course_id: '10')
# termlist622 = Termlist.create(term_id: '622', course_id: '10')
# termlist623 = Termlist.create(term_id: '623', course_id: '10')
# termlist624 = Termlist.create(term_id: '624', course_id: '10')
# termlist625 = Termlist.create(term_id: '625', course_id: '10')
# termlist626 = Termlist.create(term_id: '626', course_id: '10')
# termlist627 = Termlist.create(term_id: '627', course_id: '10')
# termlist628 = Termlist.create(term_id: '628', course_id: '10')
# termlist629 = Termlist.create(term_id: '629', course_id: '10')
# termlist630 = Termlist.create(term_id: '630', course_id: '10')
# termlist631 = Termlist.create(term_id: '631', course_id: '10')
# termlist632 = Termlist.create(term_id: '632', course_id: '10')
# termlist633 = Termlist.create(term_id: '633', course_id: '10')
# termlist634 = Termlist.create(term_id: '634', course_id: '10')
# termlist635 = Termlist.create(term_id: '635', course_id: '10')
# termlist636 = Termlist.create(term_id: '636', course_id: '10')
# termlist637 = Termlist.create(term_id: '637', course_id: '10')
# termlist638 = Termlist.create(term_id: '638', course_id: '10')
# termlist639 = Termlist.create(term_id: '639', course_id: '10')
# termlist640 = Termlist.create(term_id: '640', course_id: '10')
# termlist641 = Termlist.create(term_id: '641', course_id: '10')
# termlist642 = Termlist.create(term_id: '642', course_id: '10')
# termlist643 = Termlist.create(term_id: '643', course_id: '10')
# termlist644 = Termlist.create(term_id: '644', course_id: '10')
# termlist645 = Termlist.create(term_id: '645', course_id: '10')
# termlist646 = Termlist.create(term_id: '646', course_id: '10')
# termlist647 = Termlist.create(term_id: '647', course_id: '10')
# termlist648 = Termlist.create(term_id: '648', course_id: '10')
# termlist649 = Termlist.create(term_id: '649', course_id: '10')
# termlist650 = Termlist.create(term_id: '650', course_id: '10')
# termlist651 = Termlist.create(term_id: '651', course_id: '10')
# termlist652 = Termlist.create(term_id: '652', course_id: '10')

# term1100 = Term.create(termname:'sets', definition:'<p>Click below to watch a brief video called Math Notation and Symbols: The Universal Language of Sets</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Sets/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Sets/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Sets/index.html</a></p>')
# term1101 = Term.create(termname:'convert measurement', definition:'<p>Click the link below for a PDF that gives an example of converting measurement.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/930907/Measurement_and_Conversion_Updated.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/930907/Measurement_and_Conversion_Updated.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/930907/Measurement_and_Conversion_Updated.pdf</a></p>')
# term1102 = Term.create(termname:'Subsets', definition:'<p>Click below to view a PDF that explains the difference between Subsets and Proper Subsets<br /><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579723/Subsets_vs._Proper_Subsets.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579723/Subsets_vs._Proper_Subsets.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579723/Subsets_vs._Proper_Subsets.pdf</a></p>')
# term1103 = Term.create(termname:'set notation', definition:'<p>Click below to view a PDF that demonstrates Set-Builder Notation<br /><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579718/Set-Builder_Notation.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579718/Set-Builder_Notation.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579718/Set-Builder_Notation.pdf</a></p>')
# term1104 = Term.create(termname:'math anxiety and study skills', definition:'<p>Use the link below for help with common questions about taking a college math course online.<br /><a target="_blank" title="http://libraryguides.waldenu.edu/content.php?pid=379309&amp;sid=3220302" href="http://libraryguides.waldenu.edu/content.php?pid=379309&amp;sid=3220302">http://libraryguides.waldenu.edu/content.php?pid=379309&amp;sid=3220302</a></p>')
# term1105 = Term.create(termname:'conditional statements', definition:'<p>Click below to download a Microsoft&reg; PowerPoint&reg; presentation about Conditional Probability: Problems with &lsquo;And&rsquo;</p><p><a target="_blank" title="http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579654" href="http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579654">http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579654</a></p>')
# term1106 = Term.create(termname:'Help with typing symbols', definition:'<p>Click below to download a Microsoft&reg; Word&reg; document that will help you open and use the Word&reg; Equation Editor.</p><p><a target="_blank" title="http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579701" href="http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579701">http://libraryguides.waldenu.edu/loader.php?type=d&amp;id=579701</a></p>')
# term1107 = Term.create(termname:'truth tables', definition:'<p>Click the link below for a PDF about the Basics of Truth Tables.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf " href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf </a></p><p>Click the links below to watch a series of videos that will help you understand Truth Tables. Be sure to watch them in order.</p><p>Video 1: <a target="_blank" title="http://www.screencast.com/t/YWY0OWM5NWQ " href="http://www.screencast.com/t/YWY0OWM5NWQ%20">http://www.screencast.com/t/YWY0OWM5NWQ </a></p><p>Video 2: <a target="_blank" title="http://www.screencast.com/t/NDRkMWVlZTct" href="http://www.screencast.com/t/NDRkMWVlZTct">http://www.screencast.com/t/NDRkMWVlZTct</a></p><p>Video 3: <a target="_blank" title="http://www.screencast.com/t/ZTUyNTc1ZjAt" href="http://www.screencast.com/t/ZTUyNTc1ZjAt">http://www.screencast.com/t/ZTUyNTc1ZjAt</a></p><p>Video 4: <a target="_blank" title="http://www.screencast.com/t/YjgzMWUzM" href="http://www.screencast.com/t/YjgzMWUzM">http://www.screencast.com/t/YjgzMWUzM</a></p><p>Video 5: <a target="_blank" title="http://www.screencast.com/t/OGM1ZWNmYjU" href="http://www.screencast.com/t/OGM1ZWNmYjU">http://www.screencast.com/t/OGM1ZWNmYjU</a></p><p>Video 6: <a target="_blank" title="http://www.screencast.com/t/NTI4MGIxNTA" href="http://www.screencast.com/t/NTI4MGIxNTA">http://www.screencast.com/t/NTI4MGIxNTA</a></p><p>&nbsp;</p>')
# term1108 = Term.create(termname:'geometric shapes', definition:'<p>Click the link below to watch a brief video called What&rsquo;s in a Name: Naming Notation for Geometric Shapes</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Whats_in_a_Name_Naming_Notations_for_Geometric_Shapes/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Whats_in_a_Name_Naming_Notations_for_Geometric_Shapes/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Whats_in_a_Name_Naming_Notations_for_Geometric_Shapes/index.html</a></p><p>Click below to watch a brief video called The Mathematical Mirror: Similarity and Identity in Shapes</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/The_Mathematical_Mirror_Similarity_and_Identity_in_Shapes/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/The_Mathematical_Mirror_Similarity_and_Identity_in_Shapes/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/The_Mathematical_Mirror_Similarity_and_Identity_in_Shapes/index.html</a></p>')
# term1109 = Term.create(termname:'angle relationships', definition:'<p>Click the link below to watch a brief video called Connect It: Angles and Lines</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Angles_and_Lines_in_Your_Neighborhood/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Angles_and_Lines_in_Your_Neighborhood/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Angles_and_Lines_in_Your_Neighborhood/index.html</a></p>')
# term1110 = Term.create(termname:'order of operations', definition:'<p>Click below for a PDF that explains how to work your way through complex equations in the right order.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/581625/Order_of_Operations.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/581625/Order_of_Operations.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/581625/Order_of_Operations.pdf</a></p><p>Click below to watch a brief video called Does Order Matter: The Order of Operations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Does_Order_Matter_The_Order_of_Operations/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Does_Order_Matter_The_Order_of_Operations/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Does_Order_Matter_The_Order_of_Operations/index.html</a></p>')
# term1111 = Term.create(termname:'Using a calculator: order of operations', definition:'<p>Click below to watch a brief video called Using a Calculator: Order of Operations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Order_of_Operations/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Order_of_Operations/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Order_of_Operations/index.html</a></p>')
# term1112 = Term.create(termname:'Using a calculator: square roots and fractions', definition:'<p>Click the link below to watch a brief video called Using a Calculator: Square Roots and Fractions</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Square_Roots_and_Fractions/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Square_Roots_and_Fractions/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Square_Roots_and_Fractions/index.html</a></p>')
# term1113 = Term.create(termname:'Geometry', definition:'<p>Click the link below to watch a brief video called Math Notations and Symbols: The Universal Language of Geometry</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Geometry/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Geometry/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Geometry/index.html</a></p>')
# term1114 = Term.create(termname:'fractions and decimals', definition:'<p>Click below to watch a brief video called Representations: Fractions to Decimals (and back again)</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Representations_Fractions_to_Decimals/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Representations_Fractions_to_Decimals/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Representations_Fractions_to_Decimals/index.html</a></p>')
# term1115 = Term.create(termname:'frequency distribution', definition:'<p>Click the link below for a PDF that gives an example of classes and frequency distribution.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579697/Frequency_Distribution_Tables_and_Class_Widths.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579697/Frequency_Distribution_Tables_and_Class_Widths.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579697/Frequency_Distribution_Tables_and_Class_Widths.pdf</a></p>')
# term1116 = Term.create(termname:'truth values', definition:'<p>Click the link below for an example of determining the Truth Value of a statement.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579725/Truth_Values.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579725/Truth_Values.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579725/Truth_Values.pdf</a></p><p>Click the link below for a PDF about the Basics of Truth Tables.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579720/Truth_Table_Basics_to_Remember.pdf</a></p>')
# term1117 = Term.create(termname:'using formulas with substitution', definition:'<p>Click the link below to watch a brief video called Multiplication Principle in Combinations and Permutations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html</a></p><p>Click the link below to watch a brief video called Using a Calculator: Permutations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html</a></p>')
# term1118 = Term.create(termname:'variables', definition:'<p>Click below to watch a brief video called Math Notations and Symbols: The Universal Language of Variables</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Variables/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Variables/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Math_Notations_and_Symbols_The_Universal_Language_of_Variables/index.html</a></p>')
# term1119 = Term.create(termname:'permutations', definition:'<p>Click the link below to watch a brief video called Multiplication Principle in Combinations and Permutations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html</a></p><p>Click the link below to watch a brief video called Using a Calculator: Permutations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Using_a_Calculator_Permutations/index.html</a></p>')
# term1120 = Term.create(termname:'combinations', definition:'<p>Click the link below for a PDF that gives examples of combination problems.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579648/Combination_Formula.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579648/Combination_Formula.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579648/Combination_Formula.pdf</a></p><p>Click the link below to watch a brief video called Multiplication Principle in Combinations and Permutations</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Multiplication_Principles_in_Combination_and_Permutation/index.html</a></p>')
# term1121 = Term.create(termname:'fundamental counting principle', definition:'<p>Click below for a PDF that explains how to use the Fundamental Counting Principle to determine probability.</p><p><a target="_blank" title="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579698/Fundamental_Counting_Principle.pdf" href="http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579698/Fundamental_Counting_Principle.pdf">http://lgdata.s3-website-us-east-1.amazonaws.com/docs/1529/579698/Fundamental_Counting_Principle.pdf</a></p><p>Click below to watch a brief video called Beyond the 1, 2, 3s: Principles of Counting Possibilities</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Beyond_the_1_2_3s_Principals_of_Counting_Possibilities/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Beyond_the_1_2_3s_Principals_of_Counting_Possibilities/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Beyond_the_1_2_3s_Principals_of_Counting_Possibilities/index.html</a></p>')
# term1122 = Term.create(termname:'percent', definition:'<p>Click the link below to watch a brief video called Connect It: Comparing Change with Percents</p><p><a target="_blank" title="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Comparing_Change_with_Percents/index.html" href="http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Comparing_Change_with_Percents/index.html">http://mym.cdn.laureate-media.com/2dett4d/NHU/MAT/videos/Connect_It_Comparing_Change_with_Percents/index.html </a></p>')


# termlist653 = Termlist.create(term_id: '653', course_id: '11')
# termlist654 = Termlist.create(term_id: '654', course_id: '11')
# termlist655 = Termlist.create(term_id: '655', course_id: '11')
# termlist656 = Termlist.create(term_id: '656', course_id: '11')
# termlist657 = Termlist.create(term_id: '657', course_id: '11')
# termlist658 = Termlist.create(term_id: '658', course_id: '11')
# termlist659 = Termlist.create(term_id: '659', course_id: '11')
# termlist660 = Termlist.create(term_id: '660', course_id: '11')
# termlist661 = Termlist.create(term_id: '661', course_id: '11')
# termlist662 = Termlist.create(term_id: '662', course_id: '11')
# termlist663 = Termlist.create(term_id: '663', course_id: '11')
# termlist664 = Termlist.create(term_id: '664', course_id: '11')
# termlist665 = Termlist.create(term_id: '665', course_id: '11')
# termlist666 = Termlist.create(term_id: '666', course_id: '11')
# termlist667 = Termlist.create(term_id: '667', course_id: '11')
# termlist668 = Termlist.create(term_id: '668', course_id: '11')
# termlist669 = Termlist.create(term_id: '669', course_id: '11')
# termlist670 = Termlist.create(term_id: '670', course_id: '11')
# termlist671 = Termlist.create(term_id: '671', course_id: '11')
# termlist672 = Termlist.create(term_id: '672', course_id: '11')
# termlist673 = Termlist.create(term_id: '673', course_id: '11')
# termlist674 = Termlist.create(term_id: '674', course_id: '11')
# termlist675 = Termlist.create(term_id: '675', course_id: '11')


# tag1 = Tag.create(tagname:'Education')
# tag2 = Tag.create(tagname:'Management and Technology')
# tag3 = Tag.create(tagname:'General Education')
# tag4 = Tag.create(tagname:'Public Health')
# tag5 = Tag.create(tagname:'Public Administration')
# tag6 = Tag.create(tagname:'Bachelor&#39;s')
# tag7 = Tag.create(tagname:'Master&#39;s')
# tag8 = Tag.create(tagname:'Doctoral')


# taggingsX204 = Tagging.create(tag_id:'8', term_id: '204')
# taggingsX205 = Tagging.create(tag_id:'8', term_id: '205')
# taggingsX206 = Tagging.create(tag_id:'8', term_id: '206')
# taggingsX207 = Tagging.create(tag_id:'8', term_id: '207')
# taggingsX208 = Tagging.create(tag_id:'8', term_id: '208')
# taggingsX209 = Tagging.create(tag_id:'8', term_id: '209')
# taggingsX210 = Tagging.create(tag_id:'8', term_id: '210')
# taggingsX211 = Tagging.create(tag_id:'8', term_id: '211')
# taggingsX212 = Tagging.create(tag_id:'8', term_id: '212')
# taggingsX213 = Tagging.create(tag_id:'8', term_id: '213')
# taggingsX214 = Tagging.create(tag_id:'8', term_id: '214')
# taggingsX215 = Tagging.create(tag_id:'8', term_id: '215')
# taggingsX216 = Tagging.create(tag_id:'8', term_id: '216')
# taggingsX217 = Tagging.create(tag_id:'8', term_id: '217')
# taggingsX218 = Tagging.create(tag_id:'8', term_id: '218')
# taggingsX219 = Tagging.create(tag_id:'8', term_id: '219')
# taggingsX220 = Tagging.create(tag_id:'8', term_id: '220')
# taggingsX221 = Tagging.create(tag_id:'8', term_id: '221')
# taggingsX222 = Tagging.create(tag_id:'8', term_id: '222')
# taggingsX223 = Tagging.create(tag_id:'8', term_id: '223')
# taggingsX224 = Tagging.create(tag_id:'8', term_id: '224')
# taggingsX225 = Tagging.create(tag_id:'8', term_id: '225')
# taggingsX226 = Tagging.create(tag_id:'8', term_id: '226')
# taggingsX227 = Tagging.create(tag_id:'8', term_id: '227')
# taggingsX228 = Tagging.create(tag_id:'8', term_id: '228')
# taggingsX229 = Tagging.create(tag_id:'8', term_id: '229')
# taggingsX230 = Tagging.create(tag_id:'8', term_id: '230')
# taggingsX231 = Tagging.create(tag_id:'8', term_id: '231')
# taggingsX232 = Tagging.create(tag_id:'8', term_id: '232')
# taggingsX233 = Tagging.create(tag_id:'8', term_id: '233')
# taggingsX234 = Tagging.create(tag_id:'8', term_id: '234')
# taggingsX235 = Tagging.create(tag_id:'8', term_id: '235')
# taggingsX236 = Tagging.create(tag_id:'8', term_id: '236')
# taggingsX237 = Tagging.create(tag_id:'8', term_id: '237')
# taggingsX238 = Tagging.create(tag_id:'8', term_id: '238')
# taggingsX239 = Tagging.create(tag_id:'8', term_id: '239')
# taggingsX240 = Tagging.create(tag_id:'8', term_id: '240')
# taggingsX241 = Tagging.create(tag_id:'8', term_id: '241')
# taggingsX242 = Tagging.create(tag_id:'8', term_id: '242')
# taggingsX243 = Tagging.create(tag_id:'8', term_id: '243')
# taggingsX244 = Tagging.create(tag_id:'8', term_id: '244')
# taggingsX245 = Tagging.create(tag_id:'8', term_id: '245')
# taggingsX246 = Tagging.create(tag_id:'8', term_id: '246')
# taggingsX247 = Tagging.create(tag_id:'8', term_id: '247')
# taggingsX248 = Tagging.create(tag_id:'8', term_id: '248')
# taggingsX249 = Tagging.create(tag_id:'8', term_id: '249')
# taggingsX250 = Tagging.create(tag_id:'8', term_id: '250')
# taggingsX251 = Tagging.create(tag_id:'8', term_id: '251')
# taggingsX252 = Tagging.create(tag_id:'8', term_id: '252')
# taggingsX253 = Tagging.create(tag_id:'8', term_id: '253')
# taggingsX254 = Tagging.create(tag_id:'8', term_id: '254')
# taggingsX255 = Tagging.create(tag_id:'8', term_id: '255')
# taggingsX256 = Tagging.create(tag_id:'8', term_id: '256')
# taggingsX257 = Tagging.create(tag_id:'8', term_id: '257')
# taggingsX258 = Tagging.create(tag_id:'8', term_id: '258')
# taggingsX259 = Tagging.create(tag_id:'8', term_id: '259')
# taggingsX260 = Tagging.create(tag_id:'8', term_id: '260')
# taggingsX261 = Tagging.create(tag_id:'8', term_id: '261')
# taggingsX262 = Tagging.create(tag_id:'8', term_id: '262')
# taggingsX263 = Tagging.create(tag_id:'8', term_id: '263')
# taggingsX264 = Tagging.create(tag_id:'8', term_id: '264')
# taggingsX265 = Tagging.create(tag_id:'8', term_id: '265')
# taggingsX266 = Tagging.create(tag_id:'8', term_id: '266')
# taggingsX267 = Tagging.create(tag_id:'8', term_id: '267')
# taggingsX268 = Tagging.create(tag_id:'8', term_id: '268')
# taggingsX269 = Tagging.create(tag_id:'8', term_id: '269')
# taggingsX270 = Tagging.create(tag_id:'8', term_id: '270')
# taggingsX271 = Tagging.create(tag_id:'8', term_id: '271')
# taggingsX272 = Tagging.create(tag_id:'8', term_id: '272')
# taggingsX273 = Tagging.create(tag_id:'8', term_id: '273')
# taggingsX274 = Tagging.create(tag_id:'8', term_id: '274')
# taggingsX275 = Tagging.create(tag_id:'8', term_id: '275')
# taggingsX276 = Tagging.create(tag_id:'8', term_id: '276')
# taggingsX277 = Tagging.create(tag_id:'8', term_id: '277')
# taggingsX278 = Tagging.create(tag_id:'8', term_id: '278')
# taggingsX279 = Tagging.create(tag_id:'8', term_id: '279')
# taggingsX280 = Tagging.create(tag_id:'8', term_id: '280')
# taggingsX281 = Tagging.create(tag_id:'8', term_id: '281')
# taggingsX282 = Tagging.create(tag_id:'8', term_id: '282')
# taggingsX283 = Tagging.create(tag_id:'8', term_id: '283')
# taggingsX284 = Tagging.create(tag_id:'8', term_id: '284')
# taggingsX285 = Tagging.create(tag_id:'8', term_id: '285')
# taggingsX286 = Tagging.create(tag_id:'8', term_id: '286')
# taggingsX287 = Tagging.create(tag_id:'8', term_id: '287')
# taggingsX288 = Tagging.create(tag_id:'8', term_id: '288')
# taggingsX289 = Tagging.create(tag_id:'8', term_id: '289')
# taggingsX290 = Tagging.create(tag_id:'8', term_id: '290')
# taggingsX291 = Tagging.create(tag_id:'8', term_id: '291')
# taggingsX292 = Tagging.create(tag_id:'8', term_id: '292')
# taggingsX293 = Tagging.create(tag_id:'8', term_id: '293')
# taggingsX294 = Tagging.create(tag_id:'8', term_id: '294')
# taggingsX295 = Tagging.create(tag_id:'8', term_id: '295')
# taggingsX296 = Tagging.create(tag_id:'8', term_id: '296')
# taggings100x = Tagging.create(tag_id:'8', term_id: '306')
# taggings101x = Tagging.create(tag_id:'8', term_id: '365')
# taggings102x = Tagging.create(tag_id:'8', term_id: '307')
# taggings103x = Tagging.create(tag_id:'8', term_id: '308')
# taggings104x = Tagging.create(tag_id:'8', term_id: '309')
# taggings105x = Tagging.create(tag_id:'8', term_id: '297')
# taggings106x = Tagging.create(tag_id:'8', term_id: '298')
# taggings107x = Tagging.create(tag_id:'8', term_id: '299')
# taggings108x = Tagging.create(tag_id:'8', term_id: '300')
# taggings109x = Tagging.create(tag_id:'8', term_id: '301')
# taggings110x = Tagging.create(tag_id:'8', term_id: '302')
# taggings111x = Tagging.create(tag_id:'8', term_id: '303')
# taggings112x = Tagging.create(tag_id:'8', term_id: '304')
# taggings113x = Tagging.create(tag_id:'8', term_id: '305')
# taggings114x = Tagging.create(tag_id:'8', term_id: '328')
# taggings115x = Tagging.create(tag_id:'8', term_id: '310')
# taggings116x = Tagging.create(tag_id:'8', term_id: '311')
# taggings117x = Tagging.create(tag_id:'8', term_id: '312')
# taggings118x = Tagging.create(tag_id:'8', term_id: '313')
# taggings119x = Tagging.create(tag_id:'8', term_id: '314')
# taggings120x = Tagging.create(tag_id:'8', term_id: '315')
# taggings121x = Tagging.create(tag_id:'8', term_id: '316')
# taggings122x = Tagging.create(tag_id:'8', term_id: '317')
# taggings123x = Tagging.create(tag_id:'8', term_id: '318')
# taggings124x = Tagging.create(tag_id:'8', term_id: '319')
# taggings125x = Tagging.create(tag_id:'8', term_id: '320')
# taggings126x = Tagging.create(tag_id:'8', term_id: '321')
# taggings127x = Tagging.create(tag_id:'8', term_id: '322')
# taggings128x = Tagging.create(tag_id:'8', term_id: '323')
# taggings129x = Tagging.create(tag_id:'8', term_id: '324')
# taggings130x = Tagging.create(tag_id:'8', term_id: '325')
# taggings131x = Tagging.create(tag_id:'8', term_id: '326')
# taggings132x = Tagging.create(tag_id:'8', term_id: '327')
# taggings133x = Tagging.create(tag_id:'8', term_id: '329')
# taggings134x = Tagging.create(tag_id:'8', term_id: '330')
# taggings135x = Tagging.create(tag_id:'8', term_id: '331')
# taggings136x = Tagging.create(tag_id:'8', term_id: '332')
# taggings137x = Tagging.create(tag_id:'8', term_id: '333')
# taggings138x = Tagging.create(tag_id:'8', term_id: '334')
# taggings139x = Tagging.create(tag_id:'8', term_id: '335')
# taggings140x = Tagging.create(tag_id:'8', term_id: '336')
# taggings141x = Tagging.create(tag_id:'8', term_id: '337')
# taggings142x = Tagging.create(tag_id:'8', term_id: '338')
# taggings143x = Tagging.create(tag_id:'8', term_id: '339')
# taggings144x = Tagging.create(tag_id:'8', term_id: '340')
# taggings145x = Tagging.create(tag_id:'8', term_id: '341')
# taggings146x = Tagging.create(tag_id:'8', term_id: '342')
# taggings147x = Tagging.create(tag_id:'8', term_id: '343')
# taggings148x = Tagging.create(tag_id:'8', term_id: '344')
# taggings149x = Tagging.create(tag_id:'8', term_id: '364')
# taggings150x = Tagging.create(tag_id:'8', term_id: '345')
# taggings151x = Tagging.create(tag_id:'8', term_id: '346')
# taggings152x = Tagging.create(tag_id:'8', term_id: '347')
# taggings153x = Tagging.create(tag_id:'8', term_id: '348')
# taggings154x = Tagging.create(tag_id:'8', term_id: '349')
# taggings155x = Tagging.create(tag_id:'8', term_id: '350')
# taggings156x = Tagging.create(tag_id:'8', term_id: '351')
# taggings157x = Tagging.create(tag_id:'8', term_id: '352')
# taggings158x = Tagging.create(tag_id:'8', term_id: '353')
# taggings159x = Tagging.create(tag_id:'8', term_id: '354')
# taggings160x = Tagging.create(tag_id:'8', term_id: '355')
# taggings161x = Tagging.create(tag_id:'8', term_id: '356')
# taggings162x = Tagging.create(tag_id:'8', term_id: '357')
# taggings163x = Tagging.create(tag_id:'8', term_id: '358')
# taggings164x = Tagging.create(tag_id:'8', term_id: '359')
# taggings165x = Tagging.create(tag_id:'8', term_id: '360')
# taggings166x = Tagging.create(tag_id:'8', term_id: '361')
# taggings167x = Tagging.create(tag_id:'8', term_id: '362')
# taggings168x = Tagging.create(tag_id:'8', term_id: '363')
# taggings169x = Tagging.create(tag_id:'8', term_id: '366')
# taggings170x = Tagging.create(tag_id:'8', term_id: '367')
# taggings171x = Tagging.create(tag_id:'8', term_id: '368')
# taggings172x = Tagging.create(tag_id:'8', term_id: '369')
# taggings173x = Tagging.create(tag_id:'8', term_id: '370')
# taggings174x = Tagging.create(tag_id:'8', term_id: '371')
# taggings175x = Tagging.create(tag_id:'8', term_id: '372')
# taggings176x = Tagging.create(tag_id:'8', term_id: '373')
# taggings177x = Tagging.create(tag_id:'8', term_id: '374')
# taggings178x = Tagging.create(tag_id:'8', term_id: '375')
# taggings179x = Tagging.create(tag_id:'8', term_id: '376')
# taggings180x = Tagging.create(tag_id:'8', term_id: '377')
# taggings181x = Tagging.create(tag_id:'8', term_id: '378')
# taggings182x = Tagging.create(tag_id:'8', term_id: '379')
# taggings183x = Tagging.create(tag_id:'8', term_id: '380')
# taggings184x = Tagging.create(tag_id:'8', term_id: '381')
# taggings185x = Tagging.create(tag_id:'8', term_id: '382')
# taggings186x = Tagging.create(tag_id:'8', term_id: '383')
# taggings187x = Tagging.create(tag_id:'8', term_id: '384')
# taggings300x = Tagging.create(tag_id: '7', term_id: '385')
# taggings301x = Tagging.create(tag_id: '7', term_id: '386')
# taggings302x = Tagging.create(tag_id: '7', term_id: '387')
# taggings303x = Tagging.create(tag_id: '7', term_id: '388')
# taggings304x = Tagging.create(tag_id: '7', term_id: '389')
# taggings600x = Tagging.create(tag_id: '7', term_id: '390')
# taggings601x = Tagging.create(tag_id: '7', term_id: '391')
# taggings602x = Tagging.create(tag_id: '7', term_id: '392')
# taggings603x = Tagging.create(tag_id: '7', term_id: '393')
# taggings604x = Tagging.create(tag_id: '7', term_id: '394')
# taggings605x = Tagging.create(tag_id: '7', term_id: '395')
# taggings606x = Tagging.create(tag_id: '7', term_id: '396')
# taggings607x = Tagging.create(tag_id: '7', term_id: '397')
# taggings608x = Tagging.create(tag_id: '7', term_id: '398')
# taggings609x = Tagging.create(tag_id: '7', term_id: '399')
# taggings610x = Tagging.create(tag_id: '7', term_id: '400')
# taggings611x = Tagging.create(tag_id: '7', term_id: '401')
# taggings612x = Tagging.create(tag_id: '7', term_id: '402')
# taggings613x = Tagging.create(tag_id: '7', term_id: '403')
# taggings614x = Tagging.create(tag_id: '7', term_id: '404')
# taggings615x = Tagging.create(tag_id: '7', term_id: '405')
# taggings616x = Tagging.create(tag_id: '7', term_id: '406')
# taggings617x = Tagging.create(tag_id: '7', term_id: '407')
# taggings618x = Tagging.create(tag_id: '7', term_id: '408')
# taggings619x = Tagging.create(tag_id: '7', term_id: '409')
# taggings620x = Tagging.create(tag_id: '7', term_id: '410')
# taggings621x = Tagging.create(tag_id: '7', term_id: '411')
# taggings622x = Tagging.create(tag_id: '7', term_id: '412')
# taggings623x = Tagging.create(tag_id: '7', term_id: '413')
# taggings624x = Tagging.create(tag_id: '7', term_id: '414')
# taggings625x = Tagging.create(tag_id: '7', term_id: '415')
# taggings600x = Tagging.create(tag_id: '7', term_id: '416')
# taggings601x = Tagging.create(tag_id: '7', term_id: '417')
# taggings602x = Tagging.create(tag_id: '7', term_id: '418')
# taggings603x = Tagging.create(tag_id: '7', term_id: '419')
# taggings604x = Tagging.create(tag_id: '7', term_id: '420')
# taggings605x = Tagging.create(tag_id: '7', term_id: '421')
# taggings606x = Tagging.create(tag_id: '7', term_id: '422')
# taggings750x = Tagging.create(tag_id: '7', term_id: '424')
# taggings751x = Tagging.create(tag_id: '7', term_id: '425')
# taggings752x = Tagging.create(tag_id: '7', term_id: '426')
# taggings753x = Tagging.create(tag_id: '7', term_id: '427')
# taggings754x = Tagging.create(tag_id: '7', term_id: '428')
# taggings755x = Tagging.create(tag_id: '7', term_id: '429')
# taggings756x = Tagging.create(tag_id: '7', term_id: '430')
# taggings757x = Tagging.create(tag_id: '7', term_id: '431')
# taggings758x = Tagging.create(tag_id: '7', term_id: '432')
# taggings759x = Tagging.create(tag_id: '7', term_id: '433')
# taggings760x = Tagging.create(tag_id: '7', term_id: '434')
# taggings761x = Tagging.create(tag_id: '7', term_id: '435')
# taggings762x = Tagging.create(tag_id: '7', term_id: '436')
# taggings250x = Tagging.create(tag_id: '7', term_id: '451')
# taggings251x = Tagging.create(tag_id: '7', term_id: '452')
# taggings252x = Tagging.create(tag_id: '7', term_id: '453')
# taggings253x = Tagging.create(tag_id: '7', term_id: '454')
# taggings254x = Tagging.create(tag_id: '7', term_id: '455')
# taggings255x = Tagging.create(tag_id: '7', term_id: '456')
# taggings256x = Tagging.create(tag_id: '7', term_id: '457')
# taggings257x = Tagging.create(tag_id: '7', term_id: '458')
# taggings258x = Tagging.create(tag_id: '7', term_id: '459')
# taggings259x = Tagging.create(tag_id: '7', term_id: '460')
# taggings260x = Tagging.create(tag_id: '7', term_id: '461')
# taggings261x = Tagging.create(tag_id: '7', term_id: '462')
# taggings262x = Tagging.create(tag_id: '7', term_id: '463')
# taggings464x = Tagging.create(term_id: '464', tag_id: '9')
# taggings465x = Tagging.create(term_id: '465', tag_id: '9')
# taggings466x = Tagging.create(term_id: '466', tag_id: '9')
# taggings467x = Tagging.create(term_id: '467', tag_id: '9')
# taggings468x = Tagging.create(term_id: '468', tag_id: '9')
# taggings469x = Tagging.create(term_id: '469', tag_id: '9')
# taggings470x = Tagging.create(term_id: '470', tag_id: '9')
# taggings471x = Tagging.create(term_id: '471', tag_id: '9')
# taggings472x = Tagging.create(term_id: '472', tag_id: '9')
# taggings473x = Tagging.create(term_id: '473', tag_id: '9')
# taggings474x = Tagging.create(term_id: '474', tag_id: '9')
# taggings475x = Tagging.create(term_id: '475', tag_id: '9')
# taggings476x = Tagging.create(term_id: '476', tag_id: '9')
# taggings477x = Tagging.create(term_id: '477', tag_id: '9')
# taggings478x = Tagging.create(term_id: '478', tag_id: '9')
# taggings479x = Tagging.create(term_id: '479', tag_id: '9')
# taggings480x = Tagging.create(term_id: '480', tag_id: '9')
# taggings481x = Tagging.create(term_id: '481', tag_id: '9')
# taggings482x = Tagging.create(term_id: '482', tag_id: '9')
# taggings483x = Tagging.create(term_id: '483', tag_id: '9')
# taggings484x = Tagging.create(term_id: '484', tag_id: '9')
# taggings485x = Tagging.create(term_id: '485', tag_id: '9')
# taggings486x = Tagging.create(term_id: '486', tag_id: '9')
# taggings487x = Tagging.create(term_id: '487', tag_id: '9')
# taggings488x = Tagging.create(term_id: '488', tag_id: '9')
# taggings489x = Tagging.create(term_id: '489', tag_id: '9')
# taggings490x = Tagging.create(term_id: '490', tag_id: '9')
# taggings491x = Tagging.create(term_id: '491', tag_id: '9')
# taggings492x = Tagging.create(term_id: '492', tag_id: '9')
# taggings493x = Tagging.create(term_id: '493', tag_id: '9')
# taggings494x = Tagging.create(term_id: '494', tag_id: '9')
# taggings495x = Tagging.create(term_id: '495', tag_id: '9')
# taggings496x = Tagging.create(term_id: '496', tag_id: '9')
# taggings497x = Tagging.create(term_id: '497', tag_id: '11')
# taggings498x = Tagging.create(term_id: '498', tag_id: '11')
# taggings499x = Tagging.create(term_id: '499', tag_id: '11')
# taggings500x = Tagging.create(term_id: '500', tag_id: '11')
# taggings501x = Tagging.create(term_id: '501', tag_id: '11')
# taggings502x = Tagging.create(term_id: '502', tag_id: '11')
# taggings503x = Tagging.create(term_id: '503', tag_id: '11')
# taggings504x = Tagging.create(term_id: '504', tag_id: '11')
# taggings505x = Tagging.create(term_id: '505', tag_id: '11')
# taggings506x = Tagging.create(term_id: '506', tag_id: '11')
# taggings507x = Tagging.create(term_id: '507', tag_id: '11')
# taggings508x = Tagging.create(term_id: '508', tag_id: '11')
# taggings509x = Tagging.create(term_id: '509', tag_id: '11')
# taggings510x = Tagging.create(term_id: '510', tag_id: '11')
# taggings520x = Tagging.create(term_id: '520', tag_id: '11')
# taggings511x = Tagging.create(term_id: '511', tag_id: '11')
# taggings512x = Tagging.create(term_id: '512', tag_id: '11')
# taggings513x = Tagging.create(term_id: '513', tag_id: '11')
# taggings514x = Tagging.create(term_id: '514', tag_id: '11')
# taggings515x = Tagging.create(term_id: '515', tag_id: '11')
# taggings516x = Tagging.create(term_id: '516', tag_id: '11')
# taggings517x = Tagging.create(term_id: '517', tag_id: '11')
# taggings518x = Tagging.create(term_id: '518', tag_id: '11')
# taggings519x = Tagging.create(term_id: '519', tag_id: '11')
# taggings521x = Tagging.create(term_id: '521', tag_id: '11')
# taggings522x = Tagging.create(term_id: '522', tag_id: '11')
# taggings523x = Tagging.create(term_id: '523', tag_id: '11')
# taggings524x = Tagging.create(term_id: '524', tag_id: '11')
# taggings525x = Tagging.create(term_id: '525', tag_id: '11')
# taggings526x = Tagging.create(term_id: '526', tag_id: '11')
# taggings527x = Tagging.create(term_id: '527', tag_id: '11')
# taggings528x = Tagging.create(term_id: '528', tag_id: '11')
# taggings529x = Tagging.create(term_id: '529', tag_id: '11')
# taggings530x = Tagging.create(term_id: '530', tag_id: '11')
# taggings531x = Tagging.create(term_id: '531', tag_id: '11')
# taggings532x = Tagging.create(term_id: '532', tag_id: '11')
# taggings533x = Tagging.create(term_id: '533', tag_id: '11')
# taggings534x = Tagging.create(term_id: '534', tag_id: '9')
# taggings535y = Tagging.create(term_id: '535', tag_id: '9')
# taggings544y = Tagging.create(term_id: '544', tag_id: '9')
# taggings536y = Tagging.create(term_id: '536', tag_id: '9')
# taggings537y = Tagging.create(term_id: '537', tag_id: '9')
# taggings538y = Tagging.create(term_id: '538', tag_id: '9')
# taggings539y = Tagging.create(term_id: '539', tag_id: '9')
# taggings540y = Tagging.create(term_id: '540', tag_id: '9')
# taggings541y = Tagging.create(term_id: '541', tag_id: '9')
# taggings542y = Tagging.create(term_id: '542', tag_id: '9')
# taggings543y = Tagging.create(term_id: '543', tag_id: '9')
# taggings545y = Tagging.create(term_id: '545', tag_id: '9')
# taggings548y = Tagging.create(term_id: '548', tag_id: '9')
# taggings549y = Tagging.create(term_id: '549', tag_id: '9')
# taggings550y = Tagging.create(term_id: '550', tag_id: '9')
# taggings551y = Tagging.create(term_id: '551', tag_id: '9')
# taggings552y = Tagging.create(term_id: '552', tag_id: '9')
# taggings553y = Tagging.create(term_id: '553', tag_id: '9')
# taggings554y = Tagging.create(term_id: '554', tag_id: '9')
# taggings555y = Tagging.create(term_id: '555', tag_id: '9')
# taggings556y = Tagging.create(term_id: '556', tag_id: '9')
# taggings557y = Tagging.create(term_id: '557', tag_id: '9')
# taggings558y = Tagging.create(term_id: '558', tag_id: '9')
# taggings559y = Tagging.create(term_id: '559', tag_id: '9')
# taggings560y = Tagging.create(term_id: '560', tag_id: '9')
# taggings561y = Tagging.create(term_id: '561', tag_id: '9')
# taggings562y = Tagging.create(term_id: '562', tag_id: '9')
# taggings563y = Tagging.create(term_id: '563', tag_id: '9')
# taggings564y = Tagging.create(term_id: '564', tag_id: '9')
# taggings565y = Tagging.create(term_id: '565', tag_id: '9')
# taggings566y = Tagging.create(term_id: '566', tag_id: '9')
# taggings567y = Tagging.create(term_id: '567', tag_id: '9')
# taggings568y = Tagging.create(term_id: '568', tag_id: '9')
# taggings569y = Tagging.create(term_id: '569', tag_id: '9')
# taggings570y = Tagging.create(term_id: '570', tag_id: '9')
# taggings571y = Tagging.create(term_id: '571', tag_id: '9')
# taggings572y = Tagging.create(term_id: '572', tag_id: '9')
# taggings573y = Tagging.create(term_id: '573', tag_id: '9')
# taggings574y = Tagging.create(term_id: '574', tag_id: '9')
# taggings575y = Tagging.create(term_id: '575', tag_id: '9')
# taggings578y = Tagging.create(term_id: '578', tag_id: '9')
# taggings579y = Tagging.create(term_id: '579', tag_id: '9')
# taggings580y = Tagging.create(term_id: '580', tag_id: '9')
# taggings581y = Tagging.create(term_id: '581', tag_id: '9')
# taggings582y = Tagging.create(term_id: '582', tag_id: '9')
# taggings583y = Tagging.create(term_id: '583', tag_id: '9')
# taggings584y = Tagging.create(term_id: '584', tag_id: '9')
# taggings585y = Tagging.create(term_id: '585', tag_id: '9')
# taggings577y = Tagging.create(term_id: '577', tag_id: '9')
# taggings576y = Tagging.create(term_id: '576', tag_id: '9')
# taggings547y = Tagging.create(term_id: '547', tag_id: '9')
# taggings546y = Tagging.create(term_id: '546', tag_id: '9')
# taggings589y = Tagging.create(term_id: '589', tag_id: '9')
# taggings586y = Tagging.create(term_id: '586', tag_id: '9')
# taggings587y = Tagging.create(term_id: '587', tag_id: '9')
# taggings588y = Tagging.create(term_id: '588', tag_id: '9')
# taggings590y = Tagging.create(term_id: '590', tag_id: '9')
# taggings591y = Tagging.create(term_id: '591', tag_id: '9')
# taggings592y = Tagging.create(term_id: '592', tag_id: '9')
# taggings593y = Tagging.create(term_id: '593', tag_id: '9')
# taggings594y = Tagging.create(term_id: '594', tag_id: '9')
# taggings595y = Tagging.create(term_id: '595', tag_id: '9')
# taggings596y = Tagging.create(term_id: '596', tag_id: '9')
# taggings597y = Tagging.create(term_id: '597', tag_id: '9')
# taggings598y = Tagging.create(term_id: '598', tag_id: '9')
# taggings599y = Tagging.create(term_id: '599', tag_id: '9')
# taggings600y = Tagging.create(term_id: '600', tag_id: '9')
# taggings601y = Tagging.create(term_id: '601', tag_id: '9')
# taggings602y = Tagging.create(term_id: '602', tag_id: '9')
# taggings603y = Tagging.create(term_id: '603', tag_id: '9')
# taggings604y = Tagging.create(term_id: '604', tag_id: '9')
# taggings605y = Tagging.create(term_id: '605', tag_id: '9')
# taggings606y = Tagging.create(term_id: '606', tag_id: '9')
# taggings607y = Tagging.create(term_id: '607', tag_id: '9')
# taggings608y = Tagging.create(term_id: '608', tag_id: '9')
# taggings609y = Tagging.create(term_id: '609', tag_id: '9')
# taggings610y = Tagging.create(term_id: '610', tag_id: '9')
# taggings611y = Tagging.create(term_id: '611', tag_id: '9')
# taggings612y = Tagging.create(term_id: '612', tag_id: '9')
# taggings613y = Tagging.create(term_id: '613', tag_id: '9')
# taggings614y = Tagging.create(term_id: '614', tag_id: '9')
# taggings615y = Tagging.create(term_id: '615', tag_id: '9')
# taggings616y = Tagging.create(term_id: '616', tag_id: '9')
# taggings617y = Tagging.create(term_id: '617', tag_id: '9')
# taggings618y = Tagging.create(term_id: '618', tag_id: '9')
# taggings619y = Tagging.create(term_id: '619', tag_id: '9')
# taggings620y = Tagging.create(term_id: '620', tag_id: '9')
# taggings621y = Tagging.create(term_id: '621', tag_id: '9')
# taggings622y = Tagging.create(term_id: '622', tag_id: '9')
# taggings623y = Tagging.create(term_id: '623', tag_id: '9')
# taggings624y = Tagging.create(term_id: '624', tag_id: '9')
# taggings625y = Tagging.create(term_id: '625', tag_id: '9')
# taggings626y = Tagging.create(term_id: '626', tag_id: '9')
# taggings627y = Tagging.create(term_id: '627', tag_id: '9')
# taggings628y = Tagging.create(term_id: '628', tag_id: '9')
# taggings629y = Tagging.create(term_id: '629', tag_id: '9')
# taggings630y = Tagging.create(term_id: '630', tag_id: '9')
# taggings631y = Tagging.create(term_id: '631', tag_id: '9')
# taggings632y = Tagging.create(term_id: '632', tag_id: '9')
# taggings633y = Tagging.create(term_id: '633', tag_id: '9')
# taggings634y = Tagging.create(term_id: '634', tag_id: '9')
# taggings635y = Tagging.create(term_id: '635', tag_id: '9')
# taggings636y = Tagging.create(term_id: '636', tag_id: '9')
# taggings637y = Tagging.create(term_id: '637', tag_id: '9')
# taggings638y = Tagging.create(term_id: '638', tag_id: '9')
# taggings639y = Tagging.create(term_id: '639', tag_id: '9')
# taggings640y = Tagging.create(term_id: '640', tag_id: '9')
# taggings641y = Tagging.create(term_id: '641', tag_id: '9')
# taggings642y = Tagging.create(term_id: '642', tag_id: '9')
# taggings643y = Tagging.create(term_id: '643', tag_id: '9')
# taggings644y = Tagging.create(term_id: '644', tag_id: '9')
# taggings645y = Tagging.create(term_id: '645', tag_id: '9')
# taggings646y = Tagging.create(term_id: '646', tag_id: '9')
# taggings647y = Tagging.create(term_id: '647', tag_id: '9')
# taggings648y = Tagging.create(term_id: '648', tag_id: '9')
# taggings649y = Tagging.create(term_id: '649', tag_id: '9')
# taggings650y = Tagging.create(term_id: '650', tag_id: '9')
# taggings651y = Tagging.create(term_id: '651', tag_id: '9')
# taggings652y = Tagging.create(term_id: '652', tag_id: '9')
# taggings653y = Tagging.create(term_id: '653', tag_id: '9')
# taggings654y = Tagging.create(term_id: '654', tag_id: '9')
# taggings655y = Tagging.create(term_id: '655', tag_id: '9')
# taggings656y = Tagging.create(term_id: '656', tag_id: '9')
# taggings657y = Tagging.create(term_id: '657', tag_id: '9')
# taggings658y = Tagging.create(term_id: '658', tag_id: '9')
# taggings659y = Tagging.create(term_id: '659', tag_id: '9')
# taggings660y = Tagging.create(term_id: '660', tag_id: '9')
# taggings661y = Tagging.create(term_id: '661', tag_id: '9')
# taggings662y = Tagging.create(term_id: '662', tag_id: '9')
# taggings663y = Tagging.create(term_id: '663', tag_id: '9')
# taggings664y = Tagging.create(term_id: '664', tag_id: '9')
# taggings665y = Tagging.create(term_id: '665', tag_id: '9')
# taggings666y = Tagging.create(term_id: '666', tag_id: '9')
# taggings667y = Tagging.create(term_id: '667', tag_id: '9')
# taggings668y = Tagging.create(term_id: '668', tag_id: '9')
# taggings669y = Tagging.create(term_id: '669', tag_id: '9')
# taggings670y = Tagging.create(term_id: '670', tag_id: '9')
# taggings671y = Tagging.create(term_id: '671', tag_id: '9')
# taggings672y = Tagging.create(term_id: '672', tag_id: '9')
# taggings673y = Tagging.create(term_id: '673', tag_id: '9')
# taggings674y = Tagging.create(term_id: '674', tag_id: '9')
# taggings675y = Tagging.create(term_id: '675', tag_id: '9')


# ytaggingsX204 = Tagging.create(tag_id:'12', term_id: '204')
# ytaggingsX205 = Tagging.create(tag_id:'12', term_id: '205')
# ytaggingsX206 = Tagging.create(tag_id:'12', term_id: '206')
# ytaggingsX207 = Tagging.create(tag_id:'12', term_id: '207')
# ytaggingsX208 = Tagging.create(tag_id:'12', term_id: '208')
# ytaggingsX209 = Tagging.create(tag_id:'12', term_id: '209')
# ytaggingsX210 = Tagging.create(tag_id:'12', term_id: '210')
# ytaggingsX211 = Tagging.create(tag_id:'12', term_id: '211')
# ytaggingsX212 = Tagging.create(tag_id:'12', term_id: '212')
# ytaggingsX213 = Tagging.create(tag_id:'12', term_id: '213')
# ytaggingsX214 = Tagging.create(tag_id:'12', term_id: '214')
# ytaggingsX215 = Tagging.create(tag_id:'12', term_id: '215')
# ytaggingsX216 = Tagging.create(tag_id:'12', term_id: '216')
# ytaggingsX217 = Tagging.create(tag_id:'12', term_id: '217')
# ytaggingsX218 = Tagging.create(tag_id:'12', term_id: '218')
# ytaggingsX219 = Tagging.create(tag_id:'12', term_id: '219')
# ytaggingsX220 = Tagging.create(tag_id:'12', term_id: '220')
# ytaggingsX221 = Tagging.create(tag_id:'12', term_id: '221')
# ytaggingsX222 = Tagging.create(tag_id:'12', term_id: '222')
# ytaggingsX223 = Tagging.create(tag_id:'12', term_id: '223')
# ytaggingsX224 = Tagging.create(tag_id:'12', term_id: '224')
# ytaggingsX225 = Tagging.create(tag_id:'12', term_id: '225')
# ytaggingsX226 = Tagging.create(tag_id:'12', term_id: '226')
# ytaggingsX227 = Tagging.create(tag_id:'12', term_id: '227')
# ytaggingsX228 = Tagging.create(tag_id:'12', term_id: '228')
# ytaggingsX229 = Tagging.create(tag_id:'12', term_id: '229')
# ytaggingsX230 = Tagging.create(tag_id:'12', term_id: '230')
# ytaggingsX231 = Tagging.create(tag_id:'12', term_id: '231')
# ytaggingsX232 = Tagging.create(tag_id:'12', term_id: '232')
# ytaggingsX233 = Tagging.create(tag_id:'12', term_id: '233')
# ytaggingsX234 = Tagging.create(tag_id:'12', term_id: '234')
# ytaggingsX235 = Tagging.create(tag_id:'12', term_id: '235')
# ytaggingsX236 = Tagging.create(tag_id:'12', term_id: '236')
# ytaggingsX237 = Tagging.create(tag_id:'12', term_id: '237')
# ytaggingsX238 = Tagging.create(tag_id:'12', term_id: '238')
# ytaggingsX239 = Tagging.create(tag_id:'12', term_id: '239')
# ytaggingsX240 = Tagging.create(tag_id:'12', term_id: '240')
# ytaggingsX241 = Tagging.create(tag_id:'12', term_id: '241')
# ytaggingsX242 = Tagging.create(tag_id:'12', term_id: '242')
# ytaggingsX243 = Tagging.create(tag_id:'12', term_id: '243')
# ytaggingsX244 = Tagging.create(tag_id:'12', term_id: '244')
# ytaggingsX245 = Tagging.create(tag_id:'12', term_id: '245')
# ytaggingsX246 = Tagging.create(tag_id:'12', term_id: '246')
# ytaggingsX247 = Tagging.create(tag_id:'12', term_id: '247')
# ytaggingsX248 = Tagging.create(tag_id:'12', term_id: '248')
# ytaggingsX249 = Tagging.create(tag_id:'12', term_id: '249')
# ytaggingsX250 = Tagging.create(tag_id:'12', term_id: '250')
# ytaggingsX251 = Tagging.create(tag_id:'12', term_id: '251')
# ytaggingsX252 = Tagging.create(tag_id:'12', term_id: '252')
# ytaggingsX253 = Tagging.create(tag_id:'12', term_id: '253')
# ytaggingsX254 = Tagging.create(tag_id:'12', term_id: '254')
# ytaggingsX255 = Tagging.create(tag_id:'12', term_id: '255')
# ytaggingsX256 = Tagging.create(tag_id:'12', term_id: '256')
# ytaggingsX257 = Tagging.create(tag_id:'12', term_id: '257')
# ytaggingsX258 = Tagging.create(tag_id:'12', term_id: '258')
# ytaggingsX259 = Tagging.create(tag_id:'12', term_id: '259')
# ytaggingsX260 = Tagging.create(tag_id:'12', term_id: '260')
# ytaggingsX261 = Tagging.create(tag_id:'12', term_id: '261')
# ytaggingsX262 = Tagging.create(tag_id:'12', term_id: '262')
# ytaggingsX263 = Tagging.create(tag_id:'12', term_id: '263')
# ytaggingsX264 = Tagging.create(tag_id:'12', term_id: '264')
# ytaggingsX265 = Tagging.create(tag_id:'12', term_id: '265')
# ytaggingsX266 = Tagging.create(tag_id:'12', term_id: '266')
# ytaggingsX267 = Tagging.create(tag_id:'12', term_id: '267')
# ytaggingsX268 = Tagging.create(tag_id:'12', term_id: '268')
# ytaggingsX269 = Tagging.create(tag_id:'12', term_id: '269')
# ytaggingsX270 = Tagging.create(tag_id:'12', term_id: '270')
# ytaggingsX271 = Tagging.create(tag_id:'12', term_id: '271')
# ytaggingsX272 = Tagging.create(tag_id:'12', term_id: '272')
# ytaggingsX273 = Tagging.create(tag_id:'12', term_id: '273')
# ytaggingsX274 = Tagging.create(tag_id:'12', term_id: '274')
# ytaggingsX275 = Tagging.create(tag_id:'12', term_id: '275')
# ytaggingsX276 = Tagging.create(tag_id:'12', term_id: '276')
# ytaggingsX277 = Tagging.create(tag_id:'12', term_id: '277')
# ytaggingsX278 = Tagging.create(tag_id:'12', term_id: '278')
# ytaggingsX279 = Tagging.create(tag_id:'12', term_id: '279')
# ytaggingsX280 = Tagging.create(tag_id:'12', term_id: '280')
# ytaggingsX281 = Tagging.create(tag_id:'12', term_id: '281')
# ytaggingsX282 = Tagging.create(tag_id:'12', term_id: '282')
# ytaggingsX283 = Tagging.create(tag_id:'12', term_id: '283')
# ytaggingsX284 = Tagging.create(tag_id:'12', term_id: '284')
# ytaggingsX285 = Tagging.create(tag_id:'12', term_id: '285')
# ytaggingsX286 = Tagging.create(tag_id:'12', term_id: '286')
# ytaggingsX287 = Tagging.create(tag_id:'12', term_id: '287')
# ytaggingsX288 = Tagging.create(tag_id:'12', term_id: '288')
# ytaggingsX289 = Tagging.create(tag_id:'12', term_id: '289')
# ytaggingsX290 = Tagging.create(tag_id:'12', term_id: '290')
# ytaggingsX291 = Tagging.create(tag_id:'12', term_id: '291')
# ytaggingsX292 = Tagging.create(tag_id:'12', term_id: '292')
# ytaggingsX293 = Tagging.create(tag_id:'12', term_id: '293')
# ytaggingsX294 = Tagging.create(tag_id:'12', term_id: '294')
# ytaggingsX295 = Tagging.create(tag_id:'12', term_id: '295')
# ytaggingsX296 = Tagging.create(tag_id:'12', term_id: '296')
# ytaggings100x = Tagging.create(tag_id:'12', term_id: '306')
# ytaggings101x = Tagging.create(tag_id:'12', term_id: '365')
# ytaggings102x = Tagging.create(tag_id:'12', term_id: '307')
# ytaggings103x = Tagging.create(tag_id:'12', term_id: '308')
# ytaggings104x = Tagging.create(tag_id:'12', term_id: '309')
# ytaggings105x = Tagging.create(tag_id:'12', term_id: '297')
# ytaggings106x = Tagging.create(tag_id:'12', term_id: '298')
# ytaggings107x = Tagging.create(tag_id:'12', term_id: '299')
# ytaggings108x = Tagging.create(tag_id:'12', term_id: '300')
# ytaggings109x = Tagging.create(tag_id:'12', term_id: '301')
# ytaggings110x = Tagging.create(tag_id:'12', term_id: '302')
# ytaggings111x = Tagging.create(tag_id:'12', term_id: '303')
# ytaggings112x = Tagging.create(tag_id:'12', term_id: '304')
# ytaggings113x = Tagging.create(tag_id:'12', term_id: '305')
# ytaggings114x = Tagging.create(tag_id:'12', term_id: '328')
# ytaggings115x = Tagging.create(tag_id:'12', term_id: '310')
# ytaggings116x = Tagging.create(tag_id:'12', term_id: '311')
# ytaggings117x = Tagging.create(tag_id:'12', term_id: '312')
# ytaggings118x = Tagging.create(tag_id:'12', term_id: '313')
# ytaggings119x = Tagging.create(tag_id:'12', term_id: '314')
# ytaggings120x = Tagging.create(tag_id:'12', term_id: '315')
# ytaggings121x = Tagging.create(tag_id:'12', term_id: '316')
# ytaggings122x = Tagging.create(tag_id:'12', term_id: '317')
# ytaggings123x = Tagging.create(tag_id:'12', term_id: '318')
# ytaggings124x = Tagging.create(tag_id:'12', term_id: '319')
# ytaggings125x = Tagging.create(tag_id:'12', term_id: '320')
# ytaggings126x = Tagging.create(tag_id:'12', term_id: '321')
# ytaggings127x = Tagging.create(tag_id:'12', term_id: '322')
# ytaggings128x = Tagging.create(tag_id:'12', term_id: '323')
# ytaggings129x = Tagging.create(tag_id:'12', term_id: '324')
# ytaggings130x = Tagging.create(tag_id:'12', term_id: '325')
# ytaggings131x = Tagging.create(tag_id:'12', term_id: '326')
# ytaggings132x = Tagging.create(tag_id:'12', term_id: '327')
# ytaggings133x = Tagging.create(tag_id:'12', term_id: '329')
# ytaggings134x = Tagging.create(tag_id:'12', term_id: '330')
# ytaggings135x = Tagging.create(tag_id:'12', term_id: '331')
# ytaggings136x = Tagging.create(tag_id:'12', term_id: '332')
# ytaggings137x = Tagging.create(tag_id:'12', term_id: '333')
# ytaggings138x = Tagging.create(tag_id:'12', term_id: '334')
# ytaggings139x = Tagging.create(tag_id:'12', term_id: '335')
# ytaggings140x = Tagging.create(tag_id:'12', term_id: '336')
# ytaggings141x = Tagging.create(tag_id:'12', term_id: '337')
# ytaggings142x = Tagging.create(tag_id:'12', term_id: '338')
# ytaggings143x = Tagging.create(tag_id:'12', term_id: '339')
# ytaggings144x = Tagging.create(tag_id:'12', term_id: '340')
# ytaggings145x = Tagging.create(tag_id:'12', term_id: '341')
# ytaggings146x = Tagging.create(tag_id:'12', term_id: '342')
# ytaggings147x = Tagging.create(tag_id:'12', term_id: '343')
# ytaggings148x = Tagging.create(tag_id:'12', term_id: '344')
# ytaggings149x = Tagging.create(tag_id:'12', term_id: '364')
# ytaggings150x = Tagging.create(tag_id:'12', term_id: '345')
# ytaggings151x = Tagging.create(tag_id:'12', term_id: '346')
# ytaggings152x = Tagging.create(tag_id:'12', term_id: '347')
# ytaggings153x = Tagging.create(tag_id:'12', term_id: '348')
# ytaggings154x = Tagging.create(tag_id:'12', term_id: '349')
# ytaggings155x = Tagging.create(tag_id:'12', term_id: '350')
# ytaggings156x = Tagging.create(tag_id:'12', term_id: '351')
# ytaggings157x = Tagging.create(tag_id:'12', term_id: '352')
# ytaggings158x = Tagging.create(tag_id:'12', term_id: '353')
# ytaggings159x = Tagging.create(tag_id:'12', term_id: '354')
# ytaggings160x = Tagging.create(tag_id:'12', term_id: '355')
# ytaggings161x = Tagging.create(tag_id:'12', term_id: '356')
# ytaggings162x = Tagging.create(tag_id:'12', term_id: '357')
# ytaggings163x = Tagging.create(tag_id:'12', term_id: '358')
# ytaggings164x = Tagging.create(tag_id:'12', term_id: '359')
# ytaggings165x = Tagging.create(tag_id:'12', term_id: '360')
# ytaggings166x = Tagging.create(tag_id:'12', term_id: '361')
# ytaggings167x = Tagging.create(tag_id:'12', term_id: '362')
# ytaggings168x = Tagging.create(tag_id:'12', term_id: '363')
# ytaggings169x = Tagging.create(tag_id:'12', term_id: '366')
# ytaggings170x = Tagging.create(tag_id:'12', term_id: '367')
# ytaggings171x = Tagging.create(tag_id:'12', term_id: '368')
# ytaggings172x = Tagging.create(tag_id:'12', term_id: '369')
# ytaggings173x = Tagging.create(tag_id:'12', term_id: '370')
# ytaggings174x = Tagging.create(tag_id:'12', term_id: '371')
# ytaggings175x = Tagging.create(tag_id:'12', term_id: '372')
# ytaggings176x = Tagging.create(tag_id:'12', term_id: '373')
# ytaggings177x = Tagging.create(tag_id:'12', term_id: '374')
# ytaggings178x = Tagging.create(tag_id:'12', term_id: '375')
# ytaggings179x = Tagging.create(tag_id:'12', term_id: '376')
# ytaggings180x = Tagging.create(tag_id:'12', term_id: '377')
# ytaggings181x = Tagging.create(tag_id:'12', term_id: '378')
# ytaggings182x = Tagging.create(tag_id:'12', term_id: '379')
# ytaggings183x = Tagging.create(tag_id:'12', term_id: '380')
# ytaggings184x = Tagging.create(tag_id:'12', term_id: '381')
# ytaggings185x = Tagging.create(tag_id:'12', term_id: '382')
# ytaggings186x = Tagging.create(tag_id:'12', term_id: '383')
# ytaggings187x = Tagging.create(tag_id:'12', term_id: '384')
# ytaggings300x = Tagging.create(tag_id: '13', term_id: '385')
# ytaggings301x = Tagging.create(tag_id: '13', term_id: '386')
# ytaggings302x = Tagging.create(tag_id: '13', term_id: '387')
# ytaggings303x = Tagging.create(tag_id: '13', term_id: '388')
# ytaggings304x = Tagging.create(tag_id: '13', term_id: '389')
# ytaggings600x = Tagging.create(tag_id: '14', term_id: '390')
# ytaggings601x = Tagging.create(tag_id: '14', term_id: '391')
# ytaggings602x = Tagging.create(tag_id: '14', term_id: '392')
# ytaggings603x = Tagging.create(tag_id: '14', term_id: '393')
# ytaggings604x = Tagging.create(tag_id: '14', term_id: '394')
# ytaggings605x = Tagging.create(tag_id: '14', term_id: '395')
# ytaggings606x = Tagging.create(tag_id: '14', term_id: '396')
# ytaggings607x = Tagging.create(tag_id: '14', term_id: '397')
# ytaggings608x = Tagging.create(tag_id: '14', term_id: '398')
# ytaggings609x = Tagging.create(tag_id: '14', term_id: '399')
# ytaggings610x = Tagging.create(tag_id: '14', term_id: '400')
# ytaggings611x = Tagging.create(tag_id: '14', term_id: '401')
# ytaggings612x = Tagging.create(tag_id: '14', term_id: '402')
# ytaggings613x = Tagging.create(tag_id: '14', term_id: '403')
# ytaggings614x = Tagging.create(tag_id: '14', term_id: '404')
# ytaggings615x = Tagging.create(tag_id: '14', term_id: '405')
# ytaggings616x = Tagging.create(tag_id: '14', term_id: '406')
# ytaggings617x = Tagging.create(tag_id: '14', term_id: '407')
# ytaggings618x = Tagging.create(tag_id: '14', term_id: '408')
# ytaggings619x = Tagging.create(tag_id: '14', term_id: '409')
# ytaggings620x = Tagging.create(tag_id: '14', term_id: '410')
# ytaggings621x = Tagging.create(tag_id: '14', term_id: '411')
# ytaggings622x = Tagging.create(tag_id: '14', term_id: '412')
# ytaggings623x = Tagging.create(tag_id: '14', term_id: '413')
# ytaggings624x = Tagging.create(tag_id: '14', term_id: '414')
# ytaggings625x = Tagging.create(tag_id: '14', term_id: '415')
# ytaggings600x = Tagging.create(tag_id: '14', term_id: '416')
# ytaggings601x = Tagging.create(tag_id: '14', term_id: '417')
# ytaggings602x = Tagging.create(tag_id: '14', term_id: '418')
# ytaggings603x = Tagging.create(tag_id: '14', term_id: '419')
# ytaggings604x = Tagging.create(tag_id: '14', term_id: '420')
# ytaggings605x = Tagging.create(tag_id: '14', term_id: '421')
# ytaggings606x = Tagging.create(tag_id: '14', term_id: '422')
# ytaggings750x = Tagging.create(tag_id: '14', term_id: '424')
# ytaggings751x = Tagging.create(tag_id: '14', term_id: '425')
# ytaggings752x = Tagging.create(tag_id: '14', term_id: '426')
# ytaggings753x = Tagging.create(tag_id: '14', term_id: '427')
# ytaggings754x = Tagging.create(tag_id: '14', term_id: '428')
# ytaggings755x = Tagging.create(tag_id: '14', term_id: '429')
# ytaggings756x = Tagging.create(tag_id: '14', term_id: '430')
# ytaggings757x = Tagging.create(tag_id: '14', term_id: '431')
# ytaggings758x = Tagging.create(tag_id: '14', term_id: '432')
# ytaggings759x = Tagging.create(tag_id: '14', term_id: '433')
# ytaggings760x = Tagging.create(tag_id: '14', term_id: '434')
# ytaggings761x = Tagging.create(tag_id: '14', term_id: '435')
# ytaggings762x = Tagging.create(tag_id: '14', term_id: '436')
# ytaggings250x = Tagging.create(tag_id: '14', term_id: '451')
# ytaggings251x = Tagging.create(tag_id: '14', term_id: '452')
# ytaggings252x = Tagging.create(tag_id: '14', term_id: '453')
# ytaggings253x = Tagging.create(tag_id: '14', term_id: '454')
# ytaggings254x = Tagging.create(tag_id: '14', term_id: '455')
# ytaggings255x = Tagging.create(tag_id: '14', term_id: '456')
# ytaggings256x = Tagging.create(tag_id: '14', term_id: '457')
# ytaggings257x = Tagging.create(tag_id: '14', term_id: '458')
# ytaggings258x = Tagging.create(tag_id: '14', term_id: '459')
# ytaggings259x = Tagging.create(tag_id: '14', term_id: '460')
# ytaggings260x = Tagging.create(tag_id: '14', term_id: '461')
# ytaggings261x = Tagging.create(tag_id: '14', term_id: '462')
# ytaggings262x = Tagging.create(tag_id: '14', term_id: '463')
# ytaggings464x = Tagging.create(term_id: '464', tag_id: '12')
# ytaggings465x = Tagging.create(term_id: '465', tag_id: '12')
# ytaggings466x = Tagging.create(term_id: '466', tag_id: '12')
# ytaggings467x = Tagging.create(term_id: '467', tag_id: '12')
# ytaggings468x = Tagging.create(term_id: '468', tag_id: '12')
# ytaggings469x = Tagging.create(term_id: '469', tag_id: '12')
# ytaggings470x = Tagging.create(term_id: '470', tag_id: '12')
# ytaggings471x = Tagging.create(term_id: '471', tag_id: '12')
# ytaggings472x = Tagging.create(term_id: '472', tag_id: '12')
# ytaggings473x = Tagging.create(term_id: '473', tag_id: '12')
# ytaggings474x = Tagging.create(term_id: '474', tag_id: '12')
# ytaggings475x = Tagging.create(term_id: '475', tag_id: '12')
# ytaggings476x = Tagging.create(term_id: '476', tag_id: '12')
# ytaggings477x = Tagging.create(term_id: '477', tag_id: '12')
# ytaggings478x = Tagging.create(term_id: '478', tag_id: '12')
# ytaggings479x = Tagging.create(term_id: '479', tag_id: '12')
# ytaggings480x = Tagging.create(term_id: '480', tag_id: '12')
# ytaggings481x = Tagging.create(term_id: '481', tag_id: '12')
# ytaggings482x = Tagging.create(term_id: '482', tag_id: '12')
# ytaggings483x = Tagging.create(term_id: '483', tag_id: '12')
# ytaggings484x = Tagging.create(term_id: '484', tag_id: '12')
# ytaggings485x = Tagging.create(term_id: '485', tag_id: '12')
# ytaggings486x = Tagging.create(term_id: '486', tag_id: '12')
# ytaggings487x = Tagging.create(term_id: '487', tag_id: '12')
# ytaggings488x = Tagging.create(term_id: '488', tag_id: '12')
# ytaggings489x = Tagging.create(term_id: '489', tag_id: '12')
# ytaggings490x = Tagging.create(term_id: '490', tag_id: '12')
# ytaggings491x = Tagging.create(term_id: '491', tag_id: '12')
# ytaggings492x = Tagging.create(term_id: '492', tag_id: '12')
# ytaggings493x = Tagging.create(term_id: '493', tag_id: '12')
# ytaggings494x = Tagging.create(term_id: '494', tag_id: '12')
# ytaggings495x = Tagging.create(term_id: '495', tag_id: '12')
# ytaggings496x = Tagging.create(term_id: '496', tag_id: '12')
# ytaggings497x = Tagging.create(term_id: '497', tag_id: '12')
# ytaggings498x = Tagging.create(term_id: '498', tag_id: '12')
# ytaggings499x = Tagging.create(term_id: '499', tag_id: '12')
# ytaggings500x = Tagging.create(term_id: '500', tag_id: '12')
# ytaggings501x = Tagging.create(term_id: '501', tag_id: '12')
# ytaggings502x = Tagging.create(term_id: '502', tag_id: '12')
# ytaggings503x = Tagging.create(term_id: '503', tag_id: '12')
# ytaggings504x = Tagging.create(term_id: '504', tag_id: '12')
# ytaggings505x = Tagging.create(term_id: '505', tag_id: '12')
# ytaggings506x = Tagging.create(term_id: '506', tag_id: '12')
# ytaggings507x = Tagging.create(term_id: '507', tag_id: '12')
# ytaggings508x = Tagging.create(term_id: '508', tag_id: '12')
# ytaggings509x = Tagging.create(term_id: '509', tag_id: '12')
# ytaggings510x = Tagging.create(term_id: '510', tag_id: '12')
# ytaggings520x = Tagging.create(term_id: '520', tag_id: '12')
# ytaggings511x = Tagging.create(term_id: '511', tag_id: '12')
# ytaggings512x = Tagging.create(term_id: '512', tag_id: '12')
# ytaggings513x = Tagging.create(term_id: '513', tag_id: '12')
# ytaggings514x = Tagging.create(term_id: '514', tag_id: '12')
# ytaggings515x = Tagging.create(term_id: '515', tag_id: '12')
# ytaggings516x = Tagging.create(term_id: '516', tag_id: '12')
# ytaggings517x = Tagging.create(term_id: '517', tag_id: '12')
# ytaggings518x = Tagging.create(term_id: '518', tag_id: '12')
# ytaggings519x = Tagging.create(term_id: '519', tag_id: '12')
# ytaggings521x = Tagging.create(term_id: '521', tag_id: '12')
# ytaggings522x = Tagging.create(term_id: '522', tag_id: '12')
# ytaggings523x = Tagging.create(term_id: '523', tag_id: '12')
# ytaggings524x = Tagging.create(term_id: '524', tag_id: '12')
# ytaggings525x = Tagging.create(term_id: '525', tag_id: '12')
# ytaggings526x = Tagging.create(term_id: '526', tag_id: '12')
# ytaggings527x = Tagging.create(term_id: '527', tag_id: '12')
# ytaggings528x = Tagging.create(term_id: '528', tag_id: '12')
# ytaggings529x = Tagging.create(term_id: '529', tag_id: '12')
# ytaggings530x = Tagging.create(term_id: '530', tag_id: '12')
# ytaggings531x = Tagging.create(term_id: '531', tag_id: '12')
# ytaggings532x = Tagging.create(term_id: '532', tag_id: '12')
# ytaggings533x = Tagging.create(term_id: '533', tag_id: '12')
# ytaggings534x = Tagging.create(term_id: '534', tag_id: '12')
# ytaggings535y = Tagging.create(term_id: '535', tag_id: '12')
# ytaggings544y = Tagging.create(term_id: '544', tag_id: '12')
# ytaggings536y = Tagging.create(term_id: '536', tag_id: '12')
# ytaggings537y = Tagging.create(term_id: '537', tag_id: '12')
# ytaggings538y = Tagging.create(term_id: '538', tag_id: '12')
# ytaggings539y = Tagging.create(term_id: '539', tag_id: '12')
# ytaggings540y = Tagging.create(term_id: '540', tag_id: '12')
# ytaggings541y = Tagging.create(term_id: '541', tag_id: '12')
# ytaggings542y = Tagging.create(term_id: '542', tag_id: '12')
# ytaggings543y = Tagging.create(term_id: '543', tag_id: '12')
# ytaggings545y = Tagging.create(term_id: '545', tag_id: '12')
# ytaggings548y = Tagging.create(term_id: '548', tag_id: '12')
# ytaggings549y = Tagging.create(term_id: '549', tag_id: '12')
# ytaggings550y = Tagging.create(term_id: '550', tag_id: '12')
# ytaggings551y = Tagging.create(term_id: '551', tag_id: '12')
# ytaggings552y = Tagging.create(term_id: '552', tag_id: '12')
# ytaggings553y = Tagging.create(term_id: '553', tag_id: '12')
# ytaggings554y = Tagging.create(term_id: '554', tag_id: '12')
# ytaggings555y = Tagging.create(term_id: '555', tag_id: '12')
# ytaggings556y = Tagging.create(term_id: '556', tag_id: '12')
# ytaggings557y = Tagging.create(term_id: '557', tag_id: '12')
# ytaggings558y = Tagging.create(term_id: '558', tag_id: '12')
# ytaggings559y = Tagging.create(term_id: '559', tag_id: '12')
# ytaggings560y = Tagging.create(term_id: '560', tag_id: '12')
# ytaggings561y = Tagging.create(term_id: '561', tag_id: '12')
# ytaggings562y = Tagging.create(term_id: '562', tag_id: '12')
# ytaggings563y = Tagging.create(term_id: '563', tag_id: '12')
# ytaggings564y = Tagging.create(term_id: '564', tag_id: '12')
# ytaggings565y = Tagging.create(term_id: '565', tag_id: '12')
# ytaggings566y = Tagging.create(term_id: '566', tag_id: '12')
# ytaggings567y = Tagging.create(term_id: '567', tag_id: '12')
# ytaggings568y = Tagging.create(term_id: '568', tag_id: '12')
# ytaggings569y = Tagging.create(term_id: '569', tag_id: '12')
# ytaggings570y = Tagging.create(term_id: '570', tag_id: '12')
# ytaggings571y = Tagging.create(term_id: '571', tag_id: '12')
# ytaggings572y = Tagging.create(term_id: '572', tag_id: '12')
# ytaggings573y = Tagging.create(term_id: '573', tag_id: '12')
# ytaggings574y = Tagging.create(term_id: '574', tag_id: '12')
# ytaggings575y = Tagging.create(term_id: '575', tag_id: '12')
# ytaggings578y = Tagging.create(term_id: '578', tag_id: '12')
# ytaggings579y = Tagging.create(term_id: '579', tag_id: '12')
# ytaggings580y = Tagging.create(term_id: '580', tag_id: '12')
# ytaggings581y = Tagging.create(term_id: '581', tag_id: '12')
# ytaggings582y = Tagging.create(term_id: '582', tag_id: '12')
# ytaggings583y = Tagging.create(term_id: '583', tag_id: '12')
# ytaggings584y = Tagging.create(term_id: '584', tag_id: '12')
# ytaggings585y = Tagging.create(term_id: '585', tag_id: '12')
# ytaggings577y = Tagging.create(term_id: '577', tag_id: '12')
# ytaggings576y = Tagging.create(term_id: '576', tag_id: '12')
# ytaggings547y = Tagging.create(term_id: '547', tag_id: '12')
# ytaggings546y = Tagging.create(term_id: '546', tag_id: '12')
# ytaggings589y = Tagging.create(term_id: '589', tag_id: '12')
# ytaggings586y = Tagging.create(term_id: '586', tag_id: '12')
# ytaggings587y = Tagging.create(term_id: '587', tag_id: '12')
# ytaggings588y = Tagging.create(term_id: '588', tag_id: '12')
# ytaggings590y = Tagging.create(term_id: '590', tag_id: '12')
# ytaggings591y = Tagging.create(term_id: '591', tag_id: '12')
# ytaggings592y = Tagging.create(term_id: '592', tag_id: '12')
# ytaggings593y = Tagging.create(term_id: '593', tag_id: '12')
# ytaggings594y = Tagging.create(term_id: '594', tag_id: '12')
# ytaggings595y = Tagging.create(term_id: '595', tag_id: '12')
# ytaggings596y = Tagging.create(term_id: '596', tag_id: '12')
# ytaggings597y = Tagging.create(term_id: '597', tag_id: '12')
# ytaggings598y = Tagging.create(term_id: '598', tag_id: '12')
# ytaggings599y = Tagging.create(term_id: '599', tag_id: '12')
# ytaggings600y = Tagging.create(term_id: '600', tag_id: '12')
# ytaggings601y = Tagging.create(term_id: '601', tag_id: '12')
# ytaggings602y = Tagging.create(term_id: '602', tag_id: '12')
# ytaggings603y = Tagging.create(term_id: '603', tag_id: '12')
# ytaggings604y = Tagging.create(term_id: '604', tag_id: '12')
# ytaggings605y = Tagging.create(term_id: '605', tag_id: '12')
# ytaggings606y = Tagging.create(term_id: '606', tag_id: '12')
# ytaggings607y = Tagging.create(term_id: '607', tag_id: '12')
# ytaggings608y = Tagging.create(term_id: '608', tag_id: '12')
# ytaggings609y = Tagging.create(term_id: '609', tag_id: '12')
# ytaggings610y = Tagging.create(term_id: '610', tag_id: '12')
# ytaggings611y = Tagging.create(term_id: '611', tag_id: '12')
# ytaggings612y = Tagging.create(term_id: '612', tag_id: '12')
# ytaggings613y = Tagging.create(term_id: '613', tag_id: '12')
# ytaggings614y = Tagging.create(term_id: '614', tag_id: '12')
# ytaggings615y = Tagging.create(term_id: '615', tag_id: '12')
# ytaggings616y = Tagging.create(term_id: '616', tag_id: '12')
# ytaggings617y = Tagging.create(term_id: '617', tag_id: '12')
# ytaggings618y = Tagging.create(term_id: '618', tag_id: '12')
# ytaggings619y = Tagging.create(term_id: '619', tag_id: '12')
# ytaggings620y = Tagging.create(term_id: '620', tag_id: '12')
# ytaggings621y = Tagging.create(term_id: '621', tag_id: '12')
# ytaggings622y = Tagging.create(term_id: '622', tag_id: '12')
# ytaggings623y = Tagging.create(term_id: '623', tag_id: '12')
# ytaggings624y = Tagging.create(term_id: '624', tag_id: '12')
# ytaggings625y = Tagging.create(term_id: '625', tag_id: '12')
# ytaggings626y = Tagging.create(term_id: '626', tag_id: '12')
# ytaggings627y = Tagging.create(term_id: '627', tag_id: '12')
# ytaggings628y = Tagging.create(term_id: '628', tag_id: '12')
# ytaggings629y = Tagging.create(term_id: '629', tag_id: '12')
# ytaggings630y = Tagging.create(term_id: '630', tag_id: '12')
# ytaggings631y = Tagging.create(term_id: '631', tag_id: '12')
# ytaggings632y = Tagging.create(term_id: '632', tag_id: '12')
# ytaggings633y = Tagging.create(term_id: '633', tag_id: '12')
# ytaggings634y = Tagging.create(term_id: '634', tag_id: '12')
# ytaggings635y = Tagging.create(term_id: '635', tag_id: '12')
# ytaggings636y = Tagging.create(term_id: '636', tag_id: '12')
# ytaggings637y = Tagging.create(term_id: '637', tag_id: '12')
# ytaggings638y = Tagging.create(term_id: '638', tag_id: '12')
# ytaggings639y = Tagging.create(term_id: '639', tag_id: '12')
# ytaggings640y = Tagging.create(term_id: '640', tag_id: '12')
# ytaggings641y = Tagging.create(term_id: '641', tag_id: '12')
# ytaggings642y = Tagging.create(term_id: '642', tag_id: '12')
# ytaggings643y = Tagging.create(term_id: '643', tag_id: '12')
# ytaggings644y = Tagging.create(term_id: '644', tag_id: '12')
# ytaggings645y = Tagging.create(term_id: '645', tag_id: '12')
# ytaggings646y = Tagging.create(term_id: '646', tag_id: '12')
# ytaggings647y = Tagging.create(term_id: '647', tag_id: '12')
# ytaggings648y = Tagging.create(term_id: '648', tag_id: '12')
# ytaggings649y = Tagging.create(term_id: '649', tag_id: '12')
# ytaggings650y = Tagging.create(term_id: '650', tag_id: '12')
# ytaggings651y = Tagging.create(term_id: '651', tag_id: '12')
# ytaggings652y = Tagging.create(term_id: '652', tag_id: '12')
# ytaggings653y = Tagging.create(term_id: '653', tag_id: '12')
# ytaggings654y = Tagging.create(term_id: '654', tag_id: '12')
# ytaggings655y = Tagging.create(term_id: '655', tag_id: '12')
# ytaggings656y = Tagging.create(term_id: '656', tag_id: '12')
# ytaggings657y = Tagging.create(term_id: '657', tag_id: '12')
# ytaggings658y = Tagging.create(term_id: '658', tag_id: '12')
# ytaggings659y = Tagging.create(term_id: '659', tag_id: '12')
# ytaggings660y = Tagging.create(term_id: '660', tag_id: '12')
# ytaggings661y = Tagging.create(term_id: '661', tag_id: '12')
# ytaggings662y = Tagging.create(term_id: '662', tag_id: '12')
# ytaggings663y = Tagging.create(term_id: '663', tag_id: '12')
# ytaggings664y = Tagging.create(term_id: '664', tag_id: '12')
# ytaggings665y = Tagging.create(term_id: '665', tag_id: '12')
# ytaggings666y = Tagging.create(term_id: '666', tag_id: '12')
# ytaggings667y = Tagging.create(term_id: '667', tag_id: '12')
# ytaggings668y = Tagging.create(term_id: '668', tag_id: '12')
# ytaggings669y = Tagging.create(term_id: '669', tag_id: '12')
# ytaggings670y = Tagging.create(term_id: '670', tag_id: '12')
# ytaggings671y = Tagging.create(term_id: '671', tag_id: '12')
# ytaggings672y = Tagging.create(term_id: '672', tag_id: '12')
# ytaggings673y = Tagging.create(term_id: '673', tag_id: '12')
# ytaggings674y = Tagging.create(term_id: '674', tag_id: '12')
# ytaggings675y = Tagging.create(term_id: '675', tag_id: '12')
